
APPLICATION_F767ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08040000  08040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c5c  080401f8  080401f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08042e54  08042e54  00003e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08042e9c  08042e9c  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08042e9c  08042e9c  00003e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08042ea4  08042ea4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08042ea4  08042ea4  00003ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08042ea8  08042ea8  00003ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08042eac  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08042eb8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08042eb8  000040b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097ab  00000000  00000000  0000403a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016cd  00000000  00000000  0000d7e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  0000eeb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000591  00000000  00000000  0000f600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000267ac  00000000  00000000  0000fb91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b10  00000000  00000000  0003633d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f06c7  00000000  00000000  0003fe4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130514  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c90  00000000  00000000  00130558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001321e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401f8 <__do_global_dtors_aux>:
 80401f8:	b510      	push	{r4, lr}
 80401fa:	4c05      	ldr	r4, [pc, #20]	@ (8040210 <__do_global_dtors_aux+0x18>)
 80401fc:	7823      	ldrb	r3, [r4, #0]
 80401fe:	b933      	cbnz	r3, 804020e <__do_global_dtors_aux+0x16>
 8040200:	4b04      	ldr	r3, [pc, #16]	@ (8040214 <__do_global_dtors_aux+0x1c>)
 8040202:	b113      	cbz	r3, 804020a <__do_global_dtors_aux+0x12>
 8040204:	4804      	ldr	r0, [pc, #16]	@ (8040218 <__do_global_dtors_aux+0x20>)
 8040206:	f3af 8000 	nop.w
 804020a:	2301      	movs	r3, #1
 804020c:	7023      	strb	r3, [r4, #0]
 804020e:	bd10      	pop	{r4, pc}
 8040210:	2000000c 	.word	0x2000000c
 8040214:	00000000 	.word	0x00000000
 8040218:	08042e3c 	.word	0x08042e3c

0804021c <frame_dummy>:
 804021c:	b508      	push	{r3, lr}
 804021e:	4b03      	ldr	r3, [pc, #12]	@ (804022c <frame_dummy+0x10>)
 8040220:	b11b      	cbz	r3, 804022a <frame_dummy+0xe>
 8040222:	4903      	ldr	r1, [pc, #12]	@ (8040230 <frame_dummy+0x14>)
 8040224:	4803      	ldr	r0, [pc, #12]	@ (8040234 <frame_dummy+0x18>)
 8040226:	f3af 8000 	nop.w
 804022a:	bd08      	pop	{r3, pc}
 804022c:	00000000 	.word	0x00000000
 8040230:	20000010 	.word	0x20000010
 8040234:	08042e3c 	.word	0x08042e3c

08040238 <strlen>:
 8040238:	4603      	mov	r3, r0
 804023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 804023e:	2a00      	cmp	r2, #0
 8040240:	d1fb      	bne.n	804023a <strlen+0x2>
 8040242:	1a18      	subs	r0, r3, r0
 8040244:	3801      	subs	r0, #1
 8040246:	4770      	bx	lr

08040248 <__aeabi_uldivmod>:
 8040248:	b953      	cbnz	r3, 8040260 <__aeabi_uldivmod+0x18>
 804024a:	b94a      	cbnz	r2, 8040260 <__aeabi_uldivmod+0x18>
 804024c:	2900      	cmp	r1, #0
 804024e:	bf08      	it	eq
 8040250:	2800      	cmpeq	r0, #0
 8040252:	bf1c      	itt	ne
 8040254:	f04f 31ff 	movne.w	r1, #4294967295
 8040258:	f04f 30ff 	movne.w	r0, #4294967295
 804025c:	f000 b988 	b.w	8040570 <__aeabi_idiv0>
 8040260:	f1ad 0c08 	sub.w	ip, sp, #8
 8040264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040268:	f000 f806 	bl	8040278 <__udivmoddi4>
 804026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040274:	b004      	add	sp, #16
 8040276:	4770      	bx	lr

08040278 <__udivmoddi4>:
 8040278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804027c:	9d08      	ldr	r5, [sp, #32]
 804027e:	468e      	mov	lr, r1
 8040280:	4604      	mov	r4, r0
 8040282:	4688      	mov	r8, r1
 8040284:	2b00      	cmp	r3, #0
 8040286:	d14a      	bne.n	804031e <__udivmoddi4+0xa6>
 8040288:	428a      	cmp	r2, r1
 804028a:	4617      	mov	r7, r2
 804028c:	d962      	bls.n	8040354 <__udivmoddi4+0xdc>
 804028e:	fab2 f682 	clz	r6, r2
 8040292:	b14e      	cbz	r6, 80402a8 <__udivmoddi4+0x30>
 8040294:	f1c6 0320 	rsb	r3, r6, #32
 8040298:	fa01 f806 	lsl.w	r8, r1, r6
 804029c:	fa20 f303 	lsr.w	r3, r0, r3
 80402a0:	40b7      	lsls	r7, r6
 80402a2:	ea43 0808 	orr.w	r8, r3, r8
 80402a6:	40b4      	lsls	r4, r6
 80402a8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80402ac:	fa1f fc87 	uxth.w	ip, r7
 80402b0:	fbb8 f1fe 	udiv	r1, r8, lr
 80402b4:	0c23      	lsrs	r3, r4, #16
 80402b6:	fb0e 8811 	mls	r8, lr, r1, r8
 80402ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80402be:	fb01 f20c 	mul.w	r2, r1, ip
 80402c2:	429a      	cmp	r2, r3
 80402c4:	d909      	bls.n	80402da <__udivmoddi4+0x62>
 80402c6:	18fb      	adds	r3, r7, r3
 80402c8:	f101 30ff 	add.w	r0, r1, #4294967295
 80402cc:	f080 80ea 	bcs.w	80404a4 <__udivmoddi4+0x22c>
 80402d0:	429a      	cmp	r2, r3
 80402d2:	f240 80e7 	bls.w	80404a4 <__udivmoddi4+0x22c>
 80402d6:	3902      	subs	r1, #2
 80402d8:	443b      	add	r3, r7
 80402da:	1a9a      	subs	r2, r3, r2
 80402dc:	b2a3      	uxth	r3, r4
 80402de:	fbb2 f0fe 	udiv	r0, r2, lr
 80402e2:	fb0e 2210 	mls	r2, lr, r0, r2
 80402e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80402ea:	fb00 fc0c 	mul.w	ip, r0, ip
 80402ee:	459c      	cmp	ip, r3
 80402f0:	d909      	bls.n	8040306 <__udivmoddi4+0x8e>
 80402f2:	18fb      	adds	r3, r7, r3
 80402f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80402f8:	f080 80d6 	bcs.w	80404a8 <__udivmoddi4+0x230>
 80402fc:	459c      	cmp	ip, r3
 80402fe:	f240 80d3 	bls.w	80404a8 <__udivmoddi4+0x230>
 8040302:	443b      	add	r3, r7
 8040304:	3802      	subs	r0, #2
 8040306:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 804030a:	eba3 030c 	sub.w	r3, r3, ip
 804030e:	2100      	movs	r1, #0
 8040310:	b11d      	cbz	r5, 804031a <__udivmoddi4+0xa2>
 8040312:	40f3      	lsrs	r3, r6
 8040314:	2200      	movs	r2, #0
 8040316:	e9c5 3200 	strd	r3, r2, [r5]
 804031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804031e:	428b      	cmp	r3, r1
 8040320:	d905      	bls.n	804032e <__udivmoddi4+0xb6>
 8040322:	b10d      	cbz	r5, 8040328 <__udivmoddi4+0xb0>
 8040324:	e9c5 0100 	strd	r0, r1, [r5]
 8040328:	2100      	movs	r1, #0
 804032a:	4608      	mov	r0, r1
 804032c:	e7f5      	b.n	804031a <__udivmoddi4+0xa2>
 804032e:	fab3 f183 	clz	r1, r3
 8040332:	2900      	cmp	r1, #0
 8040334:	d146      	bne.n	80403c4 <__udivmoddi4+0x14c>
 8040336:	4573      	cmp	r3, lr
 8040338:	d302      	bcc.n	8040340 <__udivmoddi4+0xc8>
 804033a:	4282      	cmp	r2, r0
 804033c:	f200 8105 	bhi.w	804054a <__udivmoddi4+0x2d2>
 8040340:	1a84      	subs	r4, r0, r2
 8040342:	eb6e 0203 	sbc.w	r2, lr, r3
 8040346:	2001      	movs	r0, #1
 8040348:	4690      	mov	r8, r2
 804034a:	2d00      	cmp	r5, #0
 804034c:	d0e5      	beq.n	804031a <__udivmoddi4+0xa2>
 804034e:	e9c5 4800 	strd	r4, r8, [r5]
 8040352:	e7e2      	b.n	804031a <__udivmoddi4+0xa2>
 8040354:	2a00      	cmp	r2, #0
 8040356:	f000 8090 	beq.w	804047a <__udivmoddi4+0x202>
 804035a:	fab2 f682 	clz	r6, r2
 804035e:	2e00      	cmp	r6, #0
 8040360:	f040 80a4 	bne.w	80404ac <__udivmoddi4+0x234>
 8040364:	1a8a      	subs	r2, r1, r2
 8040366:	0c03      	lsrs	r3, r0, #16
 8040368:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 804036c:	b280      	uxth	r0, r0
 804036e:	b2bc      	uxth	r4, r7
 8040370:	2101      	movs	r1, #1
 8040372:	fbb2 fcfe 	udiv	ip, r2, lr
 8040376:	fb0e 221c 	mls	r2, lr, ip, r2
 804037a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 804037e:	fb04 f20c 	mul.w	r2, r4, ip
 8040382:	429a      	cmp	r2, r3
 8040384:	d907      	bls.n	8040396 <__udivmoddi4+0x11e>
 8040386:	18fb      	adds	r3, r7, r3
 8040388:	f10c 38ff 	add.w	r8, ip, #4294967295
 804038c:	d202      	bcs.n	8040394 <__udivmoddi4+0x11c>
 804038e:	429a      	cmp	r2, r3
 8040390:	f200 80e0 	bhi.w	8040554 <__udivmoddi4+0x2dc>
 8040394:	46c4      	mov	ip, r8
 8040396:	1a9b      	subs	r3, r3, r2
 8040398:	fbb3 f2fe 	udiv	r2, r3, lr
 804039c:	fb0e 3312 	mls	r3, lr, r2, r3
 80403a0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80403a4:	fb02 f404 	mul.w	r4, r2, r4
 80403a8:	429c      	cmp	r4, r3
 80403aa:	d907      	bls.n	80403bc <__udivmoddi4+0x144>
 80403ac:	18fb      	adds	r3, r7, r3
 80403ae:	f102 30ff 	add.w	r0, r2, #4294967295
 80403b2:	d202      	bcs.n	80403ba <__udivmoddi4+0x142>
 80403b4:	429c      	cmp	r4, r3
 80403b6:	f200 80ca 	bhi.w	804054e <__udivmoddi4+0x2d6>
 80403ba:	4602      	mov	r2, r0
 80403bc:	1b1b      	subs	r3, r3, r4
 80403be:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80403c2:	e7a5      	b.n	8040310 <__udivmoddi4+0x98>
 80403c4:	f1c1 0620 	rsb	r6, r1, #32
 80403c8:	408b      	lsls	r3, r1
 80403ca:	fa22 f706 	lsr.w	r7, r2, r6
 80403ce:	431f      	orrs	r7, r3
 80403d0:	fa0e f401 	lsl.w	r4, lr, r1
 80403d4:	fa20 f306 	lsr.w	r3, r0, r6
 80403d8:	fa2e fe06 	lsr.w	lr, lr, r6
 80403dc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80403e0:	4323      	orrs	r3, r4
 80403e2:	fa00 f801 	lsl.w	r8, r0, r1
 80403e6:	fa1f fc87 	uxth.w	ip, r7
 80403ea:	fbbe f0f9 	udiv	r0, lr, r9
 80403ee:	0c1c      	lsrs	r4, r3, #16
 80403f0:	fb09 ee10 	mls	lr, r9, r0, lr
 80403f4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80403f8:	fb00 fe0c 	mul.w	lr, r0, ip
 80403fc:	45a6      	cmp	lr, r4
 80403fe:	fa02 f201 	lsl.w	r2, r2, r1
 8040402:	d909      	bls.n	8040418 <__udivmoddi4+0x1a0>
 8040404:	193c      	adds	r4, r7, r4
 8040406:	f100 3aff 	add.w	sl, r0, #4294967295
 804040a:	f080 809c 	bcs.w	8040546 <__udivmoddi4+0x2ce>
 804040e:	45a6      	cmp	lr, r4
 8040410:	f240 8099 	bls.w	8040546 <__udivmoddi4+0x2ce>
 8040414:	3802      	subs	r0, #2
 8040416:	443c      	add	r4, r7
 8040418:	eba4 040e 	sub.w	r4, r4, lr
 804041c:	fa1f fe83 	uxth.w	lr, r3
 8040420:	fbb4 f3f9 	udiv	r3, r4, r9
 8040424:	fb09 4413 	mls	r4, r9, r3, r4
 8040428:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 804042c:	fb03 fc0c 	mul.w	ip, r3, ip
 8040430:	45a4      	cmp	ip, r4
 8040432:	d908      	bls.n	8040446 <__udivmoddi4+0x1ce>
 8040434:	193c      	adds	r4, r7, r4
 8040436:	f103 3eff 	add.w	lr, r3, #4294967295
 804043a:	f080 8082 	bcs.w	8040542 <__udivmoddi4+0x2ca>
 804043e:	45a4      	cmp	ip, r4
 8040440:	d97f      	bls.n	8040542 <__udivmoddi4+0x2ca>
 8040442:	3b02      	subs	r3, #2
 8040444:	443c      	add	r4, r7
 8040446:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 804044a:	eba4 040c 	sub.w	r4, r4, ip
 804044e:	fba0 ec02 	umull	lr, ip, r0, r2
 8040452:	4564      	cmp	r4, ip
 8040454:	4673      	mov	r3, lr
 8040456:	46e1      	mov	r9, ip
 8040458:	d362      	bcc.n	8040520 <__udivmoddi4+0x2a8>
 804045a:	d05f      	beq.n	804051c <__udivmoddi4+0x2a4>
 804045c:	b15d      	cbz	r5, 8040476 <__udivmoddi4+0x1fe>
 804045e:	ebb8 0203 	subs.w	r2, r8, r3
 8040462:	eb64 0409 	sbc.w	r4, r4, r9
 8040466:	fa04 f606 	lsl.w	r6, r4, r6
 804046a:	fa22 f301 	lsr.w	r3, r2, r1
 804046e:	431e      	orrs	r6, r3
 8040470:	40cc      	lsrs	r4, r1
 8040472:	e9c5 6400 	strd	r6, r4, [r5]
 8040476:	2100      	movs	r1, #0
 8040478:	e74f      	b.n	804031a <__udivmoddi4+0xa2>
 804047a:	fbb1 fcf2 	udiv	ip, r1, r2
 804047e:	0c01      	lsrs	r1, r0, #16
 8040480:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8040484:	b280      	uxth	r0, r0
 8040486:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 804048a:	463b      	mov	r3, r7
 804048c:	4638      	mov	r0, r7
 804048e:	463c      	mov	r4, r7
 8040490:	46b8      	mov	r8, r7
 8040492:	46be      	mov	lr, r7
 8040494:	2620      	movs	r6, #32
 8040496:	fbb1 f1f7 	udiv	r1, r1, r7
 804049a:	eba2 0208 	sub.w	r2, r2, r8
 804049e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80404a2:	e766      	b.n	8040372 <__udivmoddi4+0xfa>
 80404a4:	4601      	mov	r1, r0
 80404a6:	e718      	b.n	80402da <__udivmoddi4+0x62>
 80404a8:	4610      	mov	r0, r2
 80404aa:	e72c      	b.n	8040306 <__udivmoddi4+0x8e>
 80404ac:	f1c6 0220 	rsb	r2, r6, #32
 80404b0:	fa2e f302 	lsr.w	r3, lr, r2
 80404b4:	40b7      	lsls	r7, r6
 80404b6:	40b1      	lsls	r1, r6
 80404b8:	fa20 f202 	lsr.w	r2, r0, r2
 80404bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80404c0:	430a      	orrs	r2, r1
 80404c2:	fbb3 f8fe 	udiv	r8, r3, lr
 80404c6:	b2bc      	uxth	r4, r7
 80404c8:	fb0e 3318 	mls	r3, lr, r8, r3
 80404cc:	0c11      	lsrs	r1, r2, #16
 80404ce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80404d2:	fb08 f904 	mul.w	r9, r8, r4
 80404d6:	40b0      	lsls	r0, r6
 80404d8:	4589      	cmp	r9, r1
 80404da:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80404de:	b280      	uxth	r0, r0
 80404e0:	d93e      	bls.n	8040560 <__udivmoddi4+0x2e8>
 80404e2:	1879      	adds	r1, r7, r1
 80404e4:	f108 3cff 	add.w	ip, r8, #4294967295
 80404e8:	d201      	bcs.n	80404ee <__udivmoddi4+0x276>
 80404ea:	4589      	cmp	r9, r1
 80404ec:	d81f      	bhi.n	804052e <__udivmoddi4+0x2b6>
 80404ee:	eba1 0109 	sub.w	r1, r1, r9
 80404f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80404f6:	fb09 f804 	mul.w	r8, r9, r4
 80404fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80404fe:	b292      	uxth	r2, r2
 8040500:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8040504:	4542      	cmp	r2, r8
 8040506:	d229      	bcs.n	804055c <__udivmoddi4+0x2e4>
 8040508:	18ba      	adds	r2, r7, r2
 804050a:	f109 31ff 	add.w	r1, r9, #4294967295
 804050e:	d2c4      	bcs.n	804049a <__udivmoddi4+0x222>
 8040510:	4542      	cmp	r2, r8
 8040512:	d2c2      	bcs.n	804049a <__udivmoddi4+0x222>
 8040514:	f1a9 0102 	sub.w	r1, r9, #2
 8040518:	443a      	add	r2, r7
 804051a:	e7be      	b.n	804049a <__udivmoddi4+0x222>
 804051c:	45f0      	cmp	r8, lr
 804051e:	d29d      	bcs.n	804045c <__udivmoddi4+0x1e4>
 8040520:	ebbe 0302 	subs.w	r3, lr, r2
 8040524:	eb6c 0c07 	sbc.w	ip, ip, r7
 8040528:	3801      	subs	r0, #1
 804052a:	46e1      	mov	r9, ip
 804052c:	e796      	b.n	804045c <__udivmoddi4+0x1e4>
 804052e:	eba7 0909 	sub.w	r9, r7, r9
 8040532:	4449      	add	r1, r9
 8040534:	f1a8 0c02 	sub.w	ip, r8, #2
 8040538:	fbb1 f9fe 	udiv	r9, r1, lr
 804053c:	fb09 f804 	mul.w	r8, r9, r4
 8040540:	e7db      	b.n	80404fa <__udivmoddi4+0x282>
 8040542:	4673      	mov	r3, lr
 8040544:	e77f      	b.n	8040446 <__udivmoddi4+0x1ce>
 8040546:	4650      	mov	r0, sl
 8040548:	e766      	b.n	8040418 <__udivmoddi4+0x1a0>
 804054a:	4608      	mov	r0, r1
 804054c:	e6fd      	b.n	804034a <__udivmoddi4+0xd2>
 804054e:	443b      	add	r3, r7
 8040550:	3a02      	subs	r2, #2
 8040552:	e733      	b.n	80403bc <__udivmoddi4+0x144>
 8040554:	f1ac 0c02 	sub.w	ip, ip, #2
 8040558:	443b      	add	r3, r7
 804055a:	e71c      	b.n	8040396 <__udivmoddi4+0x11e>
 804055c:	4649      	mov	r1, r9
 804055e:	e79c      	b.n	804049a <__udivmoddi4+0x222>
 8040560:	eba1 0109 	sub.w	r1, r1, r9
 8040564:	46c4      	mov	ip, r8
 8040566:	fbb1 f9fe 	udiv	r9, r1, lr
 804056a:	fb09 f804 	mul.w	r8, r9, r4
 804056e:	e7c4      	b.n	80404fa <__udivmoddi4+0x282>

08040570 <__aeabi_idiv0>:
 8040570:	4770      	bx	lr
 8040572:	bf00      	nop

08040574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040574:	b580      	push	{r7, lr}
 8040576:	b084      	sub	sp, #16
 8040578:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 804057a:	f000 fa54 	bl	8040a26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 804057e:	f000 f833 	bl	80405e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8040582:	f000 f8d1 	bl	8040728 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8040586:	f000 f89f 	bl	80406c8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 804058a:	2200      	movs	r2, #0
 804058c:	2180      	movs	r1, #128	@ 0x80
 804058e:	4813      	ldr	r0, [pc, #76]	@ (80405dc <main+0x68>)
 8040590:	f000 fd50 	bl	8041034 <HAL_GPIO_WritePin>

  write("\nStarting application");
 8040594:	4812      	ldr	r0, [pc, #72]	@ (80405e0 <main+0x6c>)
 8040596:	f000 f923 	bl	80407e0 <write>

  uint32_t tickstart = 0;
 804059a:	2300      	movs	r3, #0
 804059c:	60fb      	str	r3, [r7, #12]
  uint32_t wait = 500;
 804059e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80405a2:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  currentTick = HAL_GetTick();
 80405a4:	f000 fa90 	bl	8040ac8 <HAL_GetTick>
 80405a8:	6078      	str	r0, [r7, #4]

	  if ((currentTick - tickstart) >= wait)
 80405aa:	687a      	ldr	r2, [r7, #4]
 80405ac:	68fb      	ldr	r3, [r7, #12]
 80405ae:	1ad3      	subs	r3, r2, r3
 80405b0:	68ba      	ldr	r2, [r7, #8]
 80405b2:	429a      	cmp	r2, r3
 80405b4:	d805      	bhi.n	80405c2 <main+0x4e>
	  {
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80405b6:	2180      	movs	r1, #128	@ 0x80
 80405b8:	4808      	ldr	r0, [pc, #32]	@ (80405dc <main+0x68>)
 80405ba:	f000 fd54 	bl	8041066 <HAL_GPIO_TogglePin>
		  tickstart = currentTick;
 80405be:	687b      	ldr	r3, [r7, #4]
 80405c0:	60fb      	str	r3, [r7, #12]
	  }

	  Bt_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80405c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80405c6:	4807      	ldr	r0, [pc, #28]	@ (80405e4 <main+0x70>)
 80405c8:	f000 fd1c 	bl	8041004 <HAL_GPIO_ReadPin>
 80405cc:	4603      	mov	r3, r0
 80405ce:	70fb      	strb	r3, [r7, #3]
	  if(Bt_state == GPIO_PIN_SET){
 80405d0:	78fb      	ldrb	r3, [r7, #3]
 80405d2:	2b01      	cmp	r3, #1
 80405d4:	d1e6      	bne.n	80405a4 <main+0x30>
		  goto_bootloader();
 80405d6:	f000 f91d 	bl	8040814 <goto_bootloader>
	  currentTick = HAL_GetTick();
 80405da:	e7e3      	b.n	80405a4 <main+0x30>
 80405dc:	40020400 	.word	0x40020400
 80405e0:	08042e54 	.word	0x08042e54
 80405e4:	40020800 	.word	0x40020800

080405e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80405e8:	b580      	push	{r7, lr}
 80405ea:	b094      	sub	sp, #80	@ 0x50
 80405ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80405ee:	f107 031c 	add.w	r3, r7, #28
 80405f2:	2234      	movs	r2, #52	@ 0x34
 80405f4:	2100      	movs	r1, #0
 80405f6:	4618      	mov	r0, r3
 80405f8:	f002 fbf3 	bl	8042de2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80405fc:	f107 0308 	add.w	r3, r7, #8
 8040600:	2200      	movs	r2, #0
 8040602:	601a      	str	r2, [r3, #0]
 8040604:	605a      	str	r2, [r3, #4]
 8040606:	609a      	str	r2, [r3, #8]
 8040608:	60da      	str	r2, [r3, #12]
 804060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 804060c:	4b2c      	ldr	r3, [pc, #176]	@ (80406c0 <SystemClock_Config+0xd8>)
 804060e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8040610:	4a2b      	ldr	r2, [pc, #172]	@ (80406c0 <SystemClock_Config+0xd8>)
 8040612:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8040616:	6413      	str	r3, [r2, #64]	@ 0x40
 8040618:	4b29      	ldr	r3, [pc, #164]	@ (80406c0 <SystemClock_Config+0xd8>)
 804061a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804061c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8040620:	607b      	str	r3, [r7, #4]
 8040622:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8040624:	4b27      	ldr	r3, [pc, #156]	@ (80406c4 <SystemClock_Config+0xdc>)
 8040626:	681b      	ldr	r3, [r3, #0]
 8040628:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 804062c:	4a25      	ldr	r2, [pc, #148]	@ (80406c4 <SystemClock_Config+0xdc>)
 804062e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8040632:	6013      	str	r3, [r2, #0]
 8040634:	4b23      	ldr	r3, [pc, #140]	@ (80406c4 <SystemClock_Config+0xdc>)
 8040636:	681b      	ldr	r3, [r3, #0]
 8040638:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 804063c:	603b      	str	r3, [r7, #0]
 804063e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8040640:	2302      	movs	r3, #2
 8040642:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8040644:	2301      	movs	r3, #1
 8040646:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8040648:	2310      	movs	r3, #16
 804064a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 804064c:	2302      	movs	r3, #2
 804064e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8040650:	2300      	movs	r3, #0
 8040652:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8040654:	2308      	movs	r3, #8
 8040656:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8040658:	2360      	movs	r3, #96	@ 0x60
 804065a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 804065c:	2302      	movs	r3, #2
 804065e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8040660:	2304      	movs	r3, #4
 8040662:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8040664:	2302      	movs	r3, #2
 8040666:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8040668:	f107 031c 	add.w	r3, r7, #28
 804066c:	4618      	mov	r0, r3
 804066e:	f000 fd65 	bl	804113c <HAL_RCC_OscConfig>
 8040672:	4603      	mov	r3, r0
 8040674:	2b00      	cmp	r3, #0
 8040676:	d001      	beq.n	804067c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8040678:	f000 f8e0 	bl	804083c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 804067c:	f000 fd0e 	bl	804109c <HAL_PWREx_EnableOverDrive>
 8040680:	4603      	mov	r3, r0
 8040682:	2b00      	cmp	r3, #0
 8040684:	d001      	beq.n	804068a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8040686:	f000 f8d9 	bl	804083c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 804068a:	230f      	movs	r3, #15
 804068c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 804068e:	2302      	movs	r3, #2
 8040690:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8040692:	2300      	movs	r3, #0
 8040694:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8040696:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 804069a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 804069c:	2300      	movs	r3, #0
 804069e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80406a0:	f107 0308 	add.w	r3, r7, #8
 80406a4:	2103      	movs	r1, #3
 80406a6:	4618      	mov	r0, r3
 80406a8:	f000 fff6 	bl	8041698 <HAL_RCC_ClockConfig>
 80406ac:	4603      	mov	r3, r0
 80406ae:	2b00      	cmp	r3, #0
 80406b0:	d001      	beq.n	80406b6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80406b2:	f000 f8c3 	bl	804083c <Error_Handler>
  }
}
 80406b6:	bf00      	nop
 80406b8:	3750      	adds	r7, #80	@ 0x50
 80406ba:	46bd      	mov	sp, r7
 80406bc:	bd80      	pop	{r7, pc}
 80406be:	bf00      	nop
 80406c0:	40023800 	.word	0x40023800
 80406c4:	40007000 	.word	0x40007000

080406c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80406c8:	b580      	push	{r7, lr}
 80406ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80406cc:	4b14      	ldr	r3, [pc, #80]	@ (8040720 <MX_USART3_UART_Init+0x58>)
 80406ce:	4a15      	ldr	r2, [pc, #84]	@ (8040724 <MX_USART3_UART_Init+0x5c>)
 80406d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80406d2:	4b13      	ldr	r3, [pc, #76]	@ (8040720 <MX_USART3_UART_Init+0x58>)
 80406d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80406d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80406da:	4b11      	ldr	r3, [pc, #68]	@ (8040720 <MX_USART3_UART_Init+0x58>)
 80406dc:	2200      	movs	r2, #0
 80406de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80406e0:	4b0f      	ldr	r3, [pc, #60]	@ (8040720 <MX_USART3_UART_Init+0x58>)
 80406e2:	2200      	movs	r2, #0
 80406e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80406e6:	4b0e      	ldr	r3, [pc, #56]	@ (8040720 <MX_USART3_UART_Init+0x58>)
 80406e8:	2200      	movs	r2, #0
 80406ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80406ec:	4b0c      	ldr	r3, [pc, #48]	@ (8040720 <MX_USART3_UART_Init+0x58>)
 80406ee:	220c      	movs	r2, #12
 80406f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80406f2:	4b0b      	ldr	r3, [pc, #44]	@ (8040720 <MX_USART3_UART_Init+0x58>)
 80406f4:	2200      	movs	r2, #0
 80406f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80406f8:	4b09      	ldr	r3, [pc, #36]	@ (8040720 <MX_USART3_UART_Init+0x58>)
 80406fa:	2200      	movs	r2, #0
 80406fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80406fe:	4b08      	ldr	r3, [pc, #32]	@ (8040720 <MX_USART3_UART_Init+0x58>)
 8040700:	2200      	movs	r2, #0
 8040702:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8040704:	4b06      	ldr	r3, [pc, #24]	@ (8040720 <MX_USART3_UART_Init+0x58>)
 8040706:	2200      	movs	r2, #0
 8040708:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 804070a:	4805      	ldr	r0, [pc, #20]	@ (8040720 <MX_USART3_UART_Init+0x58>)
 804070c:	f001 fe12 	bl	8042334 <HAL_UART_Init>
 8040710:	4603      	mov	r3, r0
 8040712:	2b00      	cmp	r3, #0
 8040714:	d001      	beq.n	804071a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8040716:	f000 f891 	bl	804083c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 804071a:	bf00      	nop
 804071c:	bd80      	pop	{r7, pc}
 804071e:	bf00      	nop
 8040720:	20000028 	.word	0x20000028
 8040724:	40004800 	.word	0x40004800

08040728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8040728:	b580      	push	{r7, lr}
 804072a:	b088      	sub	sp, #32
 804072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804072e:	f107 030c 	add.w	r3, r7, #12
 8040732:	2200      	movs	r2, #0
 8040734:	601a      	str	r2, [r3, #0]
 8040736:	605a      	str	r2, [r3, #4]
 8040738:	609a      	str	r2, [r3, #8]
 804073a:	60da      	str	r2, [r3, #12]
 804073c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 804073e:	4b25      	ldr	r3, [pc, #148]	@ (80407d4 <MX_GPIO_Init+0xac>)
 8040740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8040742:	4a24      	ldr	r2, [pc, #144]	@ (80407d4 <MX_GPIO_Init+0xac>)
 8040744:	f043 0304 	orr.w	r3, r3, #4
 8040748:	6313      	str	r3, [r2, #48]	@ 0x30
 804074a:	4b22      	ldr	r3, [pc, #136]	@ (80407d4 <MX_GPIO_Init+0xac>)
 804074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804074e:	f003 0304 	and.w	r3, r3, #4
 8040752:	60bb      	str	r3, [r7, #8]
 8040754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8040756:	4b1f      	ldr	r3, [pc, #124]	@ (80407d4 <MX_GPIO_Init+0xac>)
 8040758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804075a:	4a1e      	ldr	r2, [pc, #120]	@ (80407d4 <MX_GPIO_Init+0xac>)
 804075c:	f043 0302 	orr.w	r3, r3, #2
 8040760:	6313      	str	r3, [r2, #48]	@ 0x30
 8040762:	4b1c      	ldr	r3, [pc, #112]	@ (80407d4 <MX_GPIO_Init+0xac>)
 8040764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8040766:	f003 0302 	and.w	r3, r3, #2
 804076a:	607b      	str	r3, [r7, #4]
 804076c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 804076e:	4b19      	ldr	r3, [pc, #100]	@ (80407d4 <MX_GPIO_Init+0xac>)
 8040770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8040772:	4a18      	ldr	r2, [pc, #96]	@ (80407d4 <MX_GPIO_Init+0xac>)
 8040774:	f043 0308 	orr.w	r3, r3, #8
 8040778:	6313      	str	r3, [r2, #48]	@ 0x30
 804077a:	4b16      	ldr	r3, [pc, #88]	@ (80407d4 <MX_GPIO_Init+0xac>)
 804077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804077e:	f003 0308 	and.w	r3, r3, #8
 8040782:	603b      	str	r3, [r7, #0]
 8040784:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8040786:	2200      	movs	r2, #0
 8040788:	f244 0181 	movw	r1, #16513	@ 0x4081
 804078c:	4812      	ldr	r0, [pc, #72]	@ (80407d8 <MX_GPIO_Init+0xb0>)
 804078e:	f000 fc51 	bl	8041034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8040792:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8040796:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8040798:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 804079c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 804079e:	2300      	movs	r3, #0
 80407a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80407a2:	f107 030c 	add.w	r3, r7, #12
 80407a6:	4619      	mov	r1, r3
 80407a8:	480c      	ldr	r0, [pc, #48]	@ (80407dc <MX_GPIO_Init+0xb4>)
 80407aa:	f000 fa7f 	bl	8040cac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80407ae:	f244 0381 	movw	r3, #16513	@ 0x4081
 80407b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80407b4:	2301      	movs	r3, #1
 80407b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80407b8:	2300      	movs	r3, #0
 80407ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80407bc:	2300      	movs	r3, #0
 80407be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80407c0:	f107 030c 	add.w	r3, r7, #12
 80407c4:	4619      	mov	r1, r3
 80407c6:	4804      	ldr	r0, [pc, #16]	@ (80407d8 <MX_GPIO_Init+0xb0>)
 80407c8:	f000 fa70 	bl	8040cac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80407cc:	bf00      	nop
 80407ce:	3720      	adds	r7, #32
 80407d0:	46bd      	mov	sp, r7
 80407d2:	bd80      	pop	{r7, pc}
 80407d4:	40023800 	.word	0x40023800
 80407d8:	40020400 	.word	0x40020400
 80407dc:	40020800 	.word	0x40020800

080407e0 <write>:

/* USER CODE BEGIN 4 */

int write(char *ptr){
 80407e0:	b580      	push	{r7, lr}
 80407e2:	b082      	sub	sp, #8
 80407e4:	af00      	add	r7, sp, #0
 80407e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)ptr, strlen(ptr), HAL_MAX_DELAY);
 80407e8:	6878      	ldr	r0, [r7, #4]
 80407ea:	f7ff fd25 	bl	8040238 <strlen>
 80407ee:	4603      	mov	r3, r0
 80407f0:	b29a      	uxth	r2, r3
 80407f2:	f04f 33ff 	mov.w	r3, #4294967295
 80407f6:	6879      	ldr	r1, [r7, #4]
 80407f8:	4805      	ldr	r0, [pc, #20]	@ (8040810 <write+0x30>)
 80407fa:	f001 fde9 	bl	80423d0 <HAL_UART_Transmit>
	return strlen(ptr);
 80407fe:	6878      	ldr	r0, [r7, #4]
 8040800:	f7ff fd1a 	bl	8040238 <strlen>
 8040804:	4603      	mov	r3, r0
}
 8040806:	4618      	mov	r0, r3
 8040808:	3708      	adds	r7, #8
 804080a:	46bd      	mov	sp, r7
 804080c:	bd80      	pop	{r7, pc}
 804080e:	bf00      	nop
 8040810:	20000028 	.word	0x20000028

08040814 <goto_bootloader>:


static void goto_bootloader(void)
{
 8040814:	b580      	push	{r7, lr}
 8040816:	b082      	sub	sp, #8
 8040818:	af00      	add	r7, sp, #0
	write("\nJumping to bootloader");
 804081a:	4806      	ldr	r0, [pc, #24]	@ (8040834 <goto_bootloader+0x20>)
 804081c:	f7ff ffe0 	bl	80407e0 <write>
	void (*app_reset_handler) (void) = (void*) (*(volatile uint32_t *) (0x08000000 + 4));
 8040820:	4b05      	ldr	r3, [pc, #20]	@ (8040838 <goto_bootloader+0x24>)
 8040822:	681b      	ldr	r3, [r3, #0]
 8040824:	607b      	str	r3, [r7, #4]
	app_reset_handler();
 8040826:	687b      	ldr	r3, [r7, #4]
 8040828:	4798      	blx	r3
}
 804082a:	bf00      	nop
 804082c:	3708      	adds	r7, #8
 804082e:	46bd      	mov	sp, r7
 8040830:	bd80      	pop	{r7, pc}
 8040832:	bf00      	nop
 8040834:	08042e6c 	.word	0x08042e6c
 8040838:	08000004 	.word	0x08000004

0804083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 804083c:	b480      	push	{r7}
 804083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8040840:	b672      	cpsid	i
}
 8040842:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8040844:	bf00      	nop
 8040846:	e7fd      	b.n	8040844 <Error_Handler+0x8>

08040848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040848:	b480      	push	{r7}
 804084a:	b083      	sub	sp, #12
 804084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 804084e:	4b0f      	ldr	r3, [pc, #60]	@ (804088c <HAL_MspInit+0x44>)
 8040850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8040852:	4a0e      	ldr	r2, [pc, #56]	@ (804088c <HAL_MspInit+0x44>)
 8040854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8040858:	6413      	str	r3, [r2, #64]	@ 0x40
 804085a:	4b0c      	ldr	r3, [pc, #48]	@ (804088c <HAL_MspInit+0x44>)
 804085c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804085e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8040862:	607b      	str	r3, [r7, #4]
 8040864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040866:	4b09      	ldr	r3, [pc, #36]	@ (804088c <HAL_MspInit+0x44>)
 8040868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 804086a:	4a08      	ldr	r2, [pc, #32]	@ (804088c <HAL_MspInit+0x44>)
 804086c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8040870:	6453      	str	r3, [r2, #68]	@ 0x44
 8040872:	4b06      	ldr	r3, [pc, #24]	@ (804088c <HAL_MspInit+0x44>)
 8040874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8040876:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 804087a:	603b      	str	r3, [r7, #0]
 804087c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 804087e:	bf00      	nop
 8040880:	370c      	adds	r7, #12
 8040882:	46bd      	mov	sp, r7
 8040884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040888:	4770      	bx	lr
 804088a:	bf00      	nop
 804088c:	40023800 	.word	0x40023800

08040890 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8040890:	b580      	push	{r7, lr}
 8040892:	b0ae      	sub	sp, #184	@ 0xb8
 8040894:	af00      	add	r7, sp, #0
 8040896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040898:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 804089c:	2200      	movs	r2, #0
 804089e:	601a      	str	r2, [r3, #0]
 80408a0:	605a      	str	r2, [r3, #4]
 80408a2:	609a      	str	r2, [r3, #8]
 80408a4:	60da      	str	r2, [r3, #12]
 80408a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80408a8:	f107 0314 	add.w	r3, r7, #20
 80408ac:	2290      	movs	r2, #144	@ 0x90
 80408ae:	2100      	movs	r1, #0
 80408b0:	4618      	mov	r0, r3
 80408b2:	f002 fa96 	bl	8042de2 <memset>
  if(huart->Instance==USART3)
 80408b6:	687b      	ldr	r3, [r7, #4]
 80408b8:	681b      	ldr	r3, [r3, #0]
 80408ba:	4a22      	ldr	r2, [pc, #136]	@ (8040944 <HAL_UART_MspInit+0xb4>)
 80408bc:	4293      	cmp	r3, r2
 80408be:	d13c      	bne.n	804093a <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80408c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80408c4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80408c6:	2300      	movs	r3, #0
 80408c8:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80408ca:	f107 0314 	add.w	r3, r7, #20
 80408ce:	4618      	mov	r0, r3
 80408d0:	f001 f908 	bl	8041ae4 <HAL_RCCEx_PeriphCLKConfig>
 80408d4:	4603      	mov	r3, r0
 80408d6:	2b00      	cmp	r3, #0
 80408d8:	d001      	beq.n	80408de <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80408da:	f7ff ffaf 	bl	804083c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80408de:	4b1a      	ldr	r3, [pc, #104]	@ (8040948 <HAL_UART_MspInit+0xb8>)
 80408e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80408e2:	4a19      	ldr	r2, [pc, #100]	@ (8040948 <HAL_UART_MspInit+0xb8>)
 80408e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80408e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80408ea:	4b17      	ldr	r3, [pc, #92]	@ (8040948 <HAL_UART_MspInit+0xb8>)
 80408ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80408ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80408f2:	613b      	str	r3, [r7, #16]
 80408f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80408f6:	4b14      	ldr	r3, [pc, #80]	@ (8040948 <HAL_UART_MspInit+0xb8>)
 80408f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80408fa:	4a13      	ldr	r2, [pc, #76]	@ (8040948 <HAL_UART_MspInit+0xb8>)
 80408fc:	f043 0308 	orr.w	r3, r3, #8
 8040900:	6313      	str	r3, [r2, #48]	@ 0x30
 8040902:	4b11      	ldr	r3, [pc, #68]	@ (8040948 <HAL_UART_MspInit+0xb8>)
 8040904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8040906:	f003 0308 	and.w	r3, r3, #8
 804090a:	60fb      	str	r3, [r7, #12]
 804090c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 804090e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8040912:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040916:	2302      	movs	r3, #2
 8040918:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804091c:	2300      	movs	r3, #0
 804091e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8040922:	2303      	movs	r3, #3
 8040924:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8040928:	2307      	movs	r3, #7
 804092a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 804092e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8040932:	4619      	mov	r1, r3
 8040934:	4805      	ldr	r0, [pc, #20]	@ (804094c <HAL_UART_MspInit+0xbc>)
 8040936:	f000 f9b9 	bl	8040cac <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 804093a:	bf00      	nop
 804093c:	37b8      	adds	r7, #184	@ 0xb8
 804093e:	46bd      	mov	sp, r7
 8040940:	bd80      	pop	{r7, pc}
 8040942:	bf00      	nop
 8040944:	40004800 	.word	0x40004800
 8040948:	40023800 	.word	0x40023800
 804094c:	40020c00 	.word	0x40020c00

08040950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8040950:	b480      	push	{r7}
 8040952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8040954:	bf00      	nop
 8040956:	e7fd      	b.n	8040954 <NMI_Handler+0x4>

08040958 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8040958:	b480      	push	{r7}
 804095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 804095c:	bf00      	nop
 804095e:	e7fd      	b.n	804095c <HardFault_Handler+0x4>

08040960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8040960:	b480      	push	{r7}
 8040962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8040964:	bf00      	nop
 8040966:	e7fd      	b.n	8040964 <MemManage_Handler+0x4>

08040968 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8040968:	b480      	push	{r7}
 804096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 804096c:	bf00      	nop
 804096e:	e7fd      	b.n	804096c <BusFault_Handler+0x4>

08040970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8040970:	b480      	push	{r7}
 8040972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8040974:	bf00      	nop
 8040976:	e7fd      	b.n	8040974 <UsageFault_Handler+0x4>

08040978 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8040978:	b480      	push	{r7}
 804097a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 804097c:	bf00      	nop
 804097e:	46bd      	mov	sp, r7
 8040980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040984:	4770      	bx	lr

08040986 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8040986:	b480      	push	{r7}
 8040988:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 804098a:	bf00      	nop
 804098c:	46bd      	mov	sp, r7
 804098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040992:	4770      	bx	lr

08040994 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8040994:	b480      	push	{r7}
 8040996:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8040998:	bf00      	nop
 804099a:	46bd      	mov	sp, r7
 804099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80409a0:	4770      	bx	lr

080409a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80409a2:	b580      	push	{r7, lr}
 80409a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80409a6:	f000 f87b 	bl	8040aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80409aa:	bf00      	nop
 80409ac:	bd80      	pop	{r7, pc}
	...

080409b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80409b0:	b480      	push	{r7}
 80409b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80409b4:	4b06      	ldr	r3, [pc, #24]	@ (80409d0 <SystemInit+0x20>)
 80409b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80409ba:	4a05      	ldr	r2, [pc, #20]	@ (80409d0 <SystemInit+0x20>)
 80409bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80409c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80409c4:	bf00      	nop
 80409c6:	46bd      	mov	sp, r7
 80409c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80409cc:	4770      	bx	lr
 80409ce:	bf00      	nop
 80409d0:	e000ed00 	.word	0xe000ed00

080409d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80409d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8040a0c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80409d8:	f7ff ffea 	bl	80409b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80409dc:	480c      	ldr	r0, [pc, #48]	@ (8040a10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80409de:	490d      	ldr	r1, [pc, #52]	@ (8040a14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80409e0:	4a0d      	ldr	r2, [pc, #52]	@ (8040a18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80409e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80409e4:	e002      	b.n	80409ec <LoopCopyDataInit>

080409e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80409e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80409e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80409ea:	3304      	adds	r3, #4

080409ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80409ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80409ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80409f0:	d3f9      	bcc.n	80409e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80409f2:	4a0a      	ldr	r2, [pc, #40]	@ (8040a1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80409f4:	4c0a      	ldr	r4, [pc, #40]	@ (8040a20 <LoopFillZerobss+0x22>)
  movs r3, #0
 80409f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80409f8:	e001      	b.n	80409fe <LoopFillZerobss>

080409fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80409fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80409fc:	3204      	adds	r2, #4

080409fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80409fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8040a00:	d3fb      	bcc.n	80409fa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8040a02:	f002 f9f7 	bl	8042df4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8040a06:	f7ff fdb5 	bl	8040574 <main>
  bx  lr    
 8040a0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8040a0c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8040a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8040a14:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8040a18:	08042eac 	.word	0x08042eac
  ldr r2, =_sbss
 8040a1c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8040a20:	200000b4 	.word	0x200000b4

08040a24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8040a24:	e7fe      	b.n	8040a24 <ADC_IRQHandler>

08040a26 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8040a26:	b580      	push	{r7, lr}
 8040a28:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8040a2a:	2003      	movs	r0, #3
 8040a2c:	f000 f90a 	bl	8040c44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8040a30:	2000      	movs	r0, #0
 8040a32:	f000 f805 	bl	8040a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8040a36:	f7ff ff07 	bl	8040848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8040a3a:	2300      	movs	r3, #0
}
 8040a3c:	4618      	mov	r0, r3
 8040a3e:	bd80      	pop	{r7, pc}

08040a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040a40:	b580      	push	{r7, lr}
 8040a42:	b082      	sub	sp, #8
 8040a44:	af00      	add	r7, sp, #0
 8040a46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8040a48:	4b12      	ldr	r3, [pc, #72]	@ (8040a94 <HAL_InitTick+0x54>)
 8040a4a:	681a      	ldr	r2, [r3, #0]
 8040a4c:	4b12      	ldr	r3, [pc, #72]	@ (8040a98 <HAL_InitTick+0x58>)
 8040a4e:	781b      	ldrb	r3, [r3, #0]
 8040a50:	4619      	mov	r1, r3
 8040a52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8040a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8040a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8040a5e:	4618      	mov	r0, r3
 8040a60:	f000 f917 	bl	8040c92 <HAL_SYSTICK_Config>
 8040a64:	4603      	mov	r3, r0
 8040a66:	2b00      	cmp	r3, #0
 8040a68:	d001      	beq.n	8040a6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8040a6a:	2301      	movs	r3, #1
 8040a6c:	e00e      	b.n	8040a8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8040a6e:	687b      	ldr	r3, [r7, #4]
 8040a70:	2b0f      	cmp	r3, #15
 8040a72:	d80a      	bhi.n	8040a8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8040a74:	2200      	movs	r2, #0
 8040a76:	6879      	ldr	r1, [r7, #4]
 8040a78:	f04f 30ff 	mov.w	r0, #4294967295
 8040a7c:	f000 f8ed 	bl	8040c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8040a80:	4a06      	ldr	r2, [pc, #24]	@ (8040a9c <HAL_InitTick+0x5c>)
 8040a82:	687b      	ldr	r3, [r7, #4]
 8040a84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8040a86:	2300      	movs	r3, #0
 8040a88:	e000      	b.n	8040a8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8040a8a:	2301      	movs	r3, #1
}
 8040a8c:	4618      	mov	r0, r3
 8040a8e:	3708      	adds	r7, #8
 8040a90:	46bd      	mov	sp, r7
 8040a92:	bd80      	pop	{r7, pc}
 8040a94:	20000000 	.word	0x20000000
 8040a98:	20000008 	.word	0x20000008
 8040a9c:	20000004 	.word	0x20000004

08040aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040aa0:	b480      	push	{r7}
 8040aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8040aa4:	4b06      	ldr	r3, [pc, #24]	@ (8040ac0 <HAL_IncTick+0x20>)
 8040aa6:	781b      	ldrb	r3, [r3, #0]
 8040aa8:	461a      	mov	r2, r3
 8040aaa:	4b06      	ldr	r3, [pc, #24]	@ (8040ac4 <HAL_IncTick+0x24>)
 8040aac:	681b      	ldr	r3, [r3, #0]
 8040aae:	4413      	add	r3, r2
 8040ab0:	4a04      	ldr	r2, [pc, #16]	@ (8040ac4 <HAL_IncTick+0x24>)
 8040ab2:	6013      	str	r3, [r2, #0]
}
 8040ab4:	bf00      	nop
 8040ab6:	46bd      	mov	sp, r7
 8040ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040abc:	4770      	bx	lr
 8040abe:	bf00      	nop
 8040ac0:	20000008 	.word	0x20000008
 8040ac4:	200000b0 	.word	0x200000b0

08040ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040ac8:	b480      	push	{r7}
 8040aca:	af00      	add	r7, sp, #0
  return uwTick;
 8040acc:	4b03      	ldr	r3, [pc, #12]	@ (8040adc <HAL_GetTick+0x14>)
 8040ace:	681b      	ldr	r3, [r3, #0]
}
 8040ad0:	4618      	mov	r0, r3
 8040ad2:	46bd      	mov	sp, r7
 8040ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ad8:	4770      	bx	lr
 8040ada:	bf00      	nop
 8040adc:	200000b0 	.word	0x200000b0

08040ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040ae0:	b480      	push	{r7}
 8040ae2:	b085      	sub	sp, #20
 8040ae4:	af00      	add	r7, sp, #0
 8040ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8040ae8:	687b      	ldr	r3, [r7, #4]
 8040aea:	f003 0307 	and.w	r3, r3, #7
 8040aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040af0:	4b0b      	ldr	r3, [pc, #44]	@ (8040b20 <__NVIC_SetPriorityGrouping+0x40>)
 8040af2:	68db      	ldr	r3, [r3, #12]
 8040af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040af6:	68ba      	ldr	r2, [r7, #8]
 8040af8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8040afc:	4013      	ands	r3, r2
 8040afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8040b00:	68fb      	ldr	r3, [r7, #12]
 8040b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040b04:	68bb      	ldr	r3, [r7, #8]
 8040b06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8040b08:	4b06      	ldr	r3, [pc, #24]	@ (8040b24 <__NVIC_SetPriorityGrouping+0x44>)
 8040b0a:	4313      	orrs	r3, r2
 8040b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8040b0e:	4a04      	ldr	r2, [pc, #16]	@ (8040b20 <__NVIC_SetPriorityGrouping+0x40>)
 8040b10:	68bb      	ldr	r3, [r7, #8]
 8040b12:	60d3      	str	r3, [r2, #12]
}
 8040b14:	bf00      	nop
 8040b16:	3714      	adds	r7, #20
 8040b18:	46bd      	mov	sp, r7
 8040b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b1e:	4770      	bx	lr
 8040b20:	e000ed00 	.word	0xe000ed00
 8040b24:	05fa0000 	.word	0x05fa0000

08040b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8040b28:	b480      	push	{r7}
 8040b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8040b2c:	4b04      	ldr	r3, [pc, #16]	@ (8040b40 <__NVIC_GetPriorityGrouping+0x18>)
 8040b2e:	68db      	ldr	r3, [r3, #12]
 8040b30:	0a1b      	lsrs	r3, r3, #8
 8040b32:	f003 0307 	and.w	r3, r3, #7
}
 8040b36:	4618      	mov	r0, r3
 8040b38:	46bd      	mov	sp, r7
 8040b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b3e:	4770      	bx	lr
 8040b40:	e000ed00 	.word	0xe000ed00

08040b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8040b44:	b480      	push	{r7}
 8040b46:	b083      	sub	sp, #12
 8040b48:	af00      	add	r7, sp, #0
 8040b4a:	4603      	mov	r3, r0
 8040b4c:	6039      	str	r1, [r7, #0]
 8040b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040b54:	2b00      	cmp	r3, #0
 8040b56:	db0a      	blt.n	8040b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040b58:	683b      	ldr	r3, [r7, #0]
 8040b5a:	b2da      	uxtb	r2, r3
 8040b5c:	490c      	ldr	r1, [pc, #48]	@ (8040b90 <__NVIC_SetPriority+0x4c>)
 8040b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040b62:	0112      	lsls	r2, r2, #4
 8040b64:	b2d2      	uxtb	r2, r2
 8040b66:	440b      	add	r3, r1
 8040b68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8040b6c:	e00a      	b.n	8040b84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040b6e:	683b      	ldr	r3, [r7, #0]
 8040b70:	b2da      	uxtb	r2, r3
 8040b72:	4908      	ldr	r1, [pc, #32]	@ (8040b94 <__NVIC_SetPriority+0x50>)
 8040b74:	79fb      	ldrb	r3, [r7, #7]
 8040b76:	f003 030f 	and.w	r3, r3, #15
 8040b7a:	3b04      	subs	r3, #4
 8040b7c:	0112      	lsls	r2, r2, #4
 8040b7e:	b2d2      	uxtb	r2, r2
 8040b80:	440b      	add	r3, r1
 8040b82:	761a      	strb	r2, [r3, #24]
}
 8040b84:	bf00      	nop
 8040b86:	370c      	adds	r7, #12
 8040b88:	46bd      	mov	sp, r7
 8040b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b8e:	4770      	bx	lr
 8040b90:	e000e100 	.word	0xe000e100
 8040b94:	e000ed00 	.word	0xe000ed00

08040b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040b98:	b480      	push	{r7}
 8040b9a:	b089      	sub	sp, #36	@ 0x24
 8040b9c:	af00      	add	r7, sp, #0
 8040b9e:	60f8      	str	r0, [r7, #12]
 8040ba0:	60b9      	str	r1, [r7, #8]
 8040ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8040ba4:	68fb      	ldr	r3, [r7, #12]
 8040ba6:	f003 0307 	and.w	r3, r3, #7
 8040baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8040bac:	69fb      	ldr	r3, [r7, #28]
 8040bae:	f1c3 0307 	rsb	r3, r3, #7
 8040bb2:	2b04      	cmp	r3, #4
 8040bb4:	bf28      	it	cs
 8040bb6:	2304      	movcs	r3, #4
 8040bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8040bba:	69fb      	ldr	r3, [r7, #28]
 8040bbc:	3304      	adds	r3, #4
 8040bbe:	2b06      	cmp	r3, #6
 8040bc0:	d902      	bls.n	8040bc8 <NVIC_EncodePriority+0x30>
 8040bc2:	69fb      	ldr	r3, [r7, #28]
 8040bc4:	3b03      	subs	r3, #3
 8040bc6:	e000      	b.n	8040bca <NVIC_EncodePriority+0x32>
 8040bc8:	2300      	movs	r3, #0
 8040bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8040bd0:	69bb      	ldr	r3, [r7, #24]
 8040bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8040bd6:	43da      	mvns	r2, r3
 8040bd8:	68bb      	ldr	r3, [r7, #8]
 8040bda:	401a      	ands	r2, r3
 8040bdc:	697b      	ldr	r3, [r7, #20]
 8040bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8040be0:	f04f 31ff 	mov.w	r1, #4294967295
 8040be4:	697b      	ldr	r3, [r7, #20]
 8040be6:	fa01 f303 	lsl.w	r3, r1, r3
 8040bea:	43d9      	mvns	r1, r3
 8040bec:	687b      	ldr	r3, [r7, #4]
 8040bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040bf0:	4313      	orrs	r3, r2
         );
}
 8040bf2:	4618      	mov	r0, r3
 8040bf4:	3724      	adds	r7, #36	@ 0x24
 8040bf6:	46bd      	mov	sp, r7
 8040bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040bfc:	4770      	bx	lr
	...

08040c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8040c00:	b580      	push	{r7, lr}
 8040c02:	b082      	sub	sp, #8
 8040c04:	af00      	add	r7, sp, #0
 8040c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8040c08:	687b      	ldr	r3, [r7, #4]
 8040c0a:	3b01      	subs	r3, #1
 8040c0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8040c10:	d301      	bcc.n	8040c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8040c12:	2301      	movs	r3, #1
 8040c14:	e00f      	b.n	8040c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8040c16:	4a0a      	ldr	r2, [pc, #40]	@ (8040c40 <SysTick_Config+0x40>)
 8040c18:	687b      	ldr	r3, [r7, #4]
 8040c1a:	3b01      	subs	r3, #1
 8040c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8040c1e:	210f      	movs	r1, #15
 8040c20:	f04f 30ff 	mov.w	r0, #4294967295
 8040c24:	f7ff ff8e 	bl	8040b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8040c28:	4b05      	ldr	r3, [pc, #20]	@ (8040c40 <SysTick_Config+0x40>)
 8040c2a:	2200      	movs	r2, #0
 8040c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8040c2e:	4b04      	ldr	r3, [pc, #16]	@ (8040c40 <SysTick_Config+0x40>)
 8040c30:	2207      	movs	r2, #7
 8040c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8040c34:	2300      	movs	r3, #0
}
 8040c36:	4618      	mov	r0, r3
 8040c38:	3708      	adds	r7, #8
 8040c3a:	46bd      	mov	sp, r7
 8040c3c:	bd80      	pop	{r7, pc}
 8040c3e:	bf00      	nop
 8040c40:	e000e010 	.word	0xe000e010

08040c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040c44:	b580      	push	{r7, lr}
 8040c46:	b082      	sub	sp, #8
 8040c48:	af00      	add	r7, sp, #0
 8040c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8040c4c:	6878      	ldr	r0, [r7, #4]
 8040c4e:	f7ff ff47 	bl	8040ae0 <__NVIC_SetPriorityGrouping>
}
 8040c52:	bf00      	nop
 8040c54:	3708      	adds	r7, #8
 8040c56:	46bd      	mov	sp, r7
 8040c58:	bd80      	pop	{r7, pc}

08040c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8040c5a:	b580      	push	{r7, lr}
 8040c5c:	b086      	sub	sp, #24
 8040c5e:	af00      	add	r7, sp, #0
 8040c60:	4603      	mov	r3, r0
 8040c62:	60b9      	str	r1, [r7, #8]
 8040c64:	607a      	str	r2, [r7, #4]
 8040c66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8040c68:	2300      	movs	r3, #0
 8040c6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8040c6c:	f7ff ff5c 	bl	8040b28 <__NVIC_GetPriorityGrouping>
 8040c70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8040c72:	687a      	ldr	r2, [r7, #4]
 8040c74:	68b9      	ldr	r1, [r7, #8]
 8040c76:	6978      	ldr	r0, [r7, #20]
 8040c78:	f7ff ff8e 	bl	8040b98 <NVIC_EncodePriority>
 8040c7c:	4602      	mov	r2, r0
 8040c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8040c82:	4611      	mov	r1, r2
 8040c84:	4618      	mov	r0, r3
 8040c86:	f7ff ff5d 	bl	8040b44 <__NVIC_SetPriority>
}
 8040c8a:	bf00      	nop
 8040c8c:	3718      	adds	r7, #24
 8040c8e:	46bd      	mov	sp, r7
 8040c90:	bd80      	pop	{r7, pc}

08040c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8040c92:	b580      	push	{r7, lr}
 8040c94:	b082      	sub	sp, #8
 8040c96:	af00      	add	r7, sp, #0
 8040c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8040c9a:	6878      	ldr	r0, [r7, #4]
 8040c9c:	f7ff ffb0 	bl	8040c00 <SysTick_Config>
 8040ca0:	4603      	mov	r3, r0
}
 8040ca2:	4618      	mov	r0, r3
 8040ca4:	3708      	adds	r7, #8
 8040ca6:	46bd      	mov	sp, r7
 8040ca8:	bd80      	pop	{r7, pc}
	...

08040cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8040cac:	b480      	push	{r7}
 8040cae:	b089      	sub	sp, #36	@ 0x24
 8040cb0:	af00      	add	r7, sp, #0
 8040cb2:	6078      	str	r0, [r7, #4]
 8040cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8040cb6:	2300      	movs	r3, #0
 8040cb8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8040cba:	2300      	movs	r3, #0
 8040cbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8040cbe:	2300      	movs	r3, #0
 8040cc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8040cc2:	2300      	movs	r3, #0
 8040cc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8040cc6:	2300      	movs	r3, #0
 8040cc8:	61fb      	str	r3, [r7, #28]
 8040cca:	e175      	b.n	8040fb8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8040ccc:	2201      	movs	r2, #1
 8040cce:	69fb      	ldr	r3, [r7, #28]
 8040cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8040cd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8040cd6:	683b      	ldr	r3, [r7, #0]
 8040cd8:	681b      	ldr	r3, [r3, #0]
 8040cda:	697a      	ldr	r2, [r7, #20]
 8040cdc:	4013      	ands	r3, r2
 8040cde:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8040ce0:	693a      	ldr	r2, [r7, #16]
 8040ce2:	697b      	ldr	r3, [r7, #20]
 8040ce4:	429a      	cmp	r2, r3
 8040ce6:	f040 8164 	bne.w	8040fb2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8040cea:	683b      	ldr	r3, [r7, #0]
 8040cec:	685b      	ldr	r3, [r3, #4]
 8040cee:	f003 0303 	and.w	r3, r3, #3
 8040cf2:	2b01      	cmp	r3, #1
 8040cf4:	d005      	beq.n	8040d02 <HAL_GPIO_Init+0x56>
 8040cf6:	683b      	ldr	r3, [r7, #0]
 8040cf8:	685b      	ldr	r3, [r3, #4]
 8040cfa:	f003 0303 	and.w	r3, r3, #3
 8040cfe:	2b02      	cmp	r3, #2
 8040d00:	d130      	bne.n	8040d64 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8040d02:	687b      	ldr	r3, [r7, #4]
 8040d04:	689b      	ldr	r3, [r3, #8]
 8040d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8040d08:	69fb      	ldr	r3, [r7, #28]
 8040d0a:	005b      	lsls	r3, r3, #1
 8040d0c:	2203      	movs	r2, #3
 8040d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8040d12:	43db      	mvns	r3, r3
 8040d14:	69ba      	ldr	r2, [r7, #24]
 8040d16:	4013      	ands	r3, r2
 8040d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8040d1a:	683b      	ldr	r3, [r7, #0]
 8040d1c:	68da      	ldr	r2, [r3, #12]
 8040d1e:	69fb      	ldr	r3, [r7, #28]
 8040d20:	005b      	lsls	r3, r3, #1
 8040d22:	fa02 f303 	lsl.w	r3, r2, r3
 8040d26:	69ba      	ldr	r2, [r7, #24]
 8040d28:	4313      	orrs	r3, r2
 8040d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8040d2c:	687b      	ldr	r3, [r7, #4]
 8040d2e:	69ba      	ldr	r2, [r7, #24]
 8040d30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8040d32:	687b      	ldr	r3, [r7, #4]
 8040d34:	685b      	ldr	r3, [r3, #4]
 8040d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8040d38:	2201      	movs	r2, #1
 8040d3a:	69fb      	ldr	r3, [r7, #28]
 8040d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8040d40:	43db      	mvns	r3, r3
 8040d42:	69ba      	ldr	r2, [r7, #24]
 8040d44:	4013      	ands	r3, r2
 8040d46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8040d48:	683b      	ldr	r3, [r7, #0]
 8040d4a:	685b      	ldr	r3, [r3, #4]
 8040d4c:	091b      	lsrs	r3, r3, #4
 8040d4e:	f003 0201 	and.w	r2, r3, #1
 8040d52:	69fb      	ldr	r3, [r7, #28]
 8040d54:	fa02 f303 	lsl.w	r3, r2, r3
 8040d58:	69ba      	ldr	r2, [r7, #24]
 8040d5a:	4313      	orrs	r3, r2
 8040d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8040d5e:	687b      	ldr	r3, [r7, #4]
 8040d60:	69ba      	ldr	r2, [r7, #24]
 8040d62:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8040d64:	683b      	ldr	r3, [r7, #0]
 8040d66:	685b      	ldr	r3, [r3, #4]
 8040d68:	f003 0303 	and.w	r3, r3, #3
 8040d6c:	2b03      	cmp	r3, #3
 8040d6e:	d017      	beq.n	8040da0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8040d70:	687b      	ldr	r3, [r7, #4]
 8040d72:	68db      	ldr	r3, [r3, #12]
 8040d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8040d76:	69fb      	ldr	r3, [r7, #28]
 8040d78:	005b      	lsls	r3, r3, #1
 8040d7a:	2203      	movs	r2, #3
 8040d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8040d80:	43db      	mvns	r3, r3
 8040d82:	69ba      	ldr	r2, [r7, #24]
 8040d84:	4013      	ands	r3, r2
 8040d86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8040d88:	683b      	ldr	r3, [r7, #0]
 8040d8a:	689a      	ldr	r2, [r3, #8]
 8040d8c:	69fb      	ldr	r3, [r7, #28]
 8040d8e:	005b      	lsls	r3, r3, #1
 8040d90:	fa02 f303 	lsl.w	r3, r2, r3
 8040d94:	69ba      	ldr	r2, [r7, #24]
 8040d96:	4313      	orrs	r3, r2
 8040d98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8040d9a:	687b      	ldr	r3, [r7, #4]
 8040d9c:	69ba      	ldr	r2, [r7, #24]
 8040d9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8040da0:	683b      	ldr	r3, [r7, #0]
 8040da2:	685b      	ldr	r3, [r3, #4]
 8040da4:	f003 0303 	and.w	r3, r3, #3
 8040da8:	2b02      	cmp	r3, #2
 8040daa:	d123      	bne.n	8040df4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8040dac:	69fb      	ldr	r3, [r7, #28]
 8040dae:	08da      	lsrs	r2, r3, #3
 8040db0:	687b      	ldr	r3, [r7, #4]
 8040db2:	3208      	adds	r2, #8
 8040db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8040db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8040dba:	69fb      	ldr	r3, [r7, #28]
 8040dbc:	f003 0307 	and.w	r3, r3, #7
 8040dc0:	009b      	lsls	r3, r3, #2
 8040dc2:	220f      	movs	r2, #15
 8040dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8040dc8:	43db      	mvns	r3, r3
 8040dca:	69ba      	ldr	r2, [r7, #24]
 8040dcc:	4013      	ands	r3, r2
 8040dce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8040dd0:	683b      	ldr	r3, [r7, #0]
 8040dd2:	691a      	ldr	r2, [r3, #16]
 8040dd4:	69fb      	ldr	r3, [r7, #28]
 8040dd6:	f003 0307 	and.w	r3, r3, #7
 8040dda:	009b      	lsls	r3, r3, #2
 8040ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8040de0:	69ba      	ldr	r2, [r7, #24]
 8040de2:	4313      	orrs	r3, r2
 8040de4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8040de6:	69fb      	ldr	r3, [r7, #28]
 8040de8:	08da      	lsrs	r2, r3, #3
 8040dea:	687b      	ldr	r3, [r7, #4]
 8040dec:	3208      	adds	r2, #8
 8040dee:	69b9      	ldr	r1, [r7, #24]
 8040df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8040df4:	687b      	ldr	r3, [r7, #4]
 8040df6:	681b      	ldr	r3, [r3, #0]
 8040df8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8040dfa:	69fb      	ldr	r3, [r7, #28]
 8040dfc:	005b      	lsls	r3, r3, #1
 8040dfe:	2203      	movs	r2, #3
 8040e00:	fa02 f303 	lsl.w	r3, r2, r3
 8040e04:	43db      	mvns	r3, r3
 8040e06:	69ba      	ldr	r2, [r7, #24]
 8040e08:	4013      	ands	r3, r2
 8040e0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8040e0c:	683b      	ldr	r3, [r7, #0]
 8040e0e:	685b      	ldr	r3, [r3, #4]
 8040e10:	f003 0203 	and.w	r2, r3, #3
 8040e14:	69fb      	ldr	r3, [r7, #28]
 8040e16:	005b      	lsls	r3, r3, #1
 8040e18:	fa02 f303 	lsl.w	r3, r2, r3
 8040e1c:	69ba      	ldr	r2, [r7, #24]
 8040e1e:	4313      	orrs	r3, r2
 8040e20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8040e22:	687b      	ldr	r3, [r7, #4]
 8040e24:	69ba      	ldr	r2, [r7, #24]
 8040e26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8040e28:	683b      	ldr	r3, [r7, #0]
 8040e2a:	685b      	ldr	r3, [r3, #4]
 8040e2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8040e30:	2b00      	cmp	r3, #0
 8040e32:	f000 80be 	beq.w	8040fb2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040e36:	4b66      	ldr	r3, [pc, #408]	@ (8040fd0 <HAL_GPIO_Init+0x324>)
 8040e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8040e3a:	4a65      	ldr	r2, [pc, #404]	@ (8040fd0 <HAL_GPIO_Init+0x324>)
 8040e3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8040e40:	6453      	str	r3, [r2, #68]	@ 0x44
 8040e42:	4b63      	ldr	r3, [pc, #396]	@ (8040fd0 <HAL_GPIO_Init+0x324>)
 8040e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8040e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8040e4a:	60fb      	str	r3, [r7, #12]
 8040e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8040e4e:	4a61      	ldr	r2, [pc, #388]	@ (8040fd4 <HAL_GPIO_Init+0x328>)
 8040e50:	69fb      	ldr	r3, [r7, #28]
 8040e52:	089b      	lsrs	r3, r3, #2
 8040e54:	3302      	adds	r3, #2
 8040e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8040e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8040e5c:	69fb      	ldr	r3, [r7, #28]
 8040e5e:	f003 0303 	and.w	r3, r3, #3
 8040e62:	009b      	lsls	r3, r3, #2
 8040e64:	220f      	movs	r2, #15
 8040e66:	fa02 f303 	lsl.w	r3, r2, r3
 8040e6a:	43db      	mvns	r3, r3
 8040e6c:	69ba      	ldr	r2, [r7, #24]
 8040e6e:	4013      	ands	r3, r2
 8040e70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8040e72:	687b      	ldr	r3, [r7, #4]
 8040e74:	4a58      	ldr	r2, [pc, #352]	@ (8040fd8 <HAL_GPIO_Init+0x32c>)
 8040e76:	4293      	cmp	r3, r2
 8040e78:	d037      	beq.n	8040eea <HAL_GPIO_Init+0x23e>
 8040e7a:	687b      	ldr	r3, [r7, #4]
 8040e7c:	4a57      	ldr	r2, [pc, #348]	@ (8040fdc <HAL_GPIO_Init+0x330>)
 8040e7e:	4293      	cmp	r3, r2
 8040e80:	d031      	beq.n	8040ee6 <HAL_GPIO_Init+0x23a>
 8040e82:	687b      	ldr	r3, [r7, #4]
 8040e84:	4a56      	ldr	r2, [pc, #344]	@ (8040fe0 <HAL_GPIO_Init+0x334>)
 8040e86:	4293      	cmp	r3, r2
 8040e88:	d02b      	beq.n	8040ee2 <HAL_GPIO_Init+0x236>
 8040e8a:	687b      	ldr	r3, [r7, #4]
 8040e8c:	4a55      	ldr	r2, [pc, #340]	@ (8040fe4 <HAL_GPIO_Init+0x338>)
 8040e8e:	4293      	cmp	r3, r2
 8040e90:	d025      	beq.n	8040ede <HAL_GPIO_Init+0x232>
 8040e92:	687b      	ldr	r3, [r7, #4]
 8040e94:	4a54      	ldr	r2, [pc, #336]	@ (8040fe8 <HAL_GPIO_Init+0x33c>)
 8040e96:	4293      	cmp	r3, r2
 8040e98:	d01f      	beq.n	8040eda <HAL_GPIO_Init+0x22e>
 8040e9a:	687b      	ldr	r3, [r7, #4]
 8040e9c:	4a53      	ldr	r2, [pc, #332]	@ (8040fec <HAL_GPIO_Init+0x340>)
 8040e9e:	4293      	cmp	r3, r2
 8040ea0:	d019      	beq.n	8040ed6 <HAL_GPIO_Init+0x22a>
 8040ea2:	687b      	ldr	r3, [r7, #4]
 8040ea4:	4a52      	ldr	r2, [pc, #328]	@ (8040ff0 <HAL_GPIO_Init+0x344>)
 8040ea6:	4293      	cmp	r3, r2
 8040ea8:	d013      	beq.n	8040ed2 <HAL_GPIO_Init+0x226>
 8040eaa:	687b      	ldr	r3, [r7, #4]
 8040eac:	4a51      	ldr	r2, [pc, #324]	@ (8040ff4 <HAL_GPIO_Init+0x348>)
 8040eae:	4293      	cmp	r3, r2
 8040eb0:	d00d      	beq.n	8040ece <HAL_GPIO_Init+0x222>
 8040eb2:	687b      	ldr	r3, [r7, #4]
 8040eb4:	4a50      	ldr	r2, [pc, #320]	@ (8040ff8 <HAL_GPIO_Init+0x34c>)
 8040eb6:	4293      	cmp	r3, r2
 8040eb8:	d007      	beq.n	8040eca <HAL_GPIO_Init+0x21e>
 8040eba:	687b      	ldr	r3, [r7, #4]
 8040ebc:	4a4f      	ldr	r2, [pc, #316]	@ (8040ffc <HAL_GPIO_Init+0x350>)
 8040ebe:	4293      	cmp	r3, r2
 8040ec0:	d101      	bne.n	8040ec6 <HAL_GPIO_Init+0x21a>
 8040ec2:	2309      	movs	r3, #9
 8040ec4:	e012      	b.n	8040eec <HAL_GPIO_Init+0x240>
 8040ec6:	230a      	movs	r3, #10
 8040ec8:	e010      	b.n	8040eec <HAL_GPIO_Init+0x240>
 8040eca:	2308      	movs	r3, #8
 8040ecc:	e00e      	b.n	8040eec <HAL_GPIO_Init+0x240>
 8040ece:	2307      	movs	r3, #7
 8040ed0:	e00c      	b.n	8040eec <HAL_GPIO_Init+0x240>
 8040ed2:	2306      	movs	r3, #6
 8040ed4:	e00a      	b.n	8040eec <HAL_GPIO_Init+0x240>
 8040ed6:	2305      	movs	r3, #5
 8040ed8:	e008      	b.n	8040eec <HAL_GPIO_Init+0x240>
 8040eda:	2304      	movs	r3, #4
 8040edc:	e006      	b.n	8040eec <HAL_GPIO_Init+0x240>
 8040ede:	2303      	movs	r3, #3
 8040ee0:	e004      	b.n	8040eec <HAL_GPIO_Init+0x240>
 8040ee2:	2302      	movs	r3, #2
 8040ee4:	e002      	b.n	8040eec <HAL_GPIO_Init+0x240>
 8040ee6:	2301      	movs	r3, #1
 8040ee8:	e000      	b.n	8040eec <HAL_GPIO_Init+0x240>
 8040eea:	2300      	movs	r3, #0
 8040eec:	69fa      	ldr	r2, [r7, #28]
 8040eee:	f002 0203 	and.w	r2, r2, #3
 8040ef2:	0092      	lsls	r2, r2, #2
 8040ef4:	4093      	lsls	r3, r2
 8040ef6:	69ba      	ldr	r2, [r7, #24]
 8040ef8:	4313      	orrs	r3, r2
 8040efa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8040efc:	4935      	ldr	r1, [pc, #212]	@ (8040fd4 <HAL_GPIO_Init+0x328>)
 8040efe:	69fb      	ldr	r3, [r7, #28]
 8040f00:	089b      	lsrs	r3, r3, #2
 8040f02:	3302      	adds	r3, #2
 8040f04:	69ba      	ldr	r2, [r7, #24]
 8040f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8040f0a:	4b3d      	ldr	r3, [pc, #244]	@ (8041000 <HAL_GPIO_Init+0x354>)
 8040f0c:	689b      	ldr	r3, [r3, #8]
 8040f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8040f10:	693b      	ldr	r3, [r7, #16]
 8040f12:	43db      	mvns	r3, r3
 8040f14:	69ba      	ldr	r2, [r7, #24]
 8040f16:	4013      	ands	r3, r2
 8040f18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8040f1a:	683b      	ldr	r3, [r7, #0]
 8040f1c:	685b      	ldr	r3, [r3, #4]
 8040f1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8040f22:	2b00      	cmp	r3, #0
 8040f24:	d003      	beq.n	8040f2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8040f26:	69ba      	ldr	r2, [r7, #24]
 8040f28:	693b      	ldr	r3, [r7, #16]
 8040f2a:	4313      	orrs	r3, r2
 8040f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8040f2e:	4a34      	ldr	r2, [pc, #208]	@ (8041000 <HAL_GPIO_Init+0x354>)
 8040f30:	69bb      	ldr	r3, [r7, #24]
 8040f32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8040f34:	4b32      	ldr	r3, [pc, #200]	@ (8041000 <HAL_GPIO_Init+0x354>)
 8040f36:	68db      	ldr	r3, [r3, #12]
 8040f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8040f3a:	693b      	ldr	r3, [r7, #16]
 8040f3c:	43db      	mvns	r3, r3
 8040f3e:	69ba      	ldr	r2, [r7, #24]
 8040f40:	4013      	ands	r3, r2
 8040f42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8040f44:	683b      	ldr	r3, [r7, #0]
 8040f46:	685b      	ldr	r3, [r3, #4]
 8040f48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8040f4c:	2b00      	cmp	r3, #0
 8040f4e:	d003      	beq.n	8040f58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8040f50:	69ba      	ldr	r2, [r7, #24]
 8040f52:	693b      	ldr	r3, [r7, #16]
 8040f54:	4313      	orrs	r3, r2
 8040f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8040f58:	4a29      	ldr	r2, [pc, #164]	@ (8041000 <HAL_GPIO_Init+0x354>)
 8040f5a:	69bb      	ldr	r3, [r7, #24]
 8040f5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8040f5e:	4b28      	ldr	r3, [pc, #160]	@ (8041000 <HAL_GPIO_Init+0x354>)
 8040f60:	685b      	ldr	r3, [r3, #4]
 8040f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8040f64:	693b      	ldr	r3, [r7, #16]
 8040f66:	43db      	mvns	r3, r3
 8040f68:	69ba      	ldr	r2, [r7, #24]
 8040f6a:	4013      	ands	r3, r2
 8040f6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8040f6e:	683b      	ldr	r3, [r7, #0]
 8040f70:	685b      	ldr	r3, [r3, #4]
 8040f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8040f76:	2b00      	cmp	r3, #0
 8040f78:	d003      	beq.n	8040f82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8040f7a:	69ba      	ldr	r2, [r7, #24]
 8040f7c:	693b      	ldr	r3, [r7, #16]
 8040f7e:	4313      	orrs	r3, r2
 8040f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8040f82:	4a1f      	ldr	r2, [pc, #124]	@ (8041000 <HAL_GPIO_Init+0x354>)
 8040f84:	69bb      	ldr	r3, [r7, #24]
 8040f86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8040f88:	4b1d      	ldr	r3, [pc, #116]	@ (8041000 <HAL_GPIO_Init+0x354>)
 8040f8a:	681b      	ldr	r3, [r3, #0]
 8040f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8040f8e:	693b      	ldr	r3, [r7, #16]
 8040f90:	43db      	mvns	r3, r3
 8040f92:	69ba      	ldr	r2, [r7, #24]
 8040f94:	4013      	ands	r3, r2
 8040f96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8040f98:	683b      	ldr	r3, [r7, #0]
 8040f9a:	685b      	ldr	r3, [r3, #4]
 8040f9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8040fa0:	2b00      	cmp	r3, #0
 8040fa2:	d003      	beq.n	8040fac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8040fa4:	69ba      	ldr	r2, [r7, #24]
 8040fa6:	693b      	ldr	r3, [r7, #16]
 8040fa8:	4313      	orrs	r3, r2
 8040faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8040fac:	4a14      	ldr	r2, [pc, #80]	@ (8041000 <HAL_GPIO_Init+0x354>)
 8040fae:	69bb      	ldr	r3, [r7, #24]
 8040fb0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8040fb2:	69fb      	ldr	r3, [r7, #28]
 8040fb4:	3301      	adds	r3, #1
 8040fb6:	61fb      	str	r3, [r7, #28]
 8040fb8:	69fb      	ldr	r3, [r7, #28]
 8040fba:	2b0f      	cmp	r3, #15
 8040fbc:	f67f ae86 	bls.w	8040ccc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8040fc0:	bf00      	nop
 8040fc2:	bf00      	nop
 8040fc4:	3724      	adds	r7, #36	@ 0x24
 8040fc6:	46bd      	mov	sp, r7
 8040fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040fcc:	4770      	bx	lr
 8040fce:	bf00      	nop
 8040fd0:	40023800 	.word	0x40023800
 8040fd4:	40013800 	.word	0x40013800
 8040fd8:	40020000 	.word	0x40020000
 8040fdc:	40020400 	.word	0x40020400
 8040fe0:	40020800 	.word	0x40020800
 8040fe4:	40020c00 	.word	0x40020c00
 8040fe8:	40021000 	.word	0x40021000
 8040fec:	40021400 	.word	0x40021400
 8040ff0:	40021800 	.word	0x40021800
 8040ff4:	40021c00 	.word	0x40021c00
 8040ff8:	40022000 	.word	0x40022000
 8040ffc:	40022400 	.word	0x40022400
 8041000:	40013c00 	.word	0x40013c00

08041004 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8041004:	b480      	push	{r7}
 8041006:	b085      	sub	sp, #20
 8041008:	af00      	add	r7, sp, #0
 804100a:	6078      	str	r0, [r7, #4]
 804100c:	460b      	mov	r3, r1
 804100e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8041010:	687b      	ldr	r3, [r7, #4]
 8041012:	691a      	ldr	r2, [r3, #16]
 8041014:	887b      	ldrh	r3, [r7, #2]
 8041016:	4013      	ands	r3, r2
 8041018:	2b00      	cmp	r3, #0
 804101a:	d002      	beq.n	8041022 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 804101c:	2301      	movs	r3, #1
 804101e:	73fb      	strb	r3, [r7, #15]
 8041020:	e001      	b.n	8041026 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8041022:	2300      	movs	r3, #0
 8041024:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8041026:	7bfb      	ldrb	r3, [r7, #15]
}
 8041028:	4618      	mov	r0, r3
 804102a:	3714      	adds	r7, #20
 804102c:	46bd      	mov	sp, r7
 804102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041032:	4770      	bx	lr

08041034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8041034:	b480      	push	{r7}
 8041036:	b083      	sub	sp, #12
 8041038:	af00      	add	r7, sp, #0
 804103a:	6078      	str	r0, [r7, #4]
 804103c:	460b      	mov	r3, r1
 804103e:	807b      	strh	r3, [r7, #2]
 8041040:	4613      	mov	r3, r2
 8041042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8041044:	787b      	ldrb	r3, [r7, #1]
 8041046:	2b00      	cmp	r3, #0
 8041048:	d003      	beq.n	8041052 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 804104a:	887a      	ldrh	r2, [r7, #2]
 804104c:	687b      	ldr	r3, [r7, #4]
 804104e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8041050:	e003      	b.n	804105a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8041052:	887b      	ldrh	r3, [r7, #2]
 8041054:	041a      	lsls	r2, r3, #16
 8041056:	687b      	ldr	r3, [r7, #4]
 8041058:	619a      	str	r2, [r3, #24]
}
 804105a:	bf00      	nop
 804105c:	370c      	adds	r7, #12
 804105e:	46bd      	mov	sp, r7
 8041060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041064:	4770      	bx	lr

08041066 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8041066:	b480      	push	{r7}
 8041068:	b085      	sub	sp, #20
 804106a:	af00      	add	r7, sp, #0
 804106c:	6078      	str	r0, [r7, #4]
 804106e:	460b      	mov	r3, r1
 8041070:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8041072:	687b      	ldr	r3, [r7, #4]
 8041074:	695b      	ldr	r3, [r3, #20]
 8041076:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8041078:	887a      	ldrh	r2, [r7, #2]
 804107a:	68fb      	ldr	r3, [r7, #12]
 804107c:	4013      	ands	r3, r2
 804107e:	041a      	lsls	r2, r3, #16
 8041080:	68fb      	ldr	r3, [r7, #12]
 8041082:	43d9      	mvns	r1, r3
 8041084:	887b      	ldrh	r3, [r7, #2]
 8041086:	400b      	ands	r3, r1
 8041088:	431a      	orrs	r2, r3
 804108a:	687b      	ldr	r3, [r7, #4]
 804108c:	619a      	str	r2, [r3, #24]
}
 804108e:	bf00      	nop
 8041090:	3714      	adds	r7, #20
 8041092:	46bd      	mov	sp, r7
 8041094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041098:	4770      	bx	lr
	...

0804109c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 804109c:	b580      	push	{r7, lr}
 804109e:	b082      	sub	sp, #8
 80410a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80410a2:	2300      	movs	r3, #0
 80410a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80410a6:	4b23      	ldr	r3, [pc, #140]	@ (8041134 <HAL_PWREx_EnableOverDrive+0x98>)
 80410a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80410aa:	4a22      	ldr	r2, [pc, #136]	@ (8041134 <HAL_PWREx_EnableOverDrive+0x98>)
 80410ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80410b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80410b2:	4b20      	ldr	r3, [pc, #128]	@ (8041134 <HAL_PWREx_EnableOverDrive+0x98>)
 80410b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80410b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80410ba:	603b      	str	r3, [r7, #0]
 80410bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80410be:	4b1e      	ldr	r3, [pc, #120]	@ (8041138 <HAL_PWREx_EnableOverDrive+0x9c>)
 80410c0:	681b      	ldr	r3, [r3, #0]
 80410c2:	4a1d      	ldr	r2, [pc, #116]	@ (8041138 <HAL_PWREx_EnableOverDrive+0x9c>)
 80410c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80410c8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80410ca:	f7ff fcfd 	bl	8040ac8 <HAL_GetTick>
 80410ce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80410d0:	e009      	b.n	80410e6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80410d2:	f7ff fcf9 	bl	8040ac8 <HAL_GetTick>
 80410d6:	4602      	mov	r2, r0
 80410d8:	687b      	ldr	r3, [r7, #4]
 80410da:	1ad3      	subs	r3, r2, r3
 80410dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80410e0:	d901      	bls.n	80410e6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80410e2:	2303      	movs	r3, #3
 80410e4:	e022      	b.n	804112c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80410e6:	4b14      	ldr	r3, [pc, #80]	@ (8041138 <HAL_PWREx_EnableOverDrive+0x9c>)
 80410e8:	685b      	ldr	r3, [r3, #4]
 80410ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80410ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80410f2:	d1ee      	bne.n	80410d2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80410f4:	4b10      	ldr	r3, [pc, #64]	@ (8041138 <HAL_PWREx_EnableOverDrive+0x9c>)
 80410f6:	681b      	ldr	r3, [r3, #0]
 80410f8:	4a0f      	ldr	r2, [pc, #60]	@ (8041138 <HAL_PWREx_EnableOverDrive+0x9c>)
 80410fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80410fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8041100:	f7ff fce2 	bl	8040ac8 <HAL_GetTick>
 8041104:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8041106:	e009      	b.n	804111c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8041108:	f7ff fcde 	bl	8040ac8 <HAL_GetTick>
 804110c:	4602      	mov	r2, r0
 804110e:	687b      	ldr	r3, [r7, #4]
 8041110:	1ad3      	subs	r3, r2, r3
 8041112:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8041116:	d901      	bls.n	804111c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8041118:	2303      	movs	r3, #3
 804111a:	e007      	b.n	804112c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 804111c:	4b06      	ldr	r3, [pc, #24]	@ (8041138 <HAL_PWREx_EnableOverDrive+0x9c>)
 804111e:	685b      	ldr	r3, [r3, #4]
 8041120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8041124:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8041128:	d1ee      	bne.n	8041108 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 804112a:	2300      	movs	r3, #0
}
 804112c:	4618      	mov	r0, r3
 804112e:	3708      	adds	r7, #8
 8041130:	46bd      	mov	sp, r7
 8041132:	bd80      	pop	{r7, pc}
 8041134:	40023800 	.word	0x40023800
 8041138:	40007000 	.word	0x40007000

0804113c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 804113c:	b580      	push	{r7, lr}
 804113e:	b086      	sub	sp, #24
 8041140:	af00      	add	r7, sp, #0
 8041142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8041144:	2300      	movs	r3, #0
 8041146:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8041148:	687b      	ldr	r3, [r7, #4]
 804114a:	2b00      	cmp	r3, #0
 804114c:	d101      	bne.n	8041152 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 804114e:	2301      	movs	r3, #1
 8041150:	e29b      	b.n	804168a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8041152:	687b      	ldr	r3, [r7, #4]
 8041154:	681b      	ldr	r3, [r3, #0]
 8041156:	f003 0301 	and.w	r3, r3, #1
 804115a:	2b00      	cmp	r3, #0
 804115c:	f000 8087 	beq.w	804126e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8041160:	4b96      	ldr	r3, [pc, #600]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 8041162:	689b      	ldr	r3, [r3, #8]
 8041164:	f003 030c 	and.w	r3, r3, #12
 8041168:	2b04      	cmp	r3, #4
 804116a:	d00c      	beq.n	8041186 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 804116c:	4b93      	ldr	r3, [pc, #588]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 804116e:	689b      	ldr	r3, [r3, #8]
 8041170:	f003 030c 	and.w	r3, r3, #12
 8041174:	2b08      	cmp	r3, #8
 8041176:	d112      	bne.n	804119e <HAL_RCC_OscConfig+0x62>
 8041178:	4b90      	ldr	r3, [pc, #576]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 804117a:	685b      	ldr	r3, [r3, #4]
 804117c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8041180:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8041184:	d10b      	bne.n	804119e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8041186:	4b8d      	ldr	r3, [pc, #564]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 8041188:	681b      	ldr	r3, [r3, #0]
 804118a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 804118e:	2b00      	cmp	r3, #0
 8041190:	d06c      	beq.n	804126c <HAL_RCC_OscConfig+0x130>
 8041192:	687b      	ldr	r3, [r7, #4]
 8041194:	685b      	ldr	r3, [r3, #4]
 8041196:	2b00      	cmp	r3, #0
 8041198:	d168      	bne.n	804126c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 804119a:	2301      	movs	r3, #1
 804119c:	e275      	b.n	804168a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 804119e:	687b      	ldr	r3, [r7, #4]
 80411a0:	685b      	ldr	r3, [r3, #4]
 80411a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80411a6:	d106      	bne.n	80411b6 <HAL_RCC_OscConfig+0x7a>
 80411a8:	4b84      	ldr	r3, [pc, #528]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 80411aa:	681b      	ldr	r3, [r3, #0]
 80411ac:	4a83      	ldr	r2, [pc, #524]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 80411ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80411b2:	6013      	str	r3, [r2, #0]
 80411b4:	e02e      	b.n	8041214 <HAL_RCC_OscConfig+0xd8>
 80411b6:	687b      	ldr	r3, [r7, #4]
 80411b8:	685b      	ldr	r3, [r3, #4]
 80411ba:	2b00      	cmp	r3, #0
 80411bc:	d10c      	bne.n	80411d8 <HAL_RCC_OscConfig+0x9c>
 80411be:	4b7f      	ldr	r3, [pc, #508]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 80411c0:	681b      	ldr	r3, [r3, #0]
 80411c2:	4a7e      	ldr	r2, [pc, #504]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 80411c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80411c8:	6013      	str	r3, [r2, #0]
 80411ca:	4b7c      	ldr	r3, [pc, #496]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 80411cc:	681b      	ldr	r3, [r3, #0]
 80411ce:	4a7b      	ldr	r2, [pc, #492]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 80411d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80411d4:	6013      	str	r3, [r2, #0]
 80411d6:	e01d      	b.n	8041214 <HAL_RCC_OscConfig+0xd8>
 80411d8:	687b      	ldr	r3, [r7, #4]
 80411da:	685b      	ldr	r3, [r3, #4]
 80411dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80411e0:	d10c      	bne.n	80411fc <HAL_RCC_OscConfig+0xc0>
 80411e2:	4b76      	ldr	r3, [pc, #472]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 80411e4:	681b      	ldr	r3, [r3, #0]
 80411e6:	4a75      	ldr	r2, [pc, #468]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 80411e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80411ec:	6013      	str	r3, [r2, #0]
 80411ee:	4b73      	ldr	r3, [pc, #460]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 80411f0:	681b      	ldr	r3, [r3, #0]
 80411f2:	4a72      	ldr	r2, [pc, #456]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 80411f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80411f8:	6013      	str	r3, [r2, #0]
 80411fa:	e00b      	b.n	8041214 <HAL_RCC_OscConfig+0xd8>
 80411fc:	4b6f      	ldr	r3, [pc, #444]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 80411fe:	681b      	ldr	r3, [r3, #0]
 8041200:	4a6e      	ldr	r2, [pc, #440]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 8041202:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8041206:	6013      	str	r3, [r2, #0]
 8041208:	4b6c      	ldr	r3, [pc, #432]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 804120a:	681b      	ldr	r3, [r3, #0]
 804120c:	4a6b      	ldr	r2, [pc, #428]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 804120e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8041212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8041214:	687b      	ldr	r3, [r7, #4]
 8041216:	685b      	ldr	r3, [r3, #4]
 8041218:	2b00      	cmp	r3, #0
 804121a:	d013      	beq.n	8041244 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804121c:	f7ff fc54 	bl	8040ac8 <HAL_GetTick>
 8041220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8041222:	e008      	b.n	8041236 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8041224:	f7ff fc50 	bl	8040ac8 <HAL_GetTick>
 8041228:	4602      	mov	r2, r0
 804122a:	693b      	ldr	r3, [r7, #16]
 804122c:	1ad3      	subs	r3, r2, r3
 804122e:	2b64      	cmp	r3, #100	@ 0x64
 8041230:	d901      	bls.n	8041236 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8041232:	2303      	movs	r3, #3
 8041234:	e229      	b.n	804168a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8041236:	4b61      	ldr	r3, [pc, #388]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 8041238:	681b      	ldr	r3, [r3, #0]
 804123a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 804123e:	2b00      	cmp	r3, #0
 8041240:	d0f0      	beq.n	8041224 <HAL_RCC_OscConfig+0xe8>
 8041242:	e014      	b.n	804126e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041244:	f7ff fc40 	bl	8040ac8 <HAL_GetTick>
 8041248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 804124a:	e008      	b.n	804125e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 804124c:	f7ff fc3c 	bl	8040ac8 <HAL_GetTick>
 8041250:	4602      	mov	r2, r0
 8041252:	693b      	ldr	r3, [r7, #16]
 8041254:	1ad3      	subs	r3, r2, r3
 8041256:	2b64      	cmp	r3, #100	@ 0x64
 8041258:	d901      	bls.n	804125e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 804125a:	2303      	movs	r3, #3
 804125c:	e215      	b.n	804168a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 804125e:	4b57      	ldr	r3, [pc, #348]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 8041260:	681b      	ldr	r3, [r3, #0]
 8041262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8041266:	2b00      	cmp	r3, #0
 8041268:	d1f0      	bne.n	804124c <HAL_RCC_OscConfig+0x110>
 804126a:	e000      	b.n	804126e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 804126c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 804126e:	687b      	ldr	r3, [r7, #4]
 8041270:	681b      	ldr	r3, [r3, #0]
 8041272:	f003 0302 	and.w	r3, r3, #2
 8041276:	2b00      	cmp	r3, #0
 8041278:	d069      	beq.n	804134e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 804127a:	4b50      	ldr	r3, [pc, #320]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 804127c:	689b      	ldr	r3, [r3, #8]
 804127e:	f003 030c 	and.w	r3, r3, #12
 8041282:	2b00      	cmp	r3, #0
 8041284:	d00b      	beq.n	804129e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8041286:	4b4d      	ldr	r3, [pc, #308]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 8041288:	689b      	ldr	r3, [r3, #8]
 804128a:	f003 030c 	and.w	r3, r3, #12
 804128e:	2b08      	cmp	r3, #8
 8041290:	d11c      	bne.n	80412cc <HAL_RCC_OscConfig+0x190>
 8041292:	4b4a      	ldr	r3, [pc, #296]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 8041294:	685b      	ldr	r3, [r3, #4]
 8041296:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 804129a:	2b00      	cmp	r3, #0
 804129c:	d116      	bne.n	80412cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 804129e:	4b47      	ldr	r3, [pc, #284]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 80412a0:	681b      	ldr	r3, [r3, #0]
 80412a2:	f003 0302 	and.w	r3, r3, #2
 80412a6:	2b00      	cmp	r3, #0
 80412a8:	d005      	beq.n	80412b6 <HAL_RCC_OscConfig+0x17a>
 80412aa:	687b      	ldr	r3, [r7, #4]
 80412ac:	68db      	ldr	r3, [r3, #12]
 80412ae:	2b01      	cmp	r3, #1
 80412b0:	d001      	beq.n	80412b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80412b2:	2301      	movs	r3, #1
 80412b4:	e1e9      	b.n	804168a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80412b6:	4b41      	ldr	r3, [pc, #260]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 80412b8:	681b      	ldr	r3, [r3, #0]
 80412ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80412be:	687b      	ldr	r3, [r7, #4]
 80412c0:	691b      	ldr	r3, [r3, #16]
 80412c2:	00db      	lsls	r3, r3, #3
 80412c4:	493d      	ldr	r1, [pc, #244]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 80412c6:	4313      	orrs	r3, r2
 80412c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80412ca:	e040      	b.n	804134e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80412cc:	687b      	ldr	r3, [r7, #4]
 80412ce:	68db      	ldr	r3, [r3, #12]
 80412d0:	2b00      	cmp	r3, #0
 80412d2:	d023      	beq.n	804131c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80412d4:	4b39      	ldr	r3, [pc, #228]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 80412d6:	681b      	ldr	r3, [r3, #0]
 80412d8:	4a38      	ldr	r2, [pc, #224]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 80412da:	f043 0301 	orr.w	r3, r3, #1
 80412de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80412e0:	f7ff fbf2 	bl	8040ac8 <HAL_GetTick>
 80412e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80412e6:	e008      	b.n	80412fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80412e8:	f7ff fbee 	bl	8040ac8 <HAL_GetTick>
 80412ec:	4602      	mov	r2, r0
 80412ee:	693b      	ldr	r3, [r7, #16]
 80412f0:	1ad3      	subs	r3, r2, r3
 80412f2:	2b02      	cmp	r3, #2
 80412f4:	d901      	bls.n	80412fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80412f6:	2303      	movs	r3, #3
 80412f8:	e1c7      	b.n	804168a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80412fa:	4b30      	ldr	r3, [pc, #192]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 80412fc:	681b      	ldr	r3, [r3, #0]
 80412fe:	f003 0302 	and.w	r3, r3, #2
 8041302:	2b00      	cmp	r3, #0
 8041304:	d0f0      	beq.n	80412e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8041306:	4b2d      	ldr	r3, [pc, #180]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 8041308:	681b      	ldr	r3, [r3, #0]
 804130a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 804130e:	687b      	ldr	r3, [r7, #4]
 8041310:	691b      	ldr	r3, [r3, #16]
 8041312:	00db      	lsls	r3, r3, #3
 8041314:	4929      	ldr	r1, [pc, #164]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 8041316:	4313      	orrs	r3, r2
 8041318:	600b      	str	r3, [r1, #0]
 804131a:	e018      	b.n	804134e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 804131c:	4b27      	ldr	r3, [pc, #156]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 804131e:	681b      	ldr	r3, [r3, #0]
 8041320:	4a26      	ldr	r2, [pc, #152]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 8041322:	f023 0301 	bic.w	r3, r3, #1
 8041326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041328:	f7ff fbce 	bl	8040ac8 <HAL_GetTick>
 804132c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 804132e:	e008      	b.n	8041342 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8041330:	f7ff fbca 	bl	8040ac8 <HAL_GetTick>
 8041334:	4602      	mov	r2, r0
 8041336:	693b      	ldr	r3, [r7, #16]
 8041338:	1ad3      	subs	r3, r2, r3
 804133a:	2b02      	cmp	r3, #2
 804133c:	d901      	bls.n	8041342 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 804133e:	2303      	movs	r3, #3
 8041340:	e1a3      	b.n	804168a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8041342:	4b1e      	ldr	r3, [pc, #120]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 8041344:	681b      	ldr	r3, [r3, #0]
 8041346:	f003 0302 	and.w	r3, r3, #2
 804134a:	2b00      	cmp	r3, #0
 804134c:	d1f0      	bne.n	8041330 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 804134e:	687b      	ldr	r3, [r7, #4]
 8041350:	681b      	ldr	r3, [r3, #0]
 8041352:	f003 0308 	and.w	r3, r3, #8
 8041356:	2b00      	cmp	r3, #0
 8041358:	d038      	beq.n	80413cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 804135a:	687b      	ldr	r3, [r7, #4]
 804135c:	695b      	ldr	r3, [r3, #20]
 804135e:	2b00      	cmp	r3, #0
 8041360:	d019      	beq.n	8041396 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8041362:	4b16      	ldr	r3, [pc, #88]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 8041364:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8041366:	4a15      	ldr	r2, [pc, #84]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 8041368:	f043 0301 	orr.w	r3, r3, #1
 804136c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804136e:	f7ff fbab 	bl	8040ac8 <HAL_GetTick>
 8041372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8041374:	e008      	b.n	8041388 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8041376:	f7ff fba7 	bl	8040ac8 <HAL_GetTick>
 804137a:	4602      	mov	r2, r0
 804137c:	693b      	ldr	r3, [r7, #16]
 804137e:	1ad3      	subs	r3, r2, r3
 8041380:	2b02      	cmp	r3, #2
 8041382:	d901      	bls.n	8041388 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8041384:	2303      	movs	r3, #3
 8041386:	e180      	b.n	804168a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8041388:	4b0c      	ldr	r3, [pc, #48]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 804138a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 804138c:	f003 0302 	and.w	r3, r3, #2
 8041390:	2b00      	cmp	r3, #0
 8041392:	d0f0      	beq.n	8041376 <HAL_RCC_OscConfig+0x23a>
 8041394:	e01a      	b.n	80413cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8041396:	4b09      	ldr	r3, [pc, #36]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 8041398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 804139a:	4a08      	ldr	r2, [pc, #32]	@ (80413bc <HAL_RCC_OscConfig+0x280>)
 804139c:	f023 0301 	bic.w	r3, r3, #1
 80413a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80413a2:	f7ff fb91 	bl	8040ac8 <HAL_GetTick>
 80413a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80413a8:	e00a      	b.n	80413c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80413aa:	f7ff fb8d 	bl	8040ac8 <HAL_GetTick>
 80413ae:	4602      	mov	r2, r0
 80413b0:	693b      	ldr	r3, [r7, #16]
 80413b2:	1ad3      	subs	r3, r2, r3
 80413b4:	2b02      	cmp	r3, #2
 80413b6:	d903      	bls.n	80413c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80413b8:	2303      	movs	r3, #3
 80413ba:	e166      	b.n	804168a <HAL_RCC_OscConfig+0x54e>
 80413bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80413c0:	4b92      	ldr	r3, [pc, #584]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 80413c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80413c4:	f003 0302 	and.w	r3, r3, #2
 80413c8:	2b00      	cmp	r3, #0
 80413ca:	d1ee      	bne.n	80413aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80413cc:	687b      	ldr	r3, [r7, #4]
 80413ce:	681b      	ldr	r3, [r3, #0]
 80413d0:	f003 0304 	and.w	r3, r3, #4
 80413d4:	2b00      	cmp	r3, #0
 80413d6:	f000 80a4 	beq.w	8041522 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80413da:	4b8c      	ldr	r3, [pc, #560]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 80413dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80413de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80413e2:	2b00      	cmp	r3, #0
 80413e4:	d10d      	bne.n	8041402 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80413e6:	4b89      	ldr	r3, [pc, #548]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 80413e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80413ea:	4a88      	ldr	r2, [pc, #544]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 80413ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80413f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80413f2:	4b86      	ldr	r3, [pc, #536]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 80413f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80413f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80413fa:	60bb      	str	r3, [r7, #8]
 80413fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80413fe:	2301      	movs	r3, #1
 8041400:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8041402:	4b83      	ldr	r3, [pc, #524]	@ (8041610 <HAL_RCC_OscConfig+0x4d4>)
 8041404:	681b      	ldr	r3, [r3, #0]
 8041406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 804140a:	2b00      	cmp	r3, #0
 804140c:	d118      	bne.n	8041440 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 804140e:	4b80      	ldr	r3, [pc, #512]	@ (8041610 <HAL_RCC_OscConfig+0x4d4>)
 8041410:	681b      	ldr	r3, [r3, #0]
 8041412:	4a7f      	ldr	r2, [pc, #508]	@ (8041610 <HAL_RCC_OscConfig+0x4d4>)
 8041414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8041418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 804141a:	f7ff fb55 	bl	8040ac8 <HAL_GetTick>
 804141e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8041420:	e008      	b.n	8041434 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8041422:	f7ff fb51 	bl	8040ac8 <HAL_GetTick>
 8041426:	4602      	mov	r2, r0
 8041428:	693b      	ldr	r3, [r7, #16]
 804142a:	1ad3      	subs	r3, r2, r3
 804142c:	2b64      	cmp	r3, #100	@ 0x64
 804142e:	d901      	bls.n	8041434 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8041430:	2303      	movs	r3, #3
 8041432:	e12a      	b.n	804168a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8041434:	4b76      	ldr	r3, [pc, #472]	@ (8041610 <HAL_RCC_OscConfig+0x4d4>)
 8041436:	681b      	ldr	r3, [r3, #0]
 8041438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 804143c:	2b00      	cmp	r3, #0
 804143e:	d0f0      	beq.n	8041422 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8041440:	687b      	ldr	r3, [r7, #4]
 8041442:	689b      	ldr	r3, [r3, #8]
 8041444:	2b01      	cmp	r3, #1
 8041446:	d106      	bne.n	8041456 <HAL_RCC_OscConfig+0x31a>
 8041448:	4b70      	ldr	r3, [pc, #448]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 804144a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 804144c:	4a6f      	ldr	r2, [pc, #444]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 804144e:	f043 0301 	orr.w	r3, r3, #1
 8041452:	6713      	str	r3, [r2, #112]	@ 0x70
 8041454:	e02d      	b.n	80414b2 <HAL_RCC_OscConfig+0x376>
 8041456:	687b      	ldr	r3, [r7, #4]
 8041458:	689b      	ldr	r3, [r3, #8]
 804145a:	2b00      	cmp	r3, #0
 804145c:	d10c      	bne.n	8041478 <HAL_RCC_OscConfig+0x33c>
 804145e:	4b6b      	ldr	r3, [pc, #428]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 8041460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041462:	4a6a      	ldr	r2, [pc, #424]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 8041464:	f023 0301 	bic.w	r3, r3, #1
 8041468:	6713      	str	r3, [r2, #112]	@ 0x70
 804146a:	4b68      	ldr	r3, [pc, #416]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 804146c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 804146e:	4a67      	ldr	r2, [pc, #412]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 8041470:	f023 0304 	bic.w	r3, r3, #4
 8041474:	6713      	str	r3, [r2, #112]	@ 0x70
 8041476:	e01c      	b.n	80414b2 <HAL_RCC_OscConfig+0x376>
 8041478:	687b      	ldr	r3, [r7, #4]
 804147a:	689b      	ldr	r3, [r3, #8]
 804147c:	2b05      	cmp	r3, #5
 804147e:	d10c      	bne.n	804149a <HAL_RCC_OscConfig+0x35e>
 8041480:	4b62      	ldr	r3, [pc, #392]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 8041482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041484:	4a61      	ldr	r2, [pc, #388]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 8041486:	f043 0304 	orr.w	r3, r3, #4
 804148a:	6713      	str	r3, [r2, #112]	@ 0x70
 804148c:	4b5f      	ldr	r3, [pc, #380]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 804148e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041490:	4a5e      	ldr	r2, [pc, #376]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 8041492:	f043 0301 	orr.w	r3, r3, #1
 8041496:	6713      	str	r3, [r2, #112]	@ 0x70
 8041498:	e00b      	b.n	80414b2 <HAL_RCC_OscConfig+0x376>
 804149a:	4b5c      	ldr	r3, [pc, #368]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 804149c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 804149e:	4a5b      	ldr	r2, [pc, #364]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 80414a0:	f023 0301 	bic.w	r3, r3, #1
 80414a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80414a6:	4b59      	ldr	r3, [pc, #356]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 80414a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80414aa:	4a58      	ldr	r2, [pc, #352]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 80414ac:	f023 0304 	bic.w	r3, r3, #4
 80414b0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80414b2:	687b      	ldr	r3, [r7, #4]
 80414b4:	689b      	ldr	r3, [r3, #8]
 80414b6:	2b00      	cmp	r3, #0
 80414b8:	d015      	beq.n	80414e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80414ba:	f7ff fb05 	bl	8040ac8 <HAL_GetTick>
 80414be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80414c0:	e00a      	b.n	80414d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80414c2:	f7ff fb01 	bl	8040ac8 <HAL_GetTick>
 80414c6:	4602      	mov	r2, r0
 80414c8:	693b      	ldr	r3, [r7, #16]
 80414ca:	1ad3      	subs	r3, r2, r3
 80414cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80414d0:	4293      	cmp	r3, r2
 80414d2:	d901      	bls.n	80414d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80414d4:	2303      	movs	r3, #3
 80414d6:	e0d8      	b.n	804168a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80414d8:	4b4c      	ldr	r3, [pc, #304]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 80414da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80414dc:	f003 0302 	and.w	r3, r3, #2
 80414e0:	2b00      	cmp	r3, #0
 80414e2:	d0ee      	beq.n	80414c2 <HAL_RCC_OscConfig+0x386>
 80414e4:	e014      	b.n	8041510 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80414e6:	f7ff faef 	bl	8040ac8 <HAL_GetTick>
 80414ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80414ec:	e00a      	b.n	8041504 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80414ee:	f7ff faeb 	bl	8040ac8 <HAL_GetTick>
 80414f2:	4602      	mov	r2, r0
 80414f4:	693b      	ldr	r3, [r7, #16]
 80414f6:	1ad3      	subs	r3, r2, r3
 80414f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80414fc:	4293      	cmp	r3, r2
 80414fe:	d901      	bls.n	8041504 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8041500:	2303      	movs	r3, #3
 8041502:	e0c2      	b.n	804168a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8041504:	4b41      	ldr	r3, [pc, #260]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 8041506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041508:	f003 0302 	and.w	r3, r3, #2
 804150c:	2b00      	cmp	r3, #0
 804150e:	d1ee      	bne.n	80414ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8041510:	7dfb      	ldrb	r3, [r7, #23]
 8041512:	2b01      	cmp	r3, #1
 8041514:	d105      	bne.n	8041522 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8041516:	4b3d      	ldr	r3, [pc, #244]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 8041518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804151a:	4a3c      	ldr	r2, [pc, #240]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 804151c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8041520:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8041522:	687b      	ldr	r3, [r7, #4]
 8041524:	699b      	ldr	r3, [r3, #24]
 8041526:	2b00      	cmp	r3, #0
 8041528:	f000 80ae 	beq.w	8041688 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 804152c:	4b37      	ldr	r3, [pc, #220]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 804152e:	689b      	ldr	r3, [r3, #8]
 8041530:	f003 030c 	and.w	r3, r3, #12
 8041534:	2b08      	cmp	r3, #8
 8041536:	d06d      	beq.n	8041614 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8041538:	687b      	ldr	r3, [r7, #4]
 804153a:	699b      	ldr	r3, [r3, #24]
 804153c:	2b02      	cmp	r3, #2
 804153e:	d14b      	bne.n	80415d8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041540:	4b32      	ldr	r3, [pc, #200]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 8041542:	681b      	ldr	r3, [r3, #0]
 8041544:	4a31      	ldr	r2, [pc, #196]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 8041546:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 804154a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804154c:	f7ff fabc 	bl	8040ac8 <HAL_GetTick>
 8041550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8041552:	e008      	b.n	8041566 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041554:	f7ff fab8 	bl	8040ac8 <HAL_GetTick>
 8041558:	4602      	mov	r2, r0
 804155a:	693b      	ldr	r3, [r7, #16]
 804155c:	1ad3      	subs	r3, r2, r3
 804155e:	2b02      	cmp	r3, #2
 8041560:	d901      	bls.n	8041566 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8041562:	2303      	movs	r3, #3
 8041564:	e091      	b.n	804168a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8041566:	4b29      	ldr	r3, [pc, #164]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 8041568:	681b      	ldr	r3, [r3, #0]
 804156a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 804156e:	2b00      	cmp	r3, #0
 8041570:	d1f0      	bne.n	8041554 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8041572:	687b      	ldr	r3, [r7, #4]
 8041574:	69da      	ldr	r2, [r3, #28]
 8041576:	687b      	ldr	r3, [r7, #4]
 8041578:	6a1b      	ldr	r3, [r3, #32]
 804157a:	431a      	orrs	r2, r3
 804157c:	687b      	ldr	r3, [r7, #4]
 804157e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8041580:	019b      	lsls	r3, r3, #6
 8041582:	431a      	orrs	r2, r3
 8041584:	687b      	ldr	r3, [r7, #4]
 8041586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8041588:	085b      	lsrs	r3, r3, #1
 804158a:	3b01      	subs	r3, #1
 804158c:	041b      	lsls	r3, r3, #16
 804158e:	431a      	orrs	r2, r3
 8041590:	687b      	ldr	r3, [r7, #4]
 8041592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8041594:	061b      	lsls	r3, r3, #24
 8041596:	431a      	orrs	r2, r3
 8041598:	687b      	ldr	r3, [r7, #4]
 804159a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804159c:	071b      	lsls	r3, r3, #28
 804159e:	491b      	ldr	r1, [pc, #108]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 80415a0:	4313      	orrs	r3, r2
 80415a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80415a4:	4b19      	ldr	r3, [pc, #100]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 80415a6:	681b      	ldr	r3, [r3, #0]
 80415a8:	4a18      	ldr	r2, [pc, #96]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 80415aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80415ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80415b0:	f7ff fa8a 	bl	8040ac8 <HAL_GetTick>
 80415b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80415b6:	e008      	b.n	80415ca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80415b8:	f7ff fa86 	bl	8040ac8 <HAL_GetTick>
 80415bc:	4602      	mov	r2, r0
 80415be:	693b      	ldr	r3, [r7, #16]
 80415c0:	1ad3      	subs	r3, r2, r3
 80415c2:	2b02      	cmp	r3, #2
 80415c4:	d901      	bls.n	80415ca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80415c6:	2303      	movs	r3, #3
 80415c8:	e05f      	b.n	804168a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80415ca:	4b10      	ldr	r3, [pc, #64]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 80415cc:	681b      	ldr	r3, [r3, #0]
 80415ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80415d2:	2b00      	cmp	r3, #0
 80415d4:	d0f0      	beq.n	80415b8 <HAL_RCC_OscConfig+0x47c>
 80415d6:	e057      	b.n	8041688 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80415d8:	4b0c      	ldr	r3, [pc, #48]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 80415da:	681b      	ldr	r3, [r3, #0]
 80415dc:	4a0b      	ldr	r2, [pc, #44]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 80415de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80415e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80415e4:	f7ff fa70 	bl	8040ac8 <HAL_GetTick>
 80415e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80415ea:	e008      	b.n	80415fe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80415ec:	f7ff fa6c 	bl	8040ac8 <HAL_GetTick>
 80415f0:	4602      	mov	r2, r0
 80415f2:	693b      	ldr	r3, [r7, #16]
 80415f4:	1ad3      	subs	r3, r2, r3
 80415f6:	2b02      	cmp	r3, #2
 80415f8:	d901      	bls.n	80415fe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80415fa:	2303      	movs	r3, #3
 80415fc:	e045      	b.n	804168a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80415fe:	4b03      	ldr	r3, [pc, #12]	@ (804160c <HAL_RCC_OscConfig+0x4d0>)
 8041600:	681b      	ldr	r3, [r3, #0]
 8041602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8041606:	2b00      	cmp	r3, #0
 8041608:	d1f0      	bne.n	80415ec <HAL_RCC_OscConfig+0x4b0>
 804160a:	e03d      	b.n	8041688 <HAL_RCC_OscConfig+0x54c>
 804160c:	40023800 	.word	0x40023800
 8041610:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8041614:	4b1f      	ldr	r3, [pc, #124]	@ (8041694 <HAL_RCC_OscConfig+0x558>)
 8041616:	685b      	ldr	r3, [r3, #4]
 8041618:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 804161a:	687b      	ldr	r3, [r7, #4]
 804161c:	699b      	ldr	r3, [r3, #24]
 804161e:	2b01      	cmp	r3, #1
 8041620:	d030      	beq.n	8041684 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8041622:	68fb      	ldr	r3, [r7, #12]
 8041624:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8041628:	687b      	ldr	r3, [r7, #4]
 804162a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 804162c:	429a      	cmp	r2, r3
 804162e:	d129      	bne.n	8041684 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8041630:	68fb      	ldr	r3, [r7, #12]
 8041632:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8041636:	687b      	ldr	r3, [r7, #4]
 8041638:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 804163a:	429a      	cmp	r2, r3
 804163c:	d122      	bne.n	8041684 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 804163e:	68fa      	ldr	r2, [r7, #12]
 8041640:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8041644:	4013      	ands	r3, r2
 8041646:	687a      	ldr	r2, [r7, #4]
 8041648:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 804164a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 804164c:	4293      	cmp	r3, r2
 804164e:	d119      	bne.n	8041684 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8041650:	68fb      	ldr	r3, [r7, #12]
 8041652:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8041656:	687b      	ldr	r3, [r7, #4]
 8041658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 804165a:	085b      	lsrs	r3, r3, #1
 804165c:	3b01      	subs	r3, #1
 804165e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8041660:	429a      	cmp	r2, r3
 8041662:	d10f      	bne.n	8041684 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8041664:	68fb      	ldr	r3, [r7, #12]
 8041666:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 804166a:	687b      	ldr	r3, [r7, #4]
 804166c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804166e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8041670:	429a      	cmp	r2, r3
 8041672:	d107      	bne.n	8041684 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8041674:	68fb      	ldr	r3, [r7, #12]
 8041676:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 804167a:	687b      	ldr	r3, [r7, #4]
 804167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804167e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8041680:	429a      	cmp	r2, r3
 8041682:	d001      	beq.n	8041688 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8041684:	2301      	movs	r3, #1
 8041686:	e000      	b.n	804168a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8041688:	2300      	movs	r3, #0
}
 804168a:	4618      	mov	r0, r3
 804168c:	3718      	adds	r7, #24
 804168e:	46bd      	mov	sp, r7
 8041690:	bd80      	pop	{r7, pc}
 8041692:	bf00      	nop
 8041694:	40023800 	.word	0x40023800

08041698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8041698:	b580      	push	{r7, lr}
 804169a:	b084      	sub	sp, #16
 804169c:	af00      	add	r7, sp, #0
 804169e:	6078      	str	r0, [r7, #4]
 80416a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80416a2:	2300      	movs	r3, #0
 80416a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80416a6:	687b      	ldr	r3, [r7, #4]
 80416a8:	2b00      	cmp	r3, #0
 80416aa:	d101      	bne.n	80416b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80416ac:	2301      	movs	r3, #1
 80416ae:	e0d0      	b.n	8041852 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80416b0:	4b6a      	ldr	r3, [pc, #424]	@ (804185c <HAL_RCC_ClockConfig+0x1c4>)
 80416b2:	681b      	ldr	r3, [r3, #0]
 80416b4:	f003 030f 	and.w	r3, r3, #15
 80416b8:	683a      	ldr	r2, [r7, #0]
 80416ba:	429a      	cmp	r2, r3
 80416bc:	d910      	bls.n	80416e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80416be:	4b67      	ldr	r3, [pc, #412]	@ (804185c <HAL_RCC_ClockConfig+0x1c4>)
 80416c0:	681b      	ldr	r3, [r3, #0]
 80416c2:	f023 020f 	bic.w	r2, r3, #15
 80416c6:	4965      	ldr	r1, [pc, #404]	@ (804185c <HAL_RCC_ClockConfig+0x1c4>)
 80416c8:	683b      	ldr	r3, [r7, #0]
 80416ca:	4313      	orrs	r3, r2
 80416cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80416ce:	4b63      	ldr	r3, [pc, #396]	@ (804185c <HAL_RCC_ClockConfig+0x1c4>)
 80416d0:	681b      	ldr	r3, [r3, #0]
 80416d2:	f003 030f 	and.w	r3, r3, #15
 80416d6:	683a      	ldr	r2, [r7, #0]
 80416d8:	429a      	cmp	r2, r3
 80416da:	d001      	beq.n	80416e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80416dc:	2301      	movs	r3, #1
 80416de:	e0b8      	b.n	8041852 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80416e0:	687b      	ldr	r3, [r7, #4]
 80416e2:	681b      	ldr	r3, [r3, #0]
 80416e4:	f003 0302 	and.w	r3, r3, #2
 80416e8:	2b00      	cmp	r3, #0
 80416ea:	d020      	beq.n	804172e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80416ec:	687b      	ldr	r3, [r7, #4]
 80416ee:	681b      	ldr	r3, [r3, #0]
 80416f0:	f003 0304 	and.w	r3, r3, #4
 80416f4:	2b00      	cmp	r3, #0
 80416f6:	d005      	beq.n	8041704 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80416f8:	4b59      	ldr	r3, [pc, #356]	@ (8041860 <HAL_RCC_ClockConfig+0x1c8>)
 80416fa:	689b      	ldr	r3, [r3, #8]
 80416fc:	4a58      	ldr	r2, [pc, #352]	@ (8041860 <HAL_RCC_ClockConfig+0x1c8>)
 80416fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8041702:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8041704:	687b      	ldr	r3, [r7, #4]
 8041706:	681b      	ldr	r3, [r3, #0]
 8041708:	f003 0308 	and.w	r3, r3, #8
 804170c:	2b00      	cmp	r3, #0
 804170e:	d005      	beq.n	804171c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8041710:	4b53      	ldr	r3, [pc, #332]	@ (8041860 <HAL_RCC_ClockConfig+0x1c8>)
 8041712:	689b      	ldr	r3, [r3, #8]
 8041714:	4a52      	ldr	r2, [pc, #328]	@ (8041860 <HAL_RCC_ClockConfig+0x1c8>)
 8041716:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 804171a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 804171c:	4b50      	ldr	r3, [pc, #320]	@ (8041860 <HAL_RCC_ClockConfig+0x1c8>)
 804171e:	689b      	ldr	r3, [r3, #8]
 8041720:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8041724:	687b      	ldr	r3, [r7, #4]
 8041726:	689b      	ldr	r3, [r3, #8]
 8041728:	494d      	ldr	r1, [pc, #308]	@ (8041860 <HAL_RCC_ClockConfig+0x1c8>)
 804172a:	4313      	orrs	r3, r2
 804172c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 804172e:	687b      	ldr	r3, [r7, #4]
 8041730:	681b      	ldr	r3, [r3, #0]
 8041732:	f003 0301 	and.w	r3, r3, #1
 8041736:	2b00      	cmp	r3, #0
 8041738:	d040      	beq.n	80417bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 804173a:	687b      	ldr	r3, [r7, #4]
 804173c:	685b      	ldr	r3, [r3, #4]
 804173e:	2b01      	cmp	r3, #1
 8041740:	d107      	bne.n	8041752 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8041742:	4b47      	ldr	r3, [pc, #284]	@ (8041860 <HAL_RCC_ClockConfig+0x1c8>)
 8041744:	681b      	ldr	r3, [r3, #0]
 8041746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 804174a:	2b00      	cmp	r3, #0
 804174c:	d115      	bne.n	804177a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 804174e:	2301      	movs	r3, #1
 8041750:	e07f      	b.n	8041852 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8041752:	687b      	ldr	r3, [r7, #4]
 8041754:	685b      	ldr	r3, [r3, #4]
 8041756:	2b02      	cmp	r3, #2
 8041758:	d107      	bne.n	804176a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 804175a:	4b41      	ldr	r3, [pc, #260]	@ (8041860 <HAL_RCC_ClockConfig+0x1c8>)
 804175c:	681b      	ldr	r3, [r3, #0]
 804175e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8041762:	2b00      	cmp	r3, #0
 8041764:	d109      	bne.n	804177a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8041766:	2301      	movs	r3, #1
 8041768:	e073      	b.n	8041852 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 804176a:	4b3d      	ldr	r3, [pc, #244]	@ (8041860 <HAL_RCC_ClockConfig+0x1c8>)
 804176c:	681b      	ldr	r3, [r3, #0]
 804176e:	f003 0302 	and.w	r3, r3, #2
 8041772:	2b00      	cmp	r3, #0
 8041774:	d101      	bne.n	804177a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8041776:	2301      	movs	r3, #1
 8041778:	e06b      	b.n	8041852 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 804177a:	4b39      	ldr	r3, [pc, #228]	@ (8041860 <HAL_RCC_ClockConfig+0x1c8>)
 804177c:	689b      	ldr	r3, [r3, #8]
 804177e:	f023 0203 	bic.w	r2, r3, #3
 8041782:	687b      	ldr	r3, [r7, #4]
 8041784:	685b      	ldr	r3, [r3, #4]
 8041786:	4936      	ldr	r1, [pc, #216]	@ (8041860 <HAL_RCC_ClockConfig+0x1c8>)
 8041788:	4313      	orrs	r3, r2
 804178a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 804178c:	f7ff f99c 	bl	8040ac8 <HAL_GetTick>
 8041790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8041792:	e00a      	b.n	80417aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8041794:	f7ff f998 	bl	8040ac8 <HAL_GetTick>
 8041798:	4602      	mov	r2, r0
 804179a:	68fb      	ldr	r3, [r7, #12]
 804179c:	1ad3      	subs	r3, r2, r3
 804179e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80417a2:	4293      	cmp	r3, r2
 80417a4:	d901      	bls.n	80417aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80417a6:	2303      	movs	r3, #3
 80417a8:	e053      	b.n	8041852 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80417aa:	4b2d      	ldr	r3, [pc, #180]	@ (8041860 <HAL_RCC_ClockConfig+0x1c8>)
 80417ac:	689b      	ldr	r3, [r3, #8]
 80417ae:	f003 020c 	and.w	r2, r3, #12
 80417b2:	687b      	ldr	r3, [r7, #4]
 80417b4:	685b      	ldr	r3, [r3, #4]
 80417b6:	009b      	lsls	r3, r3, #2
 80417b8:	429a      	cmp	r2, r3
 80417ba:	d1eb      	bne.n	8041794 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80417bc:	4b27      	ldr	r3, [pc, #156]	@ (804185c <HAL_RCC_ClockConfig+0x1c4>)
 80417be:	681b      	ldr	r3, [r3, #0]
 80417c0:	f003 030f 	and.w	r3, r3, #15
 80417c4:	683a      	ldr	r2, [r7, #0]
 80417c6:	429a      	cmp	r2, r3
 80417c8:	d210      	bcs.n	80417ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80417ca:	4b24      	ldr	r3, [pc, #144]	@ (804185c <HAL_RCC_ClockConfig+0x1c4>)
 80417cc:	681b      	ldr	r3, [r3, #0]
 80417ce:	f023 020f 	bic.w	r2, r3, #15
 80417d2:	4922      	ldr	r1, [pc, #136]	@ (804185c <HAL_RCC_ClockConfig+0x1c4>)
 80417d4:	683b      	ldr	r3, [r7, #0]
 80417d6:	4313      	orrs	r3, r2
 80417d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80417da:	4b20      	ldr	r3, [pc, #128]	@ (804185c <HAL_RCC_ClockConfig+0x1c4>)
 80417dc:	681b      	ldr	r3, [r3, #0]
 80417de:	f003 030f 	and.w	r3, r3, #15
 80417e2:	683a      	ldr	r2, [r7, #0]
 80417e4:	429a      	cmp	r2, r3
 80417e6:	d001      	beq.n	80417ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80417e8:	2301      	movs	r3, #1
 80417ea:	e032      	b.n	8041852 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80417ec:	687b      	ldr	r3, [r7, #4]
 80417ee:	681b      	ldr	r3, [r3, #0]
 80417f0:	f003 0304 	and.w	r3, r3, #4
 80417f4:	2b00      	cmp	r3, #0
 80417f6:	d008      	beq.n	804180a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80417f8:	4b19      	ldr	r3, [pc, #100]	@ (8041860 <HAL_RCC_ClockConfig+0x1c8>)
 80417fa:	689b      	ldr	r3, [r3, #8]
 80417fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8041800:	687b      	ldr	r3, [r7, #4]
 8041802:	68db      	ldr	r3, [r3, #12]
 8041804:	4916      	ldr	r1, [pc, #88]	@ (8041860 <HAL_RCC_ClockConfig+0x1c8>)
 8041806:	4313      	orrs	r3, r2
 8041808:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 804180a:	687b      	ldr	r3, [r7, #4]
 804180c:	681b      	ldr	r3, [r3, #0]
 804180e:	f003 0308 	and.w	r3, r3, #8
 8041812:	2b00      	cmp	r3, #0
 8041814:	d009      	beq.n	804182a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8041816:	4b12      	ldr	r3, [pc, #72]	@ (8041860 <HAL_RCC_ClockConfig+0x1c8>)
 8041818:	689b      	ldr	r3, [r3, #8]
 804181a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 804181e:	687b      	ldr	r3, [r7, #4]
 8041820:	691b      	ldr	r3, [r3, #16]
 8041822:	00db      	lsls	r3, r3, #3
 8041824:	490e      	ldr	r1, [pc, #56]	@ (8041860 <HAL_RCC_ClockConfig+0x1c8>)
 8041826:	4313      	orrs	r3, r2
 8041828:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 804182a:	f000 f821 	bl	8041870 <HAL_RCC_GetSysClockFreq>
 804182e:	4602      	mov	r2, r0
 8041830:	4b0b      	ldr	r3, [pc, #44]	@ (8041860 <HAL_RCC_ClockConfig+0x1c8>)
 8041832:	689b      	ldr	r3, [r3, #8]
 8041834:	091b      	lsrs	r3, r3, #4
 8041836:	f003 030f 	and.w	r3, r3, #15
 804183a:	490a      	ldr	r1, [pc, #40]	@ (8041864 <HAL_RCC_ClockConfig+0x1cc>)
 804183c:	5ccb      	ldrb	r3, [r1, r3]
 804183e:	fa22 f303 	lsr.w	r3, r2, r3
 8041842:	4a09      	ldr	r2, [pc, #36]	@ (8041868 <HAL_RCC_ClockConfig+0x1d0>)
 8041844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8041846:	4b09      	ldr	r3, [pc, #36]	@ (804186c <HAL_RCC_ClockConfig+0x1d4>)
 8041848:	681b      	ldr	r3, [r3, #0]
 804184a:	4618      	mov	r0, r3
 804184c:	f7ff f8f8 	bl	8040a40 <HAL_InitTick>

  return HAL_OK;
 8041850:	2300      	movs	r3, #0
}
 8041852:	4618      	mov	r0, r3
 8041854:	3710      	adds	r7, #16
 8041856:	46bd      	mov	sp, r7
 8041858:	bd80      	pop	{r7, pc}
 804185a:	bf00      	nop
 804185c:	40023c00 	.word	0x40023c00
 8041860:	40023800 	.word	0x40023800
 8041864:	08042e84 	.word	0x08042e84
 8041868:	20000000 	.word	0x20000000
 804186c:	20000004 	.word	0x20000004

08041870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8041870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8041874:	b094      	sub	sp, #80	@ 0x50
 8041876:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8041878:	2300      	movs	r3, #0
 804187a:	647b      	str	r3, [r7, #68]	@ 0x44
 804187c:	2300      	movs	r3, #0
 804187e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8041880:	2300      	movs	r3, #0
 8041882:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8041884:	2300      	movs	r3, #0
 8041886:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8041888:	4b79      	ldr	r3, [pc, #484]	@ (8041a70 <HAL_RCC_GetSysClockFreq+0x200>)
 804188a:	689b      	ldr	r3, [r3, #8]
 804188c:	f003 030c 	and.w	r3, r3, #12
 8041890:	2b08      	cmp	r3, #8
 8041892:	d00d      	beq.n	80418b0 <HAL_RCC_GetSysClockFreq+0x40>
 8041894:	2b08      	cmp	r3, #8
 8041896:	f200 80e1 	bhi.w	8041a5c <HAL_RCC_GetSysClockFreq+0x1ec>
 804189a:	2b00      	cmp	r3, #0
 804189c:	d002      	beq.n	80418a4 <HAL_RCC_GetSysClockFreq+0x34>
 804189e:	2b04      	cmp	r3, #4
 80418a0:	d003      	beq.n	80418aa <HAL_RCC_GetSysClockFreq+0x3a>
 80418a2:	e0db      	b.n	8041a5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80418a4:	4b73      	ldr	r3, [pc, #460]	@ (8041a74 <HAL_RCC_GetSysClockFreq+0x204>)
 80418a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80418a8:	e0db      	b.n	8041a62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80418aa:	4b73      	ldr	r3, [pc, #460]	@ (8041a78 <HAL_RCC_GetSysClockFreq+0x208>)
 80418ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80418ae:	e0d8      	b.n	8041a62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80418b0:	4b6f      	ldr	r3, [pc, #444]	@ (8041a70 <HAL_RCC_GetSysClockFreq+0x200>)
 80418b2:	685b      	ldr	r3, [r3, #4]
 80418b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80418b8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80418ba:	4b6d      	ldr	r3, [pc, #436]	@ (8041a70 <HAL_RCC_GetSysClockFreq+0x200>)
 80418bc:	685b      	ldr	r3, [r3, #4]
 80418be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80418c2:	2b00      	cmp	r3, #0
 80418c4:	d063      	beq.n	804198e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80418c6:	4b6a      	ldr	r3, [pc, #424]	@ (8041a70 <HAL_RCC_GetSysClockFreq+0x200>)
 80418c8:	685b      	ldr	r3, [r3, #4]
 80418ca:	099b      	lsrs	r3, r3, #6
 80418cc:	2200      	movs	r2, #0
 80418ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80418d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80418d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80418d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80418d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80418da:	2300      	movs	r3, #0
 80418dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80418de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80418e2:	4622      	mov	r2, r4
 80418e4:	462b      	mov	r3, r5
 80418e6:	f04f 0000 	mov.w	r0, #0
 80418ea:	f04f 0100 	mov.w	r1, #0
 80418ee:	0159      	lsls	r1, r3, #5
 80418f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80418f4:	0150      	lsls	r0, r2, #5
 80418f6:	4602      	mov	r2, r0
 80418f8:	460b      	mov	r3, r1
 80418fa:	4621      	mov	r1, r4
 80418fc:	1a51      	subs	r1, r2, r1
 80418fe:	6139      	str	r1, [r7, #16]
 8041900:	4629      	mov	r1, r5
 8041902:	eb63 0301 	sbc.w	r3, r3, r1
 8041906:	617b      	str	r3, [r7, #20]
 8041908:	f04f 0200 	mov.w	r2, #0
 804190c:	f04f 0300 	mov.w	r3, #0
 8041910:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8041914:	4659      	mov	r1, fp
 8041916:	018b      	lsls	r3, r1, #6
 8041918:	4651      	mov	r1, sl
 804191a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 804191e:	4651      	mov	r1, sl
 8041920:	018a      	lsls	r2, r1, #6
 8041922:	4651      	mov	r1, sl
 8041924:	ebb2 0801 	subs.w	r8, r2, r1
 8041928:	4659      	mov	r1, fp
 804192a:	eb63 0901 	sbc.w	r9, r3, r1
 804192e:	f04f 0200 	mov.w	r2, #0
 8041932:	f04f 0300 	mov.w	r3, #0
 8041936:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 804193a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 804193e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8041942:	4690      	mov	r8, r2
 8041944:	4699      	mov	r9, r3
 8041946:	4623      	mov	r3, r4
 8041948:	eb18 0303 	adds.w	r3, r8, r3
 804194c:	60bb      	str	r3, [r7, #8]
 804194e:	462b      	mov	r3, r5
 8041950:	eb49 0303 	adc.w	r3, r9, r3
 8041954:	60fb      	str	r3, [r7, #12]
 8041956:	f04f 0200 	mov.w	r2, #0
 804195a:	f04f 0300 	mov.w	r3, #0
 804195e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8041962:	4629      	mov	r1, r5
 8041964:	024b      	lsls	r3, r1, #9
 8041966:	4621      	mov	r1, r4
 8041968:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 804196c:	4621      	mov	r1, r4
 804196e:	024a      	lsls	r2, r1, #9
 8041970:	4610      	mov	r0, r2
 8041972:	4619      	mov	r1, r3
 8041974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8041976:	2200      	movs	r2, #0
 8041978:	62bb      	str	r3, [r7, #40]	@ 0x28
 804197a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 804197c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8041980:	f7fe fc62 	bl	8040248 <__aeabi_uldivmod>
 8041984:	4602      	mov	r2, r0
 8041986:	460b      	mov	r3, r1
 8041988:	4613      	mov	r3, r2
 804198a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 804198c:	e058      	b.n	8041a40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 804198e:	4b38      	ldr	r3, [pc, #224]	@ (8041a70 <HAL_RCC_GetSysClockFreq+0x200>)
 8041990:	685b      	ldr	r3, [r3, #4]
 8041992:	099b      	lsrs	r3, r3, #6
 8041994:	2200      	movs	r2, #0
 8041996:	4618      	mov	r0, r3
 8041998:	4611      	mov	r1, r2
 804199a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 804199e:	623b      	str	r3, [r7, #32]
 80419a0:	2300      	movs	r3, #0
 80419a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80419a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80419a8:	4642      	mov	r2, r8
 80419aa:	464b      	mov	r3, r9
 80419ac:	f04f 0000 	mov.w	r0, #0
 80419b0:	f04f 0100 	mov.w	r1, #0
 80419b4:	0159      	lsls	r1, r3, #5
 80419b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80419ba:	0150      	lsls	r0, r2, #5
 80419bc:	4602      	mov	r2, r0
 80419be:	460b      	mov	r3, r1
 80419c0:	4641      	mov	r1, r8
 80419c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80419c6:	4649      	mov	r1, r9
 80419c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80419cc:	f04f 0200 	mov.w	r2, #0
 80419d0:	f04f 0300 	mov.w	r3, #0
 80419d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80419d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80419dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80419e0:	ebb2 040a 	subs.w	r4, r2, sl
 80419e4:	eb63 050b 	sbc.w	r5, r3, fp
 80419e8:	f04f 0200 	mov.w	r2, #0
 80419ec:	f04f 0300 	mov.w	r3, #0
 80419f0:	00eb      	lsls	r3, r5, #3
 80419f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80419f6:	00e2      	lsls	r2, r4, #3
 80419f8:	4614      	mov	r4, r2
 80419fa:	461d      	mov	r5, r3
 80419fc:	4643      	mov	r3, r8
 80419fe:	18e3      	adds	r3, r4, r3
 8041a00:	603b      	str	r3, [r7, #0]
 8041a02:	464b      	mov	r3, r9
 8041a04:	eb45 0303 	adc.w	r3, r5, r3
 8041a08:	607b      	str	r3, [r7, #4]
 8041a0a:	f04f 0200 	mov.w	r2, #0
 8041a0e:	f04f 0300 	mov.w	r3, #0
 8041a12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8041a16:	4629      	mov	r1, r5
 8041a18:	028b      	lsls	r3, r1, #10
 8041a1a:	4621      	mov	r1, r4
 8041a1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8041a20:	4621      	mov	r1, r4
 8041a22:	028a      	lsls	r2, r1, #10
 8041a24:	4610      	mov	r0, r2
 8041a26:	4619      	mov	r1, r3
 8041a28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8041a2a:	2200      	movs	r2, #0
 8041a2c:	61bb      	str	r3, [r7, #24]
 8041a2e:	61fa      	str	r2, [r7, #28]
 8041a30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8041a34:	f7fe fc08 	bl	8040248 <__aeabi_uldivmod>
 8041a38:	4602      	mov	r2, r0
 8041a3a:	460b      	mov	r3, r1
 8041a3c:	4613      	mov	r3, r2
 8041a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8041a40:	4b0b      	ldr	r3, [pc, #44]	@ (8041a70 <HAL_RCC_GetSysClockFreq+0x200>)
 8041a42:	685b      	ldr	r3, [r3, #4]
 8041a44:	0c1b      	lsrs	r3, r3, #16
 8041a46:	f003 0303 	and.w	r3, r3, #3
 8041a4a:	3301      	adds	r3, #1
 8041a4c:	005b      	lsls	r3, r3, #1
 8041a4e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8041a50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8041a52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8041a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8041a58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8041a5a:	e002      	b.n	8041a62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8041a5c:	4b05      	ldr	r3, [pc, #20]	@ (8041a74 <HAL_RCC_GetSysClockFreq+0x204>)
 8041a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8041a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8041a62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8041a64:	4618      	mov	r0, r3
 8041a66:	3750      	adds	r7, #80	@ 0x50
 8041a68:	46bd      	mov	sp, r7
 8041a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8041a6e:	bf00      	nop
 8041a70:	40023800 	.word	0x40023800
 8041a74:	00f42400 	.word	0x00f42400
 8041a78:	007a1200 	.word	0x007a1200

08041a7c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8041a7c:	b480      	push	{r7}
 8041a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8041a80:	4b03      	ldr	r3, [pc, #12]	@ (8041a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8041a82:	681b      	ldr	r3, [r3, #0]
}
 8041a84:	4618      	mov	r0, r3
 8041a86:	46bd      	mov	sp, r7
 8041a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041a8c:	4770      	bx	lr
 8041a8e:	bf00      	nop
 8041a90:	20000000 	.word	0x20000000

08041a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8041a94:	b580      	push	{r7, lr}
 8041a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8041a98:	f7ff fff0 	bl	8041a7c <HAL_RCC_GetHCLKFreq>
 8041a9c:	4602      	mov	r2, r0
 8041a9e:	4b05      	ldr	r3, [pc, #20]	@ (8041ab4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8041aa0:	689b      	ldr	r3, [r3, #8]
 8041aa2:	0a9b      	lsrs	r3, r3, #10
 8041aa4:	f003 0307 	and.w	r3, r3, #7
 8041aa8:	4903      	ldr	r1, [pc, #12]	@ (8041ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8041aaa:	5ccb      	ldrb	r3, [r1, r3]
 8041aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8041ab0:	4618      	mov	r0, r3
 8041ab2:	bd80      	pop	{r7, pc}
 8041ab4:	40023800 	.word	0x40023800
 8041ab8:	08042e94 	.word	0x08042e94

08041abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8041abc:	b580      	push	{r7, lr}
 8041abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8041ac0:	f7ff ffdc 	bl	8041a7c <HAL_RCC_GetHCLKFreq>
 8041ac4:	4602      	mov	r2, r0
 8041ac6:	4b05      	ldr	r3, [pc, #20]	@ (8041adc <HAL_RCC_GetPCLK2Freq+0x20>)
 8041ac8:	689b      	ldr	r3, [r3, #8]
 8041aca:	0b5b      	lsrs	r3, r3, #13
 8041acc:	f003 0307 	and.w	r3, r3, #7
 8041ad0:	4903      	ldr	r1, [pc, #12]	@ (8041ae0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8041ad2:	5ccb      	ldrb	r3, [r1, r3]
 8041ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8041ad8:	4618      	mov	r0, r3
 8041ada:	bd80      	pop	{r7, pc}
 8041adc:	40023800 	.word	0x40023800
 8041ae0:	08042e94 	.word	0x08042e94

08041ae4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8041ae4:	b580      	push	{r7, lr}
 8041ae6:	b088      	sub	sp, #32
 8041ae8:	af00      	add	r7, sp, #0
 8041aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8041aec:	2300      	movs	r3, #0
 8041aee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8041af0:	2300      	movs	r3, #0
 8041af2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8041af4:	2300      	movs	r3, #0
 8041af6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8041af8:	2300      	movs	r3, #0
 8041afa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8041afc:	2300      	movs	r3, #0
 8041afe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8041b00:	687b      	ldr	r3, [r7, #4]
 8041b02:	681b      	ldr	r3, [r3, #0]
 8041b04:	f003 0301 	and.w	r3, r3, #1
 8041b08:	2b00      	cmp	r3, #0
 8041b0a:	d012      	beq.n	8041b32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8041b0c:	4b69      	ldr	r3, [pc, #420]	@ (8041cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041b0e:	689b      	ldr	r3, [r3, #8]
 8041b10:	4a68      	ldr	r2, [pc, #416]	@ (8041cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041b12:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8041b16:	6093      	str	r3, [r2, #8]
 8041b18:	4b66      	ldr	r3, [pc, #408]	@ (8041cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041b1a:	689a      	ldr	r2, [r3, #8]
 8041b1c:	687b      	ldr	r3, [r7, #4]
 8041b1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8041b20:	4964      	ldr	r1, [pc, #400]	@ (8041cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041b22:	4313      	orrs	r3, r2
 8041b24:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8041b26:	687b      	ldr	r3, [r7, #4]
 8041b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8041b2a:	2b00      	cmp	r3, #0
 8041b2c:	d101      	bne.n	8041b32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8041b2e:	2301      	movs	r3, #1
 8041b30:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8041b32:	687b      	ldr	r3, [r7, #4]
 8041b34:	681b      	ldr	r3, [r3, #0]
 8041b36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8041b3a:	2b00      	cmp	r3, #0
 8041b3c:	d017      	beq.n	8041b6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8041b3e:	4b5d      	ldr	r3, [pc, #372]	@ (8041cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8041b44:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8041b48:	687b      	ldr	r3, [r7, #4]
 8041b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8041b4c:	4959      	ldr	r1, [pc, #356]	@ (8041cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041b4e:	4313      	orrs	r3, r2
 8041b50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8041b54:	687b      	ldr	r3, [r7, #4]
 8041b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8041b58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8041b5c:	d101      	bne.n	8041b62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8041b5e:	2301      	movs	r3, #1
 8041b60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8041b62:	687b      	ldr	r3, [r7, #4]
 8041b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8041b66:	2b00      	cmp	r3, #0
 8041b68:	d101      	bne.n	8041b6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8041b6a:	2301      	movs	r3, #1
 8041b6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8041b6e:	687b      	ldr	r3, [r7, #4]
 8041b70:	681b      	ldr	r3, [r3, #0]
 8041b72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8041b76:	2b00      	cmp	r3, #0
 8041b78:	d017      	beq.n	8041baa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8041b7a:	4b4e      	ldr	r3, [pc, #312]	@ (8041cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8041b80:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8041b84:	687b      	ldr	r3, [r7, #4]
 8041b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8041b88:	494a      	ldr	r1, [pc, #296]	@ (8041cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041b8a:	4313      	orrs	r3, r2
 8041b8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8041b90:	687b      	ldr	r3, [r7, #4]
 8041b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8041b94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8041b98:	d101      	bne.n	8041b9e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8041b9a:	2301      	movs	r3, #1
 8041b9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8041b9e:	687b      	ldr	r3, [r7, #4]
 8041ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8041ba2:	2b00      	cmp	r3, #0
 8041ba4:	d101      	bne.n	8041baa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8041ba6:	2301      	movs	r3, #1
 8041ba8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8041baa:	687b      	ldr	r3, [r7, #4]
 8041bac:	681b      	ldr	r3, [r3, #0]
 8041bae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8041bb2:	2b00      	cmp	r3, #0
 8041bb4:	d001      	beq.n	8041bba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8041bb6:	2301      	movs	r3, #1
 8041bb8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8041bba:	687b      	ldr	r3, [r7, #4]
 8041bbc:	681b      	ldr	r3, [r3, #0]
 8041bbe:	f003 0320 	and.w	r3, r3, #32
 8041bc2:	2b00      	cmp	r3, #0
 8041bc4:	f000 808b 	beq.w	8041cde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8041bc8:	4b3a      	ldr	r3, [pc, #232]	@ (8041cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8041bcc:	4a39      	ldr	r2, [pc, #228]	@ (8041cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041bce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8041bd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8041bd4:	4b37      	ldr	r3, [pc, #220]	@ (8041cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8041bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8041bdc:	60bb      	str	r3, [r7, #8]
 8041bde:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8041be0:	4b35      	ldr	r3, [pc, #212]	@ (8041cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8041be2:	681b      	ldr	r3, [r3, #0]
 8041be4:	4a34      	ldr	r2, [pc, #208]	@ (8041cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8041be6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8041bea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8041bec:	f7fe ff6c 	bl	8040ac8 <HAL_GetTick>
 8041bf0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8041bf2:	e008      	b.n	8041c06 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8041bf4:	f7fe ff68 	bl	8040ac8 <HAL_GetTick>
 8041bf8:	4602      	mov	r2, r0
 8041bfa:	697b      	ldr	r3, [r7, #20]
 8041bfc:	1ad3      	subs	r3, r2, r3
 8041bfe:	2b64      	cmp	r3, #100	@ 0x64
 8041c00:	d901      	bls.n	8041c06 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8041c02:	2303      	movs	r3, #3
 8041c04:	e38f      	b.n	8042326 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8041c06:	4b2c      	ldr	r3, [pc, #176]	@ (8041cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8041c08:	681b      	ldr	r3, [r3, #0]
 8041c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8041c0e:	2b00      	cmp	r3, #0
 8041c10:	d0f0      	beq.n	8041bf4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8041c12:	4b28      	ldr	r3, [pc, #160]	@ (8041cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041c16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8041c1a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8041c1c:	693b      	ldr	r3, [r7, #16]
 8041c1e:	2b00      	cmp	r3, #0
 8041c20:	d035      	beq.n	8041c8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8041c22:	687b      	ldr	r3, [r7, #4]
 8041c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8041c26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8041c2a:	693a      	ldr	r2, [r7, #16]
 8041c2c:	429a      	cmp	r2, r3
 8041c2e:	d02e      	beq.n	8041c8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8041c30:	4b20      	ldr	r3, [pc, #128]	@ (8041cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041c34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8041c38:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8041c3a:	4b1e      	ldr	r3, [pc, #120]	@ (8041cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041c3e:	4a1d      	ldr	r2, [pc, #116]	@ (8041cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8041c44:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8041c46:	4b1b      	ldr	r3, [pc, #108]	@ (8041cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041c4a:	4a1a      	ldr	r2, [pc, #104]	@ (8041cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8041c50:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8041c52:	4a18      	ldr	r2, [pc, #96]	@ (8041cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c54:	693b      	ldr	r3, [r7, #16]
 8041c56:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8041c58:	4b16      	ldr	r3, [pc, #88]	@ (8041cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041c5c:	f003 0301 	and.w	r3, r3, #1
 8041c60:	2b01      	cmp	r3, #1
 8041c62:	d114      	bne.n	8041c8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041c64:	f7fe ff30 	bl	8040ac8 <HAL_GetTick>
 8041c68:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8041c6a:	e00a      	b.n	8041c82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8041c6c:	f7fe ff2c 	bl	8040ac8 <HAL_GetTick>
 8041c70:	4602      	mov	r2, r0
 8041c72:	697b      	ldr	r3, [r7, #20]
 8041c74:	1ad3      	subs	r3, r2, r3
 8041c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8041c7a:	4293      	cmp	r3, r2
 8041c7c:	d901      	bls.n	8041c82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8041c7e:	2303      	movs	r3, #3
 8041c80:	e351      	b.n	8042326 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8041c82:	4b0c      	ldr	r3, [pc, #48]	@ (8041cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041c86:	f003 0302 	and.w	r3, r3, #2
 8041c8a:	2b00      	cmp	r3, #0
 8041c8c:	d0ee      	beq.n	8041c6c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8041c8e:	687b      	ldr	r3, [r7, #4]
 8041c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8041c92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8041c96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8041c9a:	d111      	bne.n	8041cc0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8041c9c:	4b05      	ldr	r3, [pc, #20]	@ (8041cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c9e:	689b      	ldr	r3, [r3, #8]
 8041ca0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8041ca4:	687b      	ldr	r3, [r7, #4]
 8041ca6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8041ca8:	4b04      	ldr	r3, [pc, #16]	@ (8041cbc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8041caa:	400b      	ands	r3, r1
 8041cac:	4901      	ldr	r1, [pc, #4]	@ (8041cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041cae:	4313      	orrs	r3, r2
 8041cb0:	608b      	str	r3, [r1, #8]
 8041cb2:	e00b      	b.n	8041ccc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8041cb4:	40023800 	.word	0x40023800
 8041cb8:	40007000 	.word	0x40007000
 8041cbc:	0ffffcff 	.word	0x0ffffcff
 8041cc0:	4bac      	ldr	r3, [pc, #688]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041cc2:	689b      	ldr	r3, [r3, #8]
 8041cc4:	4aab      	ldr	r2, [pc, #684]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041cc6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8041cca:	6093      	str	r3, [r2, #8]
 8041ccc:	4ba9      	ldr	r3, [pc, #676]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041cce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8041cd0:	687b      	ldr	r3, [r7, #4]
 8041cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8041cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8041cd8:	49a6      	ldr	r1, [pc, #664]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041cda:	4313      	orrs	r3, r2
 8041cdc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8041cde:	687b      	ldr	r3, [r7, #4]
 8041ce0:	681b      	ldr	r3, [r3, #0]
 8041ce2:	f003 0310 	and.w	r3, r3, #16
 8041ce6:	2b00      	cmp	r3, #0
 8041ce8:	d010      	beq.n	8041d0c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8041cea:	4ba2      	ldr	r3, [pc, #648]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8041cf0:	4aa0      	ldr	r2, [pc, #640]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041cf2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8041cf6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8041cfa:	4b9e      	ldr	r3, [pc, #632]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041cfc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8041d00:	687b      	ldr	r3, [r7, #4]
 8041d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8041d04:	499b      	ldr	r1, [pc, #620]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041d06:	4313      	orrs	r3, r2
 8041d08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8041d0c:	687b      	ldr	r3, [r7, #4]
 8041d0e:	681b      	ldr	r3, [r3, #0]
 8041d10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8041d14:	2b00      	cmp	r3, #0
 8041d16:	d00a      	beq.n	8041d2e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8041d18:	4b96      	ldr	r3, [pc, #600]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8041d1e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8041d22:	687b      	ldr	r3, [r7, #4]
 8041d24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8041d26:	4993      	ldr	r1, [pc, #588]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041d28:	4313      	orrs	r3, r2
 8041d2a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8041d2e:	687b      	ldr	r3, [r7, #4]
 8041d30:	681b      	ldr	r3, [r3, #0]
 8041d32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8041d36:	2b00      	cmp	r3, #0
 8041d38:	d00a      	beq.n	8041d50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8041d3a:	4b8e      	ldr	r3, [pc, #568]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8041d40:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8041d44:	687b      	ldr	r3, [r7, #4]
 8041d46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8041d48:	498a      	ldr	r1, [pc, #552]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041d4a:	4313      	orrs	r3, r2
 8041d4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8041d50:	687b      	ldr	r3, [r7, #4]
 8041d52:	681b      	ldr	r3, [r3, #0]
 8041d54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8041d58:	2b00      	cmp	r3, #0
 8041d5a:	d00a      	beq.n	8041d72 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8041d5c:	4b85      	ldr	r3, [pc, #532]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8041d62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8041d66:	687b      	ldr	r3, [r7, #4]
 8041d68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8041d6a:	4982      	ldr	r1, [pc, #520]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041d6c:	4313      	orrs	r3, r2
 8041d6e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8041d72:	687b      	ldr	r3, [r7, #4]
 8041d74:	681b      	ldr	r3, [r3, #0]
 8041d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8041d7a:	2b00      	cmp	r3, #0
 8041d7c:	d00a      	beq.n	8041d94 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8041d7e:	4b7d      	ldr	r3, [pc, #500]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8041d84:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8041d88:	687b      	ldr	r3, [r7, #4]
 8041d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041d8c:	4979      	ldr	r1, [pc, #484]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041d8e:	4313      	orrs	r3, r2
 8041d90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8041d94:	687b      	ldr	r3, [r7, #4]
 8041d96:	681b      	ldr	r3, [r3, #0]
 8041d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8041d9c:	2b00      	cmp	r3, #0
 8041d9e:	d00a      	beq.n	8041db6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8041da0:	4b74      	ldr	r3, [pc, #464]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8041da6:	f023 0203 	bic.w	r2, r3, #3
 8041daa:	687b      	ldr	r3, [r7, #4]
 8041dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8041dae:	4971      	ldr	r1, [pc, #452]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041db0:	4313      	orrs	r3, r2
 8041db2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8041db6:	687b      	ldr	r3, [r7, #4]
 8041db8:	681b      	ldr	r3, [r3, #0]
 8041dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8041dbe:	2b00      	cmp	r3, #0
 8041dc0:	d00a      	beq.n	8041dd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8041dc2:	4b6c      	ldr	r3, [pc, #432]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8041dc8:	f023 020c 	bic.w	r2, r3, #12
 8041dcc:	687b      	ldr	r3, [r7, #4]
 8041dce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8041dd0:	4968      	ldr	r1, [pc, #416]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041dd2:	4313      	orrs	r3, r2
 8041dd4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8041dd8:	687b      	ldr	r3, [r7, #4]
 8041dda:	681b      	ldr	r3, [r3, #0]
 8041ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8041de0:	2b00      	cmp	r3, #0
 8041de2:	d00a      	beq.n	8041dfa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8041de4:	4b63      	ldr	r3, [pc, #396]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8041dea:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8041dee:	687b      	ldr	r3, [r7, #4]
 8041df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8041df2:	4960      	ldr	r1, [pc, #384]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041df4:	4313      	orrs	r3, r2
 8041df6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8041dfa:	687b      	ldr	r3, [r7, #4]
 8041dfc:	681b      	ldr	r3, [r3, #0]
 8041dfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8041e02:	2b00      	cmp	r3, #0
 8041e04:	d00a      	beq.n	8041e1c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8041e06:	4b5b      	ldr	r3, [pc, #364]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8041e0c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8041e10:	687b      	ldr	r3, [r7, #4]
 8041e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8041e14:	4957      	ldr	r1, [pc, #348]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e16:	4313      	orrs	r3, r2
 8041e18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8041e1c:	687b      	ldr	r3, [r7, #4]
 8041e1e:	681b      	ldr	r3, [r3, #0]
 8041e20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8041e24:	2b00      	cmp	r3, #0
 8041e26:	d00a      	beq.n	8041e3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8041e28:	4b52      	ldr	r3, [pc, #328]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8041e2e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8041e32:	687b      	ldr	r3, [r7, #4]
 8041e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8041e36:	494f      	ldr	r1, [pc, #316]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e38:	4313      	orrs	r3, r2
 8041e3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8041e3e:	687b      	ldr	r3, [r7, #4]
 8041e40:	681b      	ldr	r3, [r3, #0]
 8041e42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8041e46:	2b00      	cmp	r3, #0
 8041e48:	d00a      	beq.n	8041e60 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8041e4a:	4b4a      	ldr	r3, [pc, #296]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8041e50:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8041e54:	687b      	ldr	r3, [r7, #4]
 8041e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8041e58:	4946      	ldr	r1, [pc, #280]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e5a:	4313      	orrs	r3, r2
 8041e5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8041e60:	687b      	ldr	r3, [r7, #4]
 8041e62:	681b      	ldr	r3, [r3, #0]
 8041e64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8041e68:	2b00      	cmp	r3, #0
 8041e6a:	d00a      	beq.n	8041e82 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8041e6c:	4b41      	ldr	r3, [pc, #260]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8041e72:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8041e76:	687b      	ldr	r3, [r7, #4]
 8041e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8041e7a:	493e      	ldr	r1, [pc, #248]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e7c:	4313      	orrs	r3, r2
 8041e7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8041e82:	687b      	ldr	r3, [r7, #4]
 8041e84:	681b      	ldr	r3, [r3, #0]
 8041e86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8041e8a:	2b00      	cmp	r3, #0
 8041e8c:	d00a      	beq.n	8041ea4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8041e8e:	4b39      	ldr	r3, [pc, #228]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8041e94:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8041e98:	687b      	ldr	r3, [r7, #4]
 8041e9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8041e9c:	4935      	ldr	r1, [pc, #212]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e9e:	4313      	orrs	r3, r2
 8041ea0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8041ea4:	687b      	ldr	r3, [r7, #4]
 8041ea6:	681b      	ldr	r3, [r3, #0]
 8041ea8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8041eac:	2b00      	cmp	r3, #0
 8041eae:	d00a      	beq.n	8041ec6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8041eb0:	4b30      	ldr	r3, [pc, #192]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8041eb6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8041eba:	687b      	ldr	r3, [r7, #4]
 8041ebc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8041ebe:	492d      	ldr	r1, [pc, #180]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041ec0:	4313      	orrs	r3, r2
 8041ec2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8041ec6:	687b      	ldr	r3, [r7, #4]
 8041ec8:	681b      	ldr	r3, [r3, #0]
 8041eca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8041ece:	2b00      	cmp	r3, #0
 8041ed0:	d011      	beq.n	8041ef6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8041ed2:	4b28      	ldr	r3, [pc, #160]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8041ed8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8041edc:	687b      	ldr	r3, [r7, #4]
 8041ede:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8041ee0:	4924      	ldr	r1, [pc, #144]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041ee2:	4313      	orrs	r3, r2
 8041ee4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8041ee8:	687b      	ldr	r3, [r7, #4]
 8041eea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8041eec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8041ef0:	d101      	bne.n	8041ef6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8041ef2:	2301      	movs	r3, #1
 8041ef4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8041ef6:	687b      	ldr	r3, [r7, #4]
 8041ef8:	681b      	ldr	r3, [r3, #0]
 8041efa:	f003 0308 	and.w	r3, r3, #8
 8041efe:	2b00      	cmp	r3, #0
 8041f00:	d001      	beq.n	8041f06 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8041f02:	2301      	movs	r3, #1
 8041f04:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8041f06:	687b      	ldr	r3, [r7, #4]
 8041f08:	681b      	ldr	r3, [r3, #0]
 8041f0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8041f0e:	2b00      	cmp	r3, #0
 8041f10:	d00a      	beq.n	8041f28 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8041f12:	4b18      	ldr	r3, [pc, #96]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8041f18:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8041f1c:	687b      	ldr	r3, [r7, #4]
 8041f1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8041f20:	4914      	ldr	r1, [pc, #80]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041f22:	4313      	orrs	r3, r2
 8041f24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8041f28:	687b      	ldr	r3, [r7, #4]
 8041f2a:	681b      	ldr	r3, [r3, #0]
 8041f2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8041f30:	2b00      	cmp	r3, #0
 8041f32:	d00b      	beq.n	8041f4c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8041f34:	4b0f      	ldr	r3, [pc, #60]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8041f3a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8041f3e:	687b      	ldr	r3, [r7, #4]
 8041f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8041f44:	490b      	ldr	r1, [pc, #44]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041f46:	4313      	orrs	r3, r2
 8041f48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8041f4c:	687b      	ldr	r3, [r7, #4]
 8041f4e:	681b      	ldr	r3, [r3, #0]
 8041f50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8041f54:	2b00      	cmp	r3, #0
 8041f56:	d00f      	beq.n	8041f78 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8041f58:	4b06      	ldr	r3, [pc, #24]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8041f5e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8041f62:	687b      	ldr	r3, [r7, #4]
 8041f64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8041f68:	4902      	ldr	r1, [pc, #8]	@ (8041f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041f6a:	4313      	orrs	r3, r2
 8041f6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8041f70:	e002      	b.n	8041f78 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8041f72:	bf00      	nop
 8041f74:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8041f78:	687b      	ldr	r3, [r7, #4]
 8041f7a:	681b      	ldr	r3, [r3, #0]
 8041f7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8041f80:	2b00      	cmp	r3, #0
 8041f82:	d00b      	beq.n	8041f9c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8041f84:	4b8a      	ldr	r3, [pc, #552]	@ (80421b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8041f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8041f8a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8041f8e:	687b      	ldr	r3, [r7, #4]
 8041f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8041f94:	4986      	ldr	r1, [pc, #536]	@ (80421b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8041f96:	4313      	orrs	r3, r2
 8041f98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8041f9c:	687b      	ldr	r3, [r7, #4]
 8041f9e:	681b      	ldr	r3, [r3, #0]
 8041fa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8041fa4:	2b00      	cmp	r3, #0
 8041fa6:	d00b      	beq.n	8041fc0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8041fa8:	4b81      	ldr	r3, [pc, #516]	@ (80421b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8041faa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8041fae:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8041fb2:	687b      	ldr	r3, [r7, #4]
 8041fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8041fb8:	497d      	ldr	r1, [pc, #500]	@ (80421b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8041fba:	4313      	orrs	r3, r2
 8041fbc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8041fc0:	69fb      	ldr	r3, [r7, #28]
 8041fc2:	2b01      	cmp	r3, #1
 8041fc4:	d006      	beq.n	8041fd4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8041fc6:	687b      	ldr	r3, [r7, #4]
 8041fc8:	681b      	ldr	r3, [r3, #0]
 8041fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8041fce:	2b00      	cmp	r3, #0
 8041fd0:	f000 80d6 	beq.w	8042180 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8041fd4:	4b76      	ldr	r3, [pc, #472]	@ (80421b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8041fd6:	681b      	ldr	r3, [r3, #0]
 8041fd8:	4a75      	ldr	r2, [pc, #468]	@ (80421b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8041fda:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8041fde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8041fe0:	f7fe fd72 	bl	8040ac8 <HAL_GetTick>
 8041fe4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8041fe6:	e008      	b.n	8041ffa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8041fe8:	f7fe fd6e 	bl	8040ac8 <HAL_GetTick>
 8041fec:	4602      	mov	r2, r0
 8041fee:	697b      	ldr	r3, [r7, #20]
 8041ff0:	1ad3      	subs	r3, r2, r3
 8041ff2:	2b64      	cmp	r3, #100	@ 0x64
 8041ff4:	d901      	bls.n	8041ffa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8041ff6:	2303      	movs	r3, #3
 8041ff8:	e195      	b.n	8042326 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8041ffa:	4b6d      	ldr	r3, [pc, #436]	@ (80421b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8041ffc:	681b      	ldr	r3, [r3, #0]
 8041ffe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8042002:	2b00      	cmp	r3, #0
 8042004:	d1f0      	bne.n	8041fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8042006:	687b      	ldr	r3, [r7, #4]
 8042008:	681b      	ldr	r3, [r3, #0]
 804200a:	f003 0301 	and.w	r3, r3, #1
 804200e:	2b00      	cmp	r3, #0
 8042010:	d021      	beq.n	8042056 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8042012:	687b      	ldr	r3, [r7, #4]
 8042014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8042016:	2b00      	cmp	r3, #0
 8042018:	d11d      	bne.n	8042056 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 804201a:	4b65      	ldr	r3, [pc, #404]	@ (80421b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 804201c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8042020:	0c1b      	lsrs	r3, r3, #16
 8042022:	f003 0303 	and.w	r3, r3, #3
 8042026:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8042028:	4b61      	ldr	r3, [pc, #388]	@ (80421b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 804202a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 804202e:	0e1b      	lsrs	r3, r3, #24
 8042030:	f003 030f 	and.w	r3, r3, #15
 8042034:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8042036:	687b      	ldr	r3, [r7, #4]
 8042038:	685b      	ldr	r3, [r3, #4]
 804203a:	019a      	lsls	r2, r3, #6
 804203c:	693b      	ldr	r3, [r7, #16]
 804203e:	041b      	lsls	r3, r3, #16
 8042040:	431a      	orrs	r2, r3
 8042042:	68fb      	ldr	r3, [r7, #12]
 8042044:	061b      	lsls	r3, r3, #24
 8042046:	431a      	orrs	r2, r3
 8042048:	687b      	ldr	r3, [r7, #4]
 804204a:	689b      	ldr	r3, [r3, #8]
 804204c:	071b      	lsls	r3, r3, #28
 804204e:	4958      	ldr	r1, [pc, #352]	@ (80421b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042050:	4313      	orrs	r3, r2
 8042052:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8042056:	687b      	ldr	r3, [r7, #4]
 8042058:	681b      	ldr	r3, [r3, #0]
 804205a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 804205e:	2b00      	cmp	r3, #0
 8042060:	d004      	beq.n	804206c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8042062:	687b      	ldr	r3, [r7, #4]
 8042064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8042066:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 804206a:	d00a      	beq.n	8042082 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 804206c:	687b      	ldr	r3, [r7, #4]
 804206e:	681b      	ldr	r3, [r3, #0]
 8042070:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8042074:	2b00      	cmp	r3, #0
 8042076:	d02e      	beq.n	80420d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8042078:	687b      	ldr	r3, [r7, #4]
 804207a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804207c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8042080:	d129      	bne.n	80420d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8042082:	4b4b      	ldr	r3, [pc, #300]	@ (80421b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042084:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8042088:	0c1b      	lsrs	r3, r3, #16
 804208a:	f003 0303 	and.w	r3, r3, #3
 804208e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8042090:	4b47      	ldr	r3, [pc, #284]	@ (80421b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042092:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8042096:	0f1b      	lsrs	r3, r3, #28
 8042098:	f003 0307 	and.w	r3, r3, #7
 804209c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 804209e:	687b      	ldr	r3, [r7, #4]
 80420a0:	685b      	ldr	r3, [r3, #4]
 80420a2:	019a      	lsls	r2, r3, #6
 80420a4:	693b      	ldr	r3, [r7, #16]
 80420a6:	041b      	lsls	r3, r3, #16
 80420a8:	431a      	orrs	r2, r3
 80420aa:	687b      	ldr	r3, [r7, #4]
 80420ac:	68db      	ldr	r3, [r3, #12]
 80420ae:	061b      	lsls	r3, r3, #24
 80420b0:	431a      	orrs	r2, r3
 80420b2:	68fb      	ldr	r3, [r7, #12]
 80420b4:	071b      	lsls	r3, r3, #28
 80420b6:	493e      	ldr	r1, [pc, #248]	@ (80421b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80420b8:	4313      	orrs	r3, r2
 80420ba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80420be:	4b3c      	ldr	r3, [pc, #240]	@ (80421b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80420c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80420c4:	f023 021f 	bic.w	r2, r3, #31
 80420c8:	687b      	ldr	r3, [r7, #4]
 80420ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80420cc:	3b01      	subs	r3, #1
 80420ce:	4938      	ldr	r1, [pc, #224]	@ (80421b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80420d0:	4313      	orrs	r3, r2
 80420d2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80420d6:	687b      	ldr	r3, [r7, #4]
 80420d8:	681b      	ldr	r3, [r3, #0]
 80420da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80420de:	2b00      	cmp	r3, #0
 80420e0:	d01d      	beq.n	804211e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80420e2:	4b33      	ldr	r3, [pc, #204]	@ (80421b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80420e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80420e8:	0e1b      	lsrs	r3, r3, #24
 80420ea:	f003 030f 	and.w	r3, r3, #15
 80420ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80420f0:	4b2f      	ldr	r3, [pc, #188]	@ (80421b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80420f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80420f6:	0f1b      	lsrs	r3, r3, #28
 80420f8:	f003 0307 	and.w	r3, r3, #7
 80420fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80420fe:	687b      	ldr	r3, [r7, #4]
 8042100:	685b      	ldr	r3, [r3, #4]
 8042102:	019a      	lsls	r2, r3, #6
 8042104:	687b      	ldr	r3, [r7, #4]
 8042106:	691b      	ldr	r3, [r3, #16]
 8042108:	041b      	lsls	r3, r3, #16
 804210a:	431a      	orrs	r2, r3
 804210c:	693b      	ldr	r3, [r7, #16]
 804210e:	061b      	lsls	r3, r3, #24
 8042110:	431a      	orrs	r2, r3
 8042112:	68fb      	ldr	r3, [r7, #12]
 8042114:	071b      	lsls	r3, r3, #28
 8042116:	4926      	ldr	r1, [pc, #152]	@ (80421b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042118:	4313      	orrs	r3, r2
 804211a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 804211e:	687b      	ldr	r3, [r7, #4]
 8042120:	681b      	ldr	r3, [r3, #0]
 8042122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8042126:	2b00      	cmp	r3, #0
 8042128:	d011      	beq.n	804214e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 804212a:	687b      	ldr	r3, [r7, #4]
 804212c:	685b      	ldr	r3, [r3, #4]
 804212e:	019a      	lsls	r2, r3, #6
 8042130:	687b      	ldr	r3, [r7, #4]
 8042132:	691b      	ldr	r3, [r3, #16]
 8042134:	041b      	lsls	r3, r3, #16
 8042136:	431a      	orrs	r2, r3
 8042138:	687b      	ldr	r3, [r7, #4]
 804213a:	68db      	ldr	r3, [r3, #12]
 804213c:	061b      	lsls	r3, r3, #24
 804213e:	431a      	orrs	r2, r3
 8042140:	687b      	ldr	r3, [r7, #4]
 8042142:	689b      	ldr	r3, [r3, #8]
 8042144:	071b      	lsls	r3, r3, #28
 8042146:	491a      	ldr	r1, [pc, #104]	@ (80421b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042148:	4313      	orrs	r3, r2
 804214a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 804214e:	4b18      	ldr	r3, [pc, #96]	@ (80421b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042150:	681b      	ldr	r3, [r3, #0]
 8042152:	4a17      	ldr	r2, [pc, #92]	@ (80421b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042154:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8042158:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 804215a:	f7fe fcb5 	bl	8040ac8 <HAL_GetTick>
 804215e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8042160:	e008      	b.n	8042174 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8042162:	f7fe fcb1 	bl	8040ac8 <HAL_GetTick>
 8042166:	4602      	mov	r2, r0
 8042168:	697b      	ldr	r3, [r7, #20]
 804216a:	1ad3      	subs	r3, r2, r3
 804216c:	2b64      	cmp	r3, #100	@ 0x64
 804216e:	d901      	bls.n	8042174 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8042170:	2303      	movs	r3, #3
 8042172:	e0d8      	b.n	8042326 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8042174:	4b0e      	ldr	r3, [pc, #56]	@ (80421b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042176:	681b      	ldr	r3, [r3, #0]
 8042178:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 804217c:	2b00      	cmp	r3, #0
 804217e:	d0f0      	beq.n	8042162 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8042180:	69bb      	ldr	r3, [r7, #24]
 8042182:	2b01      	cmp	r3, #1
 8042184:	f040 80ce 	bne.w	8042324 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8042188:	4b09      	ldr	r3, [pc, #36]	@ (80421b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 804218a:	681b      	ldr	r3, [r3, #0]
 804218c:	4a08      	ldr	r2, [pc, #32]	@ (80421b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 804218e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8042192:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8042194:	f7fe fc98 	bl	8040ac8 <HAL_GetTick>
 8042198:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 804219a:	e00b      	b.n	80421b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 804219c:	f7fe fc94 	bl	8040ac8 <HAL_GetTick>
 80421a0:	4602      	mov	r2, r0
 80421a2:	697b      	ldr	r3, [r7, #20]
 80421a4:	1ad3      	subs	r3, r2, r3
 80421a6:	2b64      	cmp	r3, #100	@ 0x64
 80421a8:	d904      	bls.n	80421b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80421aa:	2303      	movs	r3, #3
 80421ac:	e0bb      	b.n	8042326 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80421ae:	bf00      	nop
 80421b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80421b4:	4b5e      	ldr	r3, [pc, #376]	@ (8042330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80421b6:	681b      	ldr	r3, [r3, #0]
 80421b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80421bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80421c0:	d0ec      	beq.n	804219c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80421c2:	687b      	ldr	r3, [r7, #4]
 80421c4:	681b      	ldr	r3, [r3, #0]
 80421c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80421ca:	2b00      	cmp	r3, #0
 80421cc:	d003      	beq.n	80421d6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80421ce:	687b      	ldr	r3, [r7, #4]
 80421d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80421d2:	2b00      	cmp	r3, #0
 80421d4:	d009      	beq.n	80421ea <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80421d6:	687b      	ldr	r3, [r7, #4]
 80421d8:	681b      	ldr	r3, [r3, #0]
 80421da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80421de:	2b00      	cmp	r3, #0
 80421e0:	d02e      	beq.n	8042240 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80421e2:	687b      	ldr	r3, [r7, #4]
 80421e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80421e6:	2b00      	cmp	r3, #0
 80421e8:	d12a      	bne.n	8042240 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80421ea:	4b51      	ldr	r3, [pc, #324]	@ (8042330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80421ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80421f0:	0c1b      	lsrs	r3, r3, #16
 80421f2:	f003 0303 	and.w	r3, r3, #3
 80421f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80421f8:	4b4d      	ldr	r3, [pc, #308]	@ (8042330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80421fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80421fe:	0f1b      	lsrs	r3, r3, #28
 8042200:	f003 0307 	and.w	r3, r3, #7
 8042204:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8042206:	687b      	ldr	r3, [r7, #4]
 8042208:	695b      	ldr	r3, [r3, #20]
 804220a:	019a      	lsls	r2, r3, #6
 804220c:	693b      	ldr	r3, [r7, #16]
 804220e:	041b      	lsls	r3, r3, #16
 8042210:	431a      	orrs	r2, r3
 8042212:	687b      	ldr	r3, [r7, #4]
 8042214:	699b      	ldr	r3, [r3, #24]
 8042216:	061b      	lsls	r3, r3, #24
 8042218:	431a      	orrs	r2, r3
 804221a:	68fb      	ldr	r3, [r7, #12]
 804221c:	071b      	lsls	r3, r3, #28
 804221e:	4944      	ldr	r1, [pc, #272]	@ (8042330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042220:	4313      	orrs	r3, r2
 8042222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8042226:	4b42      	ldr	r3, [pc, #264]	@ (8042330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042228:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 804222c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8042230:	687b      	ldr	r3, [r7, #4]
 8042232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8042234:	3b01      	subs	r3, #1
 8042236:	021b      	lsls	r3, r3, #8
 8042238:	493d      	ldr	r1, [pc, #244]	@ (8042330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 804223a:	4313      	orrs	r3, r2
 804223c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8042240:	687b      	ldr	r3, [r7, #4]
 8042242:	681b      	ldr	r3, [r3, #0]
 8042244:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8042248:	2b00      	cmp	r3, #0
 804224a:	d022      	beq.n	8042292 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 804224c:	687b      	ldr	r3, [r7, #4]
 804224e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8042250:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8042254:	d11d      	bne.n	8042292 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8042256:	4b36      	ldr	r3, [pc, #216]	@ (8042330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 804225c:	0e1b      	lsrs	r3, r3, #24
 804225e:	f003 030f 	and.w	r3, r3, #15
 8042262:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8042264:	4b32      	ldr	r3, [pc, #200]	@ (8042330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 804226a:	0f1b      	lsrs	r3, r3, #28
 804226c:	f003 0307 	and.w	r3, r3, #7
 8042270:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8042272:	687b      	ldr	r3, [r7, #4]
 8042274:	695b      	ldr	r3, [r3, #20]
 8042276:	019a      	lsls	r2, r3, #6
 8042278:	687b      	ldr	r3, [r7, #4]
 804227a:	6a1b      	ldr	r3, [r3, #32]
 804227c:	041b      	lsls	r3, r3, #16
 804227e:	431a      	orrs	r2, r3
 8042280:	693b      	ldr	r3, [r7, #16]
 8042282:	061b      	lsls	r3, r3, #24
 8042284:	431a      	orrs	r2, r3
 8042286:	68fb      	ldr	r3, [r7, #12]
 8042288:	071b      	lsls	r3, r3, #28
 804228a:	4929      	ldr	r1, [pc, #164]	@ (8042330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 804228c:	4313      	orrs	r3, r2
 804228e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8042292:	687b      	ldr	r3, [r7, #4]
 8042294:	681b      	ldr	r3, [r3, #0]
 8042296:	f003 0308 	and.w	r3, r3, #8
 804229a:	2b00      	cmp	r3, #0
 804229c:	d028      	beq.n	80422f0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 804229e:	4b24      	ldr	r3, [pc, #144]	@ (8042330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80422a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80422a4:	0e1b      	lsrs	r3, r3, #24
 80422a6:	f003 030f 	and.w	r3, r3, #15
 80422aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80422ac:	4b20      	ldr	r3, [pc, #128]	@ (8042330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80422ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80422b2:	0c1b      	lsrs	r3, r3, #16
 80422b4:	f003 0303 	and.w	r3, r3, #3
 80422b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80422ba:	687b      	ldr	r3, [r7, #4]
 80422bc:	695b      	ldr	r3, [r3, #20]
 80422be:	019a      	lsls	r2, r3, #6
 80422c0:	68fb      	ldr	r3, [r7, #12]
 80422c2:	041b      	lsls	r3, r3, #16
 80422c4:	431a      	orrs	r2, r3
 80422c6:	693b      	ldr	r3, [r7, #16]
 80422c8:	061b      	lsls	r3, r3, #24
 80422ca:	431a      	orrs	r2, r3
 80422cc:	687b      	ldr	r3, [r7, #4]
 80422ce:	69db      	ldr	r3, [r3, #28]
 80422d0:	071b      	lsls	r3, r3, #28
 80422d2:	4917      	ldr	r1, [pc, #92]	@ (8042330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80422d4:	4313      	orrs	r3, r2
 80422d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80422da:	4b15      	ldr	r3, [pc, #84]	@ (8042330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80422dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80422e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80422e4:	687b      	ldr	r3, [r7, #4]
 80422e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80422e8:	4911      	ldr	r1, [pc, #68]	@ (8042330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80422ea:	4313      	orrs	r3, r2
 80422ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80422f0:	4b0f      	ldr	r3, [pc, #60]	@ (8042330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80422f2:	681b      	ldr	r3, [r3, #0]
 80422f4:	4a0e      	ldr	r2, [pc, #56]	@ (8042330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80422f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80422fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80422fc:	f7fe fbe4 	bl	8040ac8 <HAL_GetTick>
 8042300:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8042302:	e008      	b.n	8042316 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8042304:	f7fe fbe0 	bl	8040ac8 <HAL_GetTick>
 8042308:	4602      	mov	r2, r0
 804230a:	697b      	ldr	r3, [r7, #20]
 804230c:	1ad3      	subs	r3, r2, r3
 804230e:	2b64      	cmp	r3, #100	@ 0x64
 8042310:	d901      	bls.n	8042316 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8042312:	2303      	movs	r3, #3
 8042314:	e007      	b.n	8042326 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8042316:	4b06      	ldr	r3, [pc, #24]	@ (8042330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042318:	681b      	ldr	r3, [r3, #0]
 804231a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 804231e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8042322:	d1ef      	bne.n	8042304 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8042324:	2300      	movs	r3, #0
}
 8042326:	4618      	mov	r0, r3
 8042328:	3720      	adds	r7, #32
 804232a:	46bd      	mov	sp, r7
 804232c:	bd80      	pop	{r7, pc}
 804232e:	bf00      	nop
 8042330:	40023800 	.word	0x40023800

08042334 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8042334:	b580      	push	{r7, lr}
 8042336:	b082      	sub	sp, #8
 8042338:	af00      	add	r7, sp, #0
 804233a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 804233c:	687b      	ldr	r3, [r7, #4]
 804233e:	2b00      	cmp	r3, #0
 8042340:	d101      	bne.n	8042346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8042342:	2301      	movs	r3, #1
 8042344:	e040      	b.n	80423c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8042346:	687b      	ldr	r3, [r7, #4]
 8042348:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 804234a:	2b00      	cmp	r3, #0
 804234c:	d106      	bne.n	804235c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 804234e:	687b      	ldr	r3, [r7, #4]
 8042350:	2200      	movs	r2, #0
 8042352:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8042356:	6878      	ldr	r0, [r7, #4]
 8042358:	f7fe fa9a 	bl	8040890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 804235c:	687b      	ldr	r3, [r7, #4]
 804235e:	2224      	movs	r2, #36	@ 0x24
 8042360:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8042362:	687b      	ldr	r3, [r7, #4]
 8042364:	681b      	ldr	r3, [r3, #0]
 8042366:	681a      	ldr	r2, [r3, #0]
 8042368:	687b      	ldr	r3, [r7, #4]
 804236a:	681b      	ldr	r3, [r3, #0]
 804236c:	f022 0201 	bic.w	r2, r2, #1
 8042370:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8042372:	687b      	ldr	r3, [r7, #4]
 8042374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042376:	2b00      	cmp	r3, #0
 8042378:	d002      	beq.n	8042380 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 804237a:	6878      	ldr	r0, [r7, #4]
 804237c:	f000 fb16 	bl	80429ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8042380:	6878      	ldr	r0, [r7, #4]
 8042382:	f000 f8af 	bl	80424e4 <UART_SetConfig>
 8042386:	4603      	mov	r3, r0
 8042388:	2b01      	cmp	r3, #1
 804238a:	d101      	bne.n	8042390 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 804238c:	2301      	movs	r3, #1
 804238e:	e01b      	b.n	80423c8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8042390:	687b      	ldr	r3, [r7, #4]
 8042392:	681b      	ldr	r3, [r3, #0]
 8042394:	685a      	ldr	r2, [r3, #4]
 8042396:	687b      	ldr	r3, [r7, #4]
 8042398:	681b      	ldr	r3, [r3, #0]
 804239a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 804239e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80423a0:	687b      	ldr	r3, [r7, #4]
 80423a2:	681b      	ldr	r3, [r3, #0]
 80423a4:	689a      	ldr	r2, [r3, #8]
 80423a6:	687b      	ldr	r3, [r7, #4]
 80423a8:	681b      	ldr	r3, [r3, #0]
 80423aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80423ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80423b0:	687b      	ldr	r3, [r7, #4]
 80423b2:	681b      	ldr	r3, [r3, #0]
 80423b4:	681a      	ldr	r2, [r3, #0]
 80423b6:	687b      	ldr	r3, [r7, #4]
 80423b8:	681b      	ldr	r3, [r3, #0]
 80423ba:	f042 0201 	orr.w	r2, r2, #1
 80423be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80423c0:	6878      	ldr	r0, [r7, #4]
 80423c2:	f000 fb95 	bl	8042af0 <UART_CheckIdleState>
 80423c6:	4603      	mov	r3, r0
}
 80423c8:	4618      	mov	r0, r3
 80423ca:	3708      	adds	r7, #8
 80423cc:	46bd      	mov	sp, r7
 80423ce:	bd80      	pop	{r7, pc}

080423d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80423d0:	b580      	push	{r7, lr}
 80423d2:	b08a      	sub	sp, #40	@ 0x28
 80423d4:	af02      	add	r7, sp, #8
 80423d6:	60f8      	str	r0, [r7, #12]
 80423d8:	60b9      	str	r1, [r7, #8]
 80423da:	603b      	str	r3, [r7, #0]
 80423dc:	4613      	mov	r3, r2
 80423de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80423e0:	68fb      	ldr	r3, [r7, #12]
 80423e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80423e4:	2b20      	cmp	r3, #32
 80423e6:	d177      	bne.n	80424d8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80423e8:	68bb      	ldr	r3, [r7, #8]
 80423ea:	2b00      	cmp	r3, #0
 80423ec:	d002      	beq.n	80423f4 <HAL_UART_Transmit+0x24>
 80423ee:	88fb      	ldrh	r3, [r7, #6]
 80423f0:	2b00      	cmp	r3, #0
 80423f2:	d101      	bne.n	80423f8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80423f4:	2301      	movs	r3, #1
 80423f6:	e070      	b.n	80424da <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80423f8:	68fb      	ldr	r3, [r7, #12]
 80423fa:	2200      	movs	r2, #0
 80423fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8042400:	68fb      	ldr	r3, [r7, #12]
 8042402:	2221      	movs	r2, #33	@ 0x21
 8042404:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8042406:	f7fe fb5f 	bl	8040ac8 <HAL_GetTick>
 804240a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 804240c:	68fb      	ldr	r3, [r7, #12]
 804240e:	88fa      	ldrh	r2, [r7, #6]
 8042410:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8042414:	68fb      	ldr	r3, [r7, #12]
 8042416:	88fa      	ldrh	r2, [r7, #6]
 8042418:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 804241c:	68fb      	ldr	r3, [r7, #12]
 804241e:	689b      	ldr	r3, [r3, #8]
 8042420:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8042424:	d108      	bne.n	8042438 <HAL_UART_Transmit+0x68>
 8042426:	68fb      	ldr	r3, [r7, #12]
 8042428:	691b      	ldr	r3, [r3, #16]
 804242a:	2b00      	cmp	r3, #0
 804242c:	d104      	bne.n	8042438 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 804242e:	2300      	movs	r3, #0
 8042430:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8042432:	68bb      	ldr	r3, [r7, #8]
 8042434:	61bb      	str	r3, [r7, #24]
 8042436:	e003      	b.n	8042440 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8042438:	68bb      	ldr	r3, [r7, #8]
 804243a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 804243c:	2300      	movs	r3, #0
 804243e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8042440:	e02f      	b.n	80424a2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8042442:	683b      	ldr	r3, [r7, #0]
 8042444:	9300      	str	r3, [sp, #0]
 8042446:	697b      	ldr	r3, [r7, #20]
 8042448:	2200      	movs	r2, #0
 804244a:	2180      	movs	r1, #128	@ 0x80
 804244c:	68f8      	ldr	r0, [r7, #12]
 804244e:	f000 fbf7 	bl	8042c40 <UART_WaitOnFlagUntilTimeout>
 8042452:	4603      	mov	r3, r0
 8042454:	2b00      	cmp	r3, #0
 8042456:	d004      	beq.n	8042462 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8042458:	68fb      	ldr	r3, [r7, #12]
 804245a:	2220      	movs	r2, #32
 804245c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 804245e:	2303      	movs	r3, #3
 8042460:	e03b      	b.n	80424da <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8042462:	69fb      	ldr	r3, [r7, #28]
 8042464:	2b00      	cmp	r3, #0
 8042466:	d10b      	bne.n	8042480 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8042468:	69bb      	ldr	r3, [r7, #24]
 804246a:	881b      	ldrh	r3, [r3, #0]
 804246c:	461a      	mov	r2, r3
 804246e:	68fb      	ldr	r3, [r7, #12]
 8042470:	681b      	ldr	r3, [r3, #0]
 8042472:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8042476:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8042478:	69bb      	ldr	r3, [r7, #24]
 804247a:	3302      	adds	r3, #2
 804247c:	61bb      	str	r3, [r7, #24]
 804247e:	e007      	b.n	8042490 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8042480:	69fb      	ldr	r3, [r7, #28]
 8042482:	781a      	ldrb	r2, [r3, #0]
 8042484:	68fb      	ldr	r3, [r7, #12]
 8042486:	681b      	ldr	r3, [r3, #0]
 8042488:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 804248a:	69fb      	ldr	r3, [r7, #28]
 804248c:	3301      	adds	r3, #1
 804248e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8042490:	68fb      	ldr	r3, [r7, #12]
 8042492:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8042496:	b29b      	uxth	r3, r3
 8042498:	3b01      	subs	r3, #1
 804249a:	b29a      	uxth	r2, r3
 804249c:	68fb      	ldr	r3, [r7, #12]
 804249e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80424a2:	68fb      	ldr	r3, [r7, #12]
 80424a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80424a8:	b29b      	uxth	r3, r3
 80424aa:	2b00      	cmp	r3, #0
 80424ac:	d1c9      	bne.n	8042442 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80424ae:	683b      	ldr	r3, [r7, #0]
 80424b0:	9300      	str	r3, [sp, #0]
 80424b2:	697b      	ldr	r3, [r7, #20]
 80424b4:	2200      	movs	r2, #0
 80424b6:	2140      	movs	r1, #64	@ 0x40
 80424b8:	68f8      	ldr	r0, [r7, #12]
 80424ba:	f000 fbc1 	bl	8042c40 <UART_WaitOnFlagUntilTimeout>
 80424be:	4603      	mov	r3, r0
 80424c0:	2b00      	cmp	r3, #0
 80424c2:	d004      	beq.n	80424ce <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80424c4:	68fb      	ldr	r3, [r7, #12]
 80424c6:	2220      	movs	r2, #32
 80424c8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80424ca:	2303      	movs	r3, #3
 80424cc:	e005      	b.n	80424da <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80424ce:	68fb      	ldr	r3, [r7, #12]
 80424d0:	2220      	movs	r2, #32
 80424d2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80424d4:	2300      	movs	r3, #0
 80424d6:	e000      	b.n	80424da <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80424d8:	2302      	movs	r3, #2
  }
}
 80424da:	4618      	mov	r0, r3
 80424dc:	3720      	adds	r7, #32
 80424de:	46bd      	mov	sp, r7
 80424e0:	bd80      	pop	{r7, pc}
	...

080424e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80424e4:	b580      	push	{r7, lr}
 80424e6:	b088      	sub	sp, #32
 80424e8:	af00      	add	r7, sp, #0
 80424ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80424ec:	2300      	movs	r3, #0
 80424ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80424f0:	687b      	ldr	r3, [r7, #4]
 80424f2:	689a      	ldr	r2, [r3, #8]
 80424f4:	687b      	ldr	r3, [r7, #4]
 80424f6:	691b      	ldr	r3, [r3, #16]
 80424f8:	431a      	orrs	r2, r3
 80424fa:	687b      	ldr	r3, [r7, #4]
 80424fc:	695b      	ldr	r3, [r3, #20]
 80424fe:	431a      	orrs	r2, r3
 8042500:	687b      	ldr	r3, [r7, #4]
 8042502:	69db      	ldr	r3, [r3, #28]
 8042504:	4313      	orrs	r3, r2
 8042506:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8042508:	687b      	ldr	r3, [r7, #4]
 804250a:	681b      	ldr	r3, [r3, #0]
 804250c:	681a      	ldr	r2, [r3, #0]
 804250e:	4ba6      	ldr	r3, [pc, #664]	@ (80427a8 <UART_SetConfig+0x2c4>)
 8042510:	4013      	ands	r3, r2
 8042512:	687a      	ldr	r2, [r7, #4]
 8042514:	6812      	ldr	r2, [r2, #0]
 8042516:	6979      	ldr	r1, [r7, #20]
 8042518:	430b      	orrs	r3, r1
 804251a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 804251c:	687b      	ldr	r3, [r7, #4]
 804251e:	681b      	ldr	r3, [r3, #0]
 8042520:	685b      	ldr	r3, [r3, #4]
 8042522:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8042526:	687b      	ldr	r3, [r7, #4]
 8042528:	68da      	ldr	r2, [r3, #12]
 804252a:	687b      	ldr	r3, [r7, #4]
 804252c:	681b      	ldr	r3, [r3, #0]
 804252e:	430a      	orrs	r2, r1
 8042530:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8042532:	687b      	ldr	r3, [r7, #4]
 8042534:	699b      	ldr	r3, [r3, #24]
 8042536:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8042538:	687b      	ldr	r3, [r7, #4]
 804253a:	6a1b      	ldr	r3, [r3, #32]
 804253c:	697a      	ldr	r2, [r7, #20]
 804253e:	4313      	orrs	r3, r2
 8042540:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8042542:	687b      	ldr	r3, [r7, #4]
 8042544:	681b      	ldr	r3, [r3, #0]
 8042546:	689b      	ldr	r3, [r3, #8]
 8042548:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 804254c:	687b      	ldr	r3, [r7, #4]
 804254e:	681b      	ldr	r3, [r3, #0]
 8042550:	697a      	ldr	r2, [r7, #20]
 8042552:	430a      	orrs	r2, r1
 8042554:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8042556:	687b      	ldr	r3, [r7, #4]
 8042558:	681b      	ldr	r3, [r3, #0]
 804255a:	4a94      	ldr	r2, [pc, #592]	@ (80427ac <UART_SetConfig+0x2c8>)
 804255c:	4293      	cmp	r3, r2
 804255e:	d120      	bne.n	80425a2 <UART_SetConfig+0xbe>
 8042560:	4b93      	ldr	r3, [pc, #588]	@ (80427b0 <UART_SetConfig+0x2cc>)
 8042562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8042566:	f003 0303 	and.w	r3, r3, #3
 804256a:	2b03      	cmp	r3, #3
 804256c:	d816      	bhi.n	804259c <UART_SetConfig+0xb8>
 804256e:	a201      	add	r2, pc, #4	@ (adr r2, 8042574 <UART_SetConfig+0x90>)
 8042570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042574:	08042585 	.word	0x08042585
 8042578:	08042591 	.word	0x08042591
 804257c:	0804258b 	.word	0x0804258b
 8042580:	08042597 	.word	0x08042597
 8042584:	2301      	movs	r3, #1
 8042586:	77fb      	strb	r3, [r7, #31]
 8042588:	e150      	b.n	804282c <UART_SetConfig+0x348>
 804258a:	2302      	movs	r3, #2
 804258c:	77fb      	strb	r3, [r7, #31]
 804258e:	e14d      	b.n	804282c <UART_SetConfig+0x348>
 8042590:	2304      	movs	r3, #4
 8042592:	77fb      	strb	r3, [r7, #31]
 8042594:	e14a      	b.n	804282c <UART_SetConfig+0x348>
 8042596:	2308      	movs	r3, #8
 8042598:	77fb      	strb	r3, [r7, #31]
 804259a:	e147      	b.n	804282c <UART_SetConfig+0x348>
 804259c:	2310      	movs	r3, #16
 804259e:	77fb      	strb	r3, [r7, #31]
 80425a0:	e144      	b.n	804282c <UART_SetConfig+0x348>
 80425a2:	687b      	ldr	r3, [r7, #4]
 80425a4:	681b      	ldr	r3, [r3, #0]
 80425a6:	4a83      	ldr	r2, [pc, #524]	@ (80427b4 <UART_SetConfig+0x2d0>)
 80425a8:	4293      	cmp	r3, r2
 80425aa:	d132      	bne.n	8042612 <UART_SetConfig+0x12e>
 80425ac:	4b80      	ldr	r3, [pc, #512]	@ (80427b0 <UART_SetConfig+0x2cc>)
 80425ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80425b2:	f003 030c 	and.w	r3, r3, #12
 80425b6:	2b0c      	cmp	r3, #12
 80425b8:	d828      	bhi.n	804260c <UART_SetConfig+0x128>
 80425ba:	a201      	add	r2, pc, #4	@ (adr r2, 80425c0 <UART_SetConfig+0xdc>)
 80425bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80425c0:	080425f5 	.word	0x080425f5
 80425c4:	0804260d 	.word	0x0804260d
 80425c8:	0804260d 	.word	0x0804260d
 80425cc:	0804260d 	.word	0x0804260d
 80425d0:	08042601 	.word	0x08042601
 80425d4:	0804260d 	.word	0x0804260d
 80425d8:	0804260d 	.word	0x0804260d
 80425dc:	0804260d 	.word	0x0804260d
 80425e0:	080425fb 	.word	0x080425fb
 80425e4:	0804260d 	.word	0x0804260d
 80425e8:	0804260d 	.word	0x0804260d
 80425ec:	0804260d 	.word	0x0804260d
 80425f0:	08042607 	.word	0x08042607
 80425f4:	2300      	movs	r3, #0
 80425f6:	77fb      	strb	r3, [r7, #31]
 80425f8:	e118      	b.n	804282c <UART_SetConfig+0x348>
 80425fa:	2302      	movs	r3, #2
 80425fc:	77fb      	strb	r3, [r7, #31]
 80425fe:	e115      	b.n	804282c <UART_SetConfig+0x348>
 8042600:	2304      	movs	r3, #4
 8042602:	77fb      	strb	r3, [r7, #31]
 8042604:	e112      	b.n	804282c <UART_SetConfig+0x348>
 8042606:	2308      	movs	r3, #8
 8042608:	77fb      	strb	r3, [r7, #31]
 804260a:	e10f      	b.n	804282c <UART_SetConfig+0x348>
 804260c:	2310      	movs	r3, #16
 804260e:	77fb      	strb	r3, [r7, #31]
 8042610:	e10c      	b.n	804282c <UART_SetConfig+0x348>
 8042612:	687b      	ldr	r3, [r7, #4]
 8042614:	681b      	ldr	r3, [r3, #0]
 8042616:	4a68      	ldr	r2, [pc, #416]	@ (80427b8 <UART_SetConfig+0x2d4>)
 8042618:	4293      	cmp	r3, r2
 804261a:	d120      	bne.n	804265e <UART_SetConfig+0x17a>
 804261c:	4b64      	ldr	r3, [pc, #400]	@ (80427b0 <UART_SetConfig+0x2cc>)
 804261e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8042622:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8042626:	2b30      	cmp	r3, #48	@ 0x30
 8042628:	d013      	beq.n	8042652 <UART_SetConfig+0x16e>
 804262a:	2b30      	cmp	r3, #48	@ 0x30
 804262c:	d814      	bhi.n	8042658 <UART_SetConfig+0x174>
 804262e:	2b20      	cmp	r3, #32
 8042630:	d009      	beq.n	8042646 <UART_SetConfig+0x162>
 8042632:	2b20      	cmp	r3, #32
 8042634:	d810      	bhi.n	8042658 <UART_SetConfig+0x174>
 8042636:	2b00      	cmp	r3, #0
 8042638:	d002      	beq.n	8042640 <UART_SetConfig+0x15c>
 804263a:	2b10      	cmp	r3, #16
 804263c:	d006      	beq.n	804264c <UART_SetConfig+0x168>
 804263e:	e00b      	b.n	8042658 <UART_SetConfig+0x174>
 8042640:	2300      	movs	r3, #0
 8042642:	77fb      	strb	r3, [r7, #31]
 8042644:	e0f2      	b.n	804282c <UART_SetConfig+0x348>
 8042646:	2302      	movs	r3, #2
 8042648:	77fb      	strb	r3, [r7, #31]
 804264a:	e0ef      	b.n	804282c <UART_SetConfig+0x348>
 804264c:	2304      	movs	r3, #4
 804264e:	77fb      	strb	r3, [r7, #31]
 8042650:	e0ec      	b.n	804282c <UART_SetConfig+0x348>
 8042652:	2308      	movs	r3, #8
 8042654:	77fb      	strb	r3, [r7, #31]
 8042656:	e0e9      	b.n	804282c <UART_SetConfig+0x348>
 8042658:	2310      	movs	r3, #16
 804265a:	77fb      	strb	r3, [r7, #31]
 804265c:	e0e6      	b.n	804282c <UART_SetConfig+0x348>
 804265e:	687b      	ldr	r3, [r7, #4]
 8042660:	681b      	ldr	r3, [r3, #0]
 8042662:	4a56      	ldr	r2, [pc, #344]	@ (80427bc <UART_SetConfig+0x2d8>)
 8042664:	4293      	cmp	r3, r2
 8042666:	d120      	bne.n	80426aa <UART_SetConfig+0x1c6>
 8042668:	4b51      	ldr	r3, [pc, #324]	@ (80427b0 <UART_SetConfig+0x2cc>)
 804266a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 804266e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8042672:	2bc0      	cmp	r3, #192	@ 0xc0
 8042674:	d013      	beq.n	804269e <UART_SetConfig+0x1ba>
 8042676:	2bc0      	cmp	r3, #192	@ 0xc0
 8042678:	d814      	bhi.n	80426a4 <UART_SetConfig+0x1c0>
 804267a:	2b80      	cmp	r3, #128	@ 0x80
 804267c:	d009      	beq.n	8042692 <UART_SetConfig+0x1ae>
 804267e:	2b80      	cmp	r3, #128	@ 0x80
 8042680:	d810      	bhi.n	80426a4 <UART_SetConfig+0x1c0>
 8042682:	2b00      	cmp	r3, #0
 8042684:	d002      	beq.n	804268c <UART_SetConfig+0x1a8>
 8042686:	2b40      	cmp	r3, #64	@ 0x40
 8042688:	d006      	beq.n	8042698 <UART_SetConfig+0x1b4>
 804268a:	e00b      	b.n	80426a4 <UART_SetConfig+0x1c0>
 804268c:	2300      	movs	r3, #0
 804268e:	77fb      	strb	r3, [r7, #31]
 8042690:	e0cc      	b.n	804282c <UART_SetConfig+0x348>
 8042692:	2302      	movs	r3, #2
 8042694:	77fb      	strb	r3, [r7, #31]
 8042696:	e0c9      	b.n	804282c <UART_SetConfig+0x348>
 8042698:	2304      	movs	r3, #4
 804269a:	77fb      	strb	r3, [r7, #31]
 804269c:	e0c6      	b.n	804282c <UART_SetConfig+0x348>
 804269e:	2308      	movs	r3, #8
 80426a0:	77fb      	strb	r3, [r7, #31]
 80426a2:	e0c3      	b.n	804282c <UART_SetConfig+0x348>
 80426a4:	2310      	movs	r3, #16
 80426a6:	77fb      	strb	r3, [r7, #31]
 80426a8:	e0c0      	b.n	804282c <UART_SetConfig+0x348>
 80426aa:	687b      	ldr	r3, [r7, #4]
 80426ac:	681b      	ldr	r3, [r3, #0]
 80426ae:	4a44      	ldr	r2, [pc, #272]	@ (80427c0 <UART_SetConfig+0x2dc>)
 80426b0:	4293      	cmp	r3, r2
 80426b2:	d125      	bne.n	8042700 <UART_SetConfig+0x21c>
 80426b4:	4b3e      	ldr	r3, [pc, #248]	@ (80427b0 <UART_SetConfig+0x2cc>)
 80426b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80426ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80426be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80426c2:	d017      	beq.n	80426f4 <UART_SetConfig+0x210>
 80426c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80426c8:	d817      	bhi.n	80426fa <UART_SetConfig+0x216>
 80426ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80426ce:	d00b      	beq.n	80426e8 <UART_SetConfig+0x204>
 80426d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80426d4:	d811      	bhi.n	80426fa <UART_SetConfig+0x216>
 80426d6:	2b00      	cmp	r3, #0
 80426d8:	d003      	beq.n	80426e2 <UART_SetConfig+0x1fe>
 80426da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80426de:	d006      	beq.n	80426ee <UART_SetConfig+0x20a>
 80426e0:	e00b      	b.n	80426fa <UART_SetConfig+0x216>
 80426e2:	2300      	movs	r3, #0
 80426e4:	77fb      	strb	r3, [r7, #31]
 80426e6:	e0a1      	b.n	804282c <UART_SetConfig+0x348>
 80426e8:	2302      	movs	r3, #2
 80426ea:	77fb      	strb	r3, [r7, #31]
 80426ec:	e09e      	b.n	804282c <UART_SetConfig+0x348>
 80426ee:	2304      	movs	r3, #4
 80426f0:	77fb      	strb	r3, [r7, #31]
 80426f2:	e09b      	b.n	804282c <UART_SetConfig+0x348>
 80426f4:	2308      	movs	r3, #8
 80426f6:	77fb      	strb	r3, [r7, #31]
 80426f8:	e098      	b.n	804282c <UART_SetConfig+0x348>
 80426fa:	2310      	movs	r3, #16
 80426fc:	77fb      	strb	r3, [r7, #31]
 80426fe:	e095      	b.n	804282c <UART_SetConfig+0x348>
 8042700:	687b      	ldr	r3, [r7, #4]
 8042702:	681b      	ldr	r3, [r3, #0]
 8042704:	4a2f      	ldr	r2, [pc, #188]	@ (80427c4 <UART_SetConfig+0x2e0>)
 8042706:	4293      	cmp	r3, r2
 8042708:	d125      	bne.n	8042756 <UART_SetConfig+0x272>
 804270a:	4b29      	ldr	r3, [pc, #164]	@ (80427b0 <UART_SetConfig+0x2cc>)
 804270c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8042710:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8042714:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8042718:	d017      	beq.n	804274a <UART_SetConfig+0x266>
 804271a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 804271e:	d817      	bhi.n	8042750 <UART_SetConfig+0x26c>
 8042720:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8042724:	d00b      	beq.n	804273e <UART_SetConfig+0x25a>
 8042726:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 804272a:	d811      	bhi.n	8042750 <UART_SetConfig+0x26c>
 804272c:	2b00      	cmp	r3, #0
 804272e:	d003      	beq.n	8042738 <UART_SetConfig+0x254>
 8042730:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8042734:	d006      	beq.n	8042744 <UART_SetConfig+0x260>
 8042736:	e00b      	b.n	8042750 <UART_SetConfig+0x26c>
 8042738:	2301      	movs	r3, #1
 804273a:	77fb      	strb	r3, [r7, #31]
 804273c:	e076      	b.n	804282c <UART_SetConfig+0x348>
 804273e:	2302      	movs	r3, #2
 8042740:	77fb      	strb	r3, [r7, #31]
 8042742:	e073      	b.n	804282c <UART_SetConfig+0x348>
 8042744:	2304      	movs	r3, #4
 8042746:	77fb      	strb	r3, [r7, #31]
 8042748:	e070      	b.n	804282c <UART_SetConfig+0x348>
 804274a:	2308      	movs	r3, #8
 804274c:	77fb      	strb	r3, [r7, #31]
 804274e:	e06d      	b.n	804282c <UART_SetConfig+0x348>
 8042750:	2310      	movs	r3, #16
 8042752:	77fb      	strb	r3, [r7, #31]
 8042754:	e06a      	b.n	804282c <UART_SetConfig+0x348>
 8042756:	687b      	ldr	r3, [r7, #4]
 8042758:	681b      	ldr	r3, [r3, #0]
 804275a:	4a1b      	ldr	r2, [pc, #108]	@ (80427c8 <UART_SetConfig+0x2e4>)
 804275c:	4293      	cmp	r3, r2
 804275e:	d138      	bne.n	80427d2 <UART_SetConfig+0x2ee>
 8042760:	4b13      	ldr	r3, [pc, #76]	@ (80427b0 <UART_SetConfig+0x2cc>)
 8042762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8042766:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 804276a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 804276e:	d017      	beq.n	80427a0 <UART_SetConfig+0x2bc>
 8042770:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8042774:	d82a      	bhi.n	80427cc <UART_SetConfig+0x2e8>
 8042776:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 804277a:	d00b      	beq.n	8042794 <UART_SetConfig+0x2b0>
 804277c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8042780:	d824      	bhi.n	80427cc <UART_SetConfig+0x2e8>
 8042782:	2b00      	cmp	r3, #0
 8042784:	d003      	beq.n	804278e <UART_SetConfig+0x2aa>
 8042786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 804278a:	d006      	beq.n	804279a <UART_SetConfig+0x2b6>
 804278c:	e01e      	b.n	80427cc <UART_SetConfig+0x2e8>
 804278e:	2300      	movs	r3, #0
 8042790:	77fb      	strb	r3, [r7, #31]
 8042792:	e04b      	b.n	804282c <UART_SetConfig+0x348>
 8042794:	2302      	movs	r3, #2
 8042796:	77fb      	strb	r3, [r7, #31]
 8042798:	e048      	b.n	804282c <UART_SetConfig+0x348>
 804279a:	2304      	movs	r3, #4
 804279c:	77fb      	strb	r3, [r7, #31]
 804279e:	e045      	b.n	804282c <UART_SetConfig+0x348>
 80427a0:	2308      	movs	r3, #8
 80427a2:	77fb      	strb	r3, [r7, #31]
 80427a4:	e042      	b.n	804282c <UART_SetConfig+0x348>
 80427a6:	bf00      	nop
 80427a8:	efff69f3 	.word	0xefff69f3
 80427ac:	40011000 	.word	0x40011000
 80427b0:	40023800 	.word	0x40023800
 80427b4:	40004400 	.word	0x40004400
 80427b8:	40004800 	.word	0x40004800
 80427bc:	40004c00 	.word	0x40004c00
 80427c0:	40005000 	.word	0x40005000
 80427c4:	40011400 	.word	0x40011400
 80427c8:	40007800 	.word	0x40007800
 80427cc:	2310      	movs	r3, #16
 80427ce:	77fb      	strb	r3, [r7, #31]
 80427d0:	e02c      	b.n	804282c <UART_SetConfig+0x348>
 80427d2:	687b      	ldr	r3, [r7, #4]
 80427d4:	681b      	ldr	r3, [r3, #0]
 80427d6:	4a72      	ldr	r2, [pc, #456]	@ (80429a0 <UART_SetConfig+0x4bc>)
 80427d8:	4293      	cmp	r3, r2
 80427da:	d125      	bne.n	8042828 <UART_SetConfig+0x344>
 80427dc:	4b71      	ldr	r3, [pc, #452]	@ (80429a4 <UART_SetConfig+0x4c0>)
 80427de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80427e2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80427e6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80427ea:	d017      	beq.n	804281c <UART_SetConfig+0x338>
 80427ec:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80427f0:	d817      	bhi.n	8042822 <UART_SetConfig+0x33e>
 80427f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80427f6:	d00b      	beq.n	8042810 <UART_SetConfig+0x32c>
 80427f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80427fc:	d811      	bhi.n	8042822 <UART_SetConfig+0x33e>
 80427fe:	2b00      	cmp	r3, #0
 8042800:	d003      	beq.n	804280a <UART_SetConfig+0x326>
 8042802:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8042806:	d006      	beq.n	8042816 <UART_SetConfig+0x332>
 8042808:	e00b      	b.n	8042822 <UART_SetConfig+0x33e>
 804280a:	2300      	movs	r3, #0
 804280c:	77fb      	strb	r3, [r7, #31]
 804280e:	e00d      	b.n	804282c <UART_SetConfig+0x348>
 8042810:	2302      	movs	r3, #2
 8042812:	77fb      	strb	r3, [r7, #31]
 8042814:	e00a      	b.n	804282c <UART_SetConfig+0x348>
 8042816:	2304      	movs	r3, #4
 8042818:	77fb      	strb	r3, [r7, #31]
 804281a:	e007      	b.n	804282c <UART_SetConfig+0x348>
 804281c:	2308      	movs	r3, #8
 804281e:	77fb      	strb	r3, [r7, #31]
 8042820:	e004      	b.n	804282c <UART_SetConfig+0x348>
 8042822:	2310      	movs	r3, #16
 8042824:	77fb      	strb	r3, [r7, #31]
 8042826:	e001      	b.n	804282c <UART_SetConfig+0x348>
 8042828:	2310      	movs	r3, #16
 804282a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 804282c:	687b      	ldr	r3, [r7, #4]
 804282e:	69db      	ldr	r3, [r3, #28]
 8042830:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8042834:	d15b      	bne.n	80428ee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8042836:	7ffb      	ldrb	r3, [r7, #31]
 8042838:	2b08      	cmp	r3, #8
 804283a:	d828      	bhi.n	804288e <UART_SetConfig+0x3aa>
 804283c:	a201      	add	r2, pc, #4	@ (adr r2, 8042844 <UART_SetConfig+0x360>)
 804283e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042842:	bf00      	nop
 8042844:	08042869 	.word	0x08042869
 8042848:	08042871 	.word	0x08042871
 804284c:	08042879 	.word	0x08042879
 8042850:	0804288f 	.word	0x0804288f
 8042854:	0804287f 	.word	0x0804287f
 8042858:	0804288f 	.word	0x0804288f
 804285c:	0804288f 	.word	0x0804288f
 8042860:	0804288f 	.word	0x0804288f
 8042864:	08042887 	.word	0x08042887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8042868:	f7ff f914 	bl	8041a94 <HAL_RCC_GetPCLK1Freq>
 804286c:	61b8      	str	r0, [r7, #24]
        break;
 804286e:	e013      	b.n	8042898 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8042870:	f7ff f924 	bl	8041abc <HAL_RCC_GetPCLK2Freq>
 8042874:	61b8      	str	r0, [r7, #24]
        break;
 8042876:	e00f      	b.n	8042898 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8042878:	4b4b      	ldr	r3, [pc, #300]	@ (80429a8 <UART_SetConfig+0x4c4>)
 804287a:	61bb      	str	r3, [r7, #24]
        break;
 804287c:	e00c      	b.n	8042898 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 804287e:	f7fe fff7 	bl	8041870 <HAL_RCC_GetSysClockFreq>
 8042882:	61b8      	str	r0, [r7, #24]
        break;
 8042884:	e008      	b.n	8042898 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8042886:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 804288a:	61bb      	str	r3, [r7, #24]
        break;
 804288c:	e004      	b.n	8042898 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 804288e:	2300      	movs	r3, #0
 8042890:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8042892:	2301      	movs	r3, #1
 8042894:	77bb      	strb	r3, [r7, #30]
        break;
 8042896:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8042898:	69bb      	ldr	r3, [r7, #24]
 804289a:	2b00      	cmp	r3, #0
 804289c:	d074      	beq.n	8042988 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 804289e:	69bb      	ldr	r3, [r7, #24]
 80428a0:	005a      	lsls	r2, r3, #1
 80428a2:	687b      	ldr	r3, [r7, #4]
 80428a4:	685b      	ldr	r3, [r3, #4]
 80428a6:	085b      	lsrs	r3, r3, #1
 80428a8:	441a      	add	r2, r3
 80428aa:	687b      	ldr	r3, [r7, #4]
 80428ac:	685b      	ldr	r3, [r3, #4]
 80428ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80428b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80428b4:	693b      	ldr	r3, [r7, #16]
 80428b6:	2b0f      	cmp	r3, #15
 80428b8:	d916      	bls.n	80428e8 <UART_SetConfig+0x404>
 80428ba:	693b      	ldr	r3, [r7, #16]
 80428bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80428c0:	d212      	bcs.n	80428e8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80428c2:	693b      	ldr	r3, [r7, #16]
 80428c4:	b29b      	uxth	r3, r3
 80428c6:	f023 030f 	bic.w	r3, r3, #15
 80428ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80428cc:	693b      	ldr	r3, [r7, #16]
 80428ce:	085b      	lsrs	r3, r3, #1
 80428d0:	b29b      	uxth	r3, r3
 80428d2:	f003 0307 	and.w	r3, r3, #7
 80428d6:	b29a      	uxth	r2, r3
 80428d8:	89fb      	ldrh	r3, [r7, #14]
 80428da:	4313      	orrs	r3, r2
 80428dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80428de:	687b      	ldr	r3, [r7, #4]
 80428e0:	681b      	ldr	r3, [r3, #0]
 80428e2:	89fa      	ldrh	r2, [r7, #14]
 80428e4:	60da      	str	r2, [r3, #12]
 80428e6:	e04f      	b.n	8042988 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80428e8:	2301      	movs	r3, #1
 80428ea:	77bb      	strb	r3, [r7, #30]
 80428ec:	e04c      	b.n	8042988 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80428ee:	7ffb      	ldrb	r3, [r7, #31]
 80428f0:	2b08      	cmp	r3, #8
 80428f2:	d828      	bhi.n	8042946 <UART_SetConfig+0x462>
 80428f4:	a201      	add	r2, pc, #4	@ (adr r2, 80428fc <UART_SetConfig+0x418>)
 80428f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80428fa:	bf00      	nop
 80428fc:	08042921 	.word	0x08042921
 8042900:	08042929 	.word	0x08042929
 8042904:	08042931 	.word	0x08042931
 8042908:	08042947 	.word	0x08042947
 804290c:	08042937 	.word	0x08042937
 8042910:	08042947 	.word	0x08042947
 8042914:	08042947 	.word	0x08042947
 8042918:	08042947 	.word	0x08042947
 804291c:	0804293f 	.word	0x0804293f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8042920:	f7ff f8b8 	bl	8041a94 <HAL_RCC_GetPCLK1Freq>
 8042924:	61b8      	str	r0, [r7, #24]
        break;
 8042926:	e013      	b.n	8042950 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8042928:	f7ff f8c8 	bl	8041abc <HAL_RCC_GetPCLK2Freq>
 804292c:	61b8      	str	r0, [r7, #24]
        break;
 804292e:	e00f      	b.n	8042950 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8042930:	4b1d      	ldr	r3, [pc, #116]	@ (80429a8 <UART_SetConfig+0x4c4>)
 8042932:	61bb      	str	r3, [r7, #24]
        break;
 8042934:	e00c      	b.n	8042950 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8042936:	f7fe ff9b 	bl	8041870 <HAL_RCC_GetSysClockFreq>
 804293a:	61b8      	str	r0, [r7, #24]
        break;
 804293c:	e008      	b.n	8042950 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 804293e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8042942:	61bb      	str	r3, [r7, #24]
        break;
 8042944:	e004      	b.n	8042950 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8042946:	2300      	movs	r3, #0
 8042948:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 804294a:	2301      	movs	r3, #1
 804294c:	77bb      	strb	r3, [r7, #30]
        break;
 804294e:	bf00      	nop
    }

    if (pclk != 0U)
 8042950:	69bb      	ldr	r3, [r7, #24]
 8042952:	2b00      	cmp	r3, #0
 8042954:	d018      	beq.n	8042988 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8042956:	687b      	ldr	r3, [r7, #4]
 8042958:	685b      	ldr	r3, [r3, #4]
 804295a:	085a      	lsrs	r2, r3, #1
 804295c:	69bb      	ldr	r3, [r7, #24]
 804295e:	441a      	add	r2, r3
 8042960:	687b      	ldr	r3, [r7, #4]
 8042962:	685b      	ldr	r3, [r3, #4]
 8042964:	fbb2 f3f3 	udiv	r3, r2, r3
 8042968:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 804296a:	693b      	ldr	r3, [r7, #16]
 804296c:	2b0f      	cmp	r3, #15
 804296e:	d909      	bls.n	8042984 <UART_SetConfig+0x4a0>
 8042970:	693b      	ldr	r3, [r7, #16]
 8042972:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8042976:	d205      	bcs.n	8042984 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8042978:	693b      	ldr	r3, [r7, #16]
 804297a:	b29a      	uxth	r2, r3
 804297c:	687b      	ldr	r3, [r7, #4]
 804297e:	681b      	ldr	r3, [r3, #0]
 8042980:	60da      	str	r2, [r3, #12]
 8042982:	e001      	b.n	8042988 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8042984:	2301      	movs	r3, #1
 8042986:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8042988:	687b      	ldr	r3, [r7, #4]
 804298a:	2200      	movs	r2, #0
 804298c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 804298e:	687b      	ldr	r3, [r7, #4]
 8042990:	2200      	movs	r2, #0
 8042992:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8042994:	7fbb      	ldrb	r3, [r7, #30]
}
 8042996:	4618      	mov	r0, r3
 8042998:	3720      	adds	r7, #32
 804299a:	46bd      	mov	sp, r7
 804299c:	bd80      	pop	{r7, pc}
 804299e:	bf00      	nop
 80429a0:	40007c00 	.word	0x40007c00
 80429a4:	40023800 	.word	0x40023800
 80429a8:	00f42400 	.word	0x00f42400

080429ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80429ac:	b480      	push	{r7}
 80429ae:	b083      	sub	sp, #12
 80429b0:	af00      	add	r7, sp, #0
 80429b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80429b4:	687b      	ldr	r3, [r7, #4]
 80429b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80429b8:	f003 0308 	and.w	r3, r3, #8
 80429bc:	2b00      	cmp	r3, #0
 80429be:	d00a      	beq.n	80429d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80429c0:	687b      	ldr	r3, [r7, #4]
 80429c2:	681b      	ldr	r3, [r3, #0]
 80429c4:	685b      	ldr	r3, [r3, #4]
 80429c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80429ca:	687b      	ldr	r3, [r7, #4]
 80429cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80429ce:	687b      	ldr	r3, [r7, #4]
 80429d0:	681b      	ldr	r3, [r3, #0]
 80429d2:	430a      	orrs	r2, r1
 80429d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80429d6:	687b      	ldr	r3, [r7, #4]
 80429d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80429da:	f003 0301 	and.w	r3, r3, #1
 80429de:	2b00      	cmp	r3, #0
 80429e0:	d00a      	beq.n	80429f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80429e2:	687b      	ldr	r3, [r7, #4]
 80429e4:	681b      	ldr	r3, [r3, #0]
 80429e6:	685b      	ldr	r3, [r3, #4]
 80429e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80429ec:	687b      	ldr	r3, [r7, #4]
 80429ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80429f0:	687b      	ldr	r3, [r7, #4]
 80429f2:	681b      	ldr	r3, [r3, #0]
 80429f4:	430a      	orrs	r2, r1
 80429f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80429f8:	687b      	ldr	r3, [r7, #4]
 80429fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80429fc:	f003 0302 	and.w	r3, r3, #2
 8042a00:	2b00      	cmp	r3, #0
 8042a02:	d00a      	beq.n	8042a1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8042a04:	687b      	ldr	r3, [r7, #4]
 8042a06:	681b      	ldr	r3, [r3, #0]
 8042a08:	685b      	ldr	r3, [r3, #4]
 8042a0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8042a0e:	687b      	ldr	r3, [r7, #4]
 8042a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8042a12:	687b      	ldr	r3, [r7, #4]
 8042a14:	681b      	ldr	r3, [r3, #0]
 8042a16:	430a      	orrs	r2, r1
 8042a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8042a1a:	687b      	ldr	r3, [r7, #4]
 8042a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042a1e:	f003 0304 	and.w	r3, r3, #4
 8042a22:	2b00      	cmp	r3, #0
 8042a24:	d00a      	beq.n	8042a3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8042a26:	687b      	ldr	r3, [r7, #4]
 8042a28:	681b      	ldr	r3, [r3, #0]
 8042a2a:	685b      	ldr	r3, [r3, #4]
 8042a2c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8042a30:	687b      	ldr	r3, [r7, #4]
 8042a32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8042a34:	687b      	ldr	r3, [r7, #4]
 8042a36:	681b      	ldr	r3, [r3, #0]
 8042a38:	430a      	orrs	r2, r1
 8042a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8042a3c:	687b      	ldr	r3, [r7, #4]
 8042a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042a40:	f003 0310 	and.w	r3, r3, #16
 8042a44:	2b00      	cmp	r3, #0
 8042a46:	d00a      	beq.n	8042a5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8042a48:	687b      	ldr	r3, [r7, #4]
 8042a4a:	681b      	ldr	r3, [r3, #0]
 8042a4c:	689b      	ldr	r3, [r3, #8]
 8042a4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8042a52:	687b      	ldr	r3, [r7, #4]
 8042a54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8042a56:	687b      	ldr	r3, [r7, #4]
 8042a58:	681b      	ldr	r3, [r3, #0]
 8042a5a:	430a      	orrs	r2, r1
 8042a5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8042a5e:	687b      	ldr	r3, [r7, #4]
 8042a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042a62:	f003 0320 	and.w	r3, r3, #32
 8042a66:	2b00      	cmp	r3, #0
 8042a68:	d00a      	beq.n	8042a80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8042a6a:	687b      	ldr	r3, [r7, #4]
 8042a6c:	681b      	ldr	r3, [r3, #0]
 8042a6e:	689b      	ldr	r3, [r3, #8]
 8042a70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8042a74:	687b      	ldr	r3, [r7, #4]
 8042a76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8042a78:	687b      	ldr	r3, [r7, #4]
 8042a7a:	681b      	ldr	r3, [r3, #0]
 8042a7c:	430a      	orrs	r2, r1
 8042a7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8042a80:	687b      	ldr	r3, [r7, #4]
 8042a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8042a88:	2b00      	cmp	r3, #0
 8042a8a:	d01a      	beq.n	8042ac2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8042a8c:	687b      	ldr	r3, [r7, #4]
 8042a8e:	681b      	ldr	r3, [r3, #0]
 8042a90:	685b      	ldr	r3, [r3, #4]
 8042a92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8042a96:	687b      	ldr	r3, [r7, #4]
 8042a98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8042a9a:	687b      	ldr	r3, [r7, #4]
 8042a9c:	681b      	ldr	r3, [r3, #0]
 8042a9e:	430a      	orrs	r2, r1
 8042aa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8042aa2:	687b      	ldr	r3, [r7, #4]
 8042aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8042aa6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8042aaa:	d10a      	bne.n	8042ac2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8042aac:	687b      	ldr	r3, [r7, #4]
 8042aae:	681b      	ldr	r3, [r3, #0]
 8042ab0:	685b      	ldr	r3, [r3, #4]
 8042ab2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8042ab6:	687b      	ldr	r3, [r7, #4]
 8042ab8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8042aba:	687b      	ldr	r3, [r7, #4]
 8042abc:	681b      	ldr	r3, [r3, #0]
 8042abe:	430a      	orrs	r2, r1
 8042ac0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8042ac2:	687b      	ldr	r3, [r7, #4]
 8042ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8042aca:	2b00      	cmp	r3, #0
 8042acc:	d00a      	beq.n	8042ae4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8042ace:	687b      	ldr	r3, [r7, #4]
 8042ad0:	681b      	ldr	r3, [r3, #0]
 8042ad2:	685b      	ldr	r3, [r3, #4]
 8042ad4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8042ad8:	687b      	ldr	r3, [r7, #4]
 8042ada:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8042adc:	687b      	ldr	r3, [r7, #4]
 8042ade:	681b      	ldr	r3, [r3, #0]
 8042ae0:	430a      	orrs	r2, r1
 8042ae2:	605a      	str	r2, [r3, #4]
  }
}
 8042ae4:	bf00      	nop
 8042ae6:	370c      	adds	r7, #12
 8042ae8:	46bd      	mov	sp, r7
 8042aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042aee:	4770      	bx	lr

08042af0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8042af0:	b580      	push	{r7, lr}
 8042af2:	b098      	sub	sp, #96	@ 0x60
 8042af4:	af02      	add	r7, sp, #8
 8042af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8042af8:	687b      	ldr	r3, [r7, #4]
 8042afa:	2200      	movs	r2, #0
 8042afc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8042b00:	f7fd ffe2 	bl	8040ac8 <HAL_GetTick>
 8042b04:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8042b06:	687b      	ldr	r3, [r7, #4]
 8042b08:	681b      	ldr	r3, [r3, #0]
 8042b0a:	681b      	ldr	r3, [r3, #0]
 8042b0c:	f003 0308 	and.w	r3, r3, #8
 8042b10:	2b08      	cmp	r3, #8
 8042b12:	d12e      	bne.n	8042b72 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8042b14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8042b18:	9300      	str	r3, [sp, #0]
 8042b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8042b1c:	2200      	movs	r2, #0
 8042b1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8042b22:	6878      	ldr	r0, [r7, #4]
 8042b24:	f000 f88c 	bl	8042c40 <UART_WaitOnFlagUntilTimeout>
 8042b28:	4603      	mov	r3, r0
 8042b2a:	2b00      	cmp	r3, #0
 8042b2c:	d021      	beq.n	8042b72 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8042b2e:	687b      	ldr	r3, [r7, #4]
 8042b30:	681b      	ldr	r3, [r3, #0]
 8042b32:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8042b36:	e853 3f00 	ldrex	r3, [r3]
 8042b3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8042b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8042b3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8042b42:	653b      	str	r3, [r7, #80]	@ 0x50
 8042b44:	687b      	ldr	r3, [r7, #4]
 8042b46:	681b      	ldr	r3, [r3, #0]
 8042b48:	461a      	mov	r2, r3
 8042b4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8042b4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8042b4e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042b50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8042b52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8042b54:	e841 2300 	strex	r3, r2, [r1]
 8042b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8042b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8042b5c:	2b00      	cmp	r3, #0
 8042b5e:	d1e6      	bne.n	8042b2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8042b60:	687b      	ldr	r3, [r7, #4]
 8042b62:	2220      	movs	r2, #32
 8042b64:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8042b66:	687b      	ldr	r3, [r7, #4]
 8042b68:	2200      	movs	r2, #0
 8042b6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8042b6e:	2303      	movs	r3, #3
 8042b70:	e062      	b.n	8042c38 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8042b72:	687b      	ldr	r3, [r7, #4]
 8042b74:	681b      	ldr	r3, [r3, #0]
 8042b76:	681b      	ldr	r3, [r3, #0]
 8042b78:	f003 0304 	and.w	r3, r3, #4
 8042b7c:	2b04      	cmp	r3, #4
 8042b7e:	d149      	bne.n	8042c14 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8042b80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8042b84:	9300      	str	r3, [sp, #0]
 8042b86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8042b88:	2200      	movs	r2, #0
 8042b8a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8042b8e:	6878      	ldr	r0, [r7, #4]
 8042b90:	f000 f856 	bl	8042c40 <UART_WaitOnFlagUntilTimeout>
 8042b94:	4603      	mov	r3, r0
 8042b96:	2b00      	cmp	r3, #0
 8042b98:	d03c      	beq.n	8042c14 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8042b9a:	687b      	ldr	r3, [r7, #4]
 8042b9c:	681b      	ldr	r3, [r3, #0]
 8042b9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042ba2:	e853 3f00 	ldrex	r3, [r3]
 8042ba6:	623b      	str	r3, [r7, #32]
   return(result);
 8042ba8:	6a3b      	ldr	r3, [r7, #32]
 8042baa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8042bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8042bb0:	687b      	ldr	r3, [r7, #4]
 8042bb2:	681b      	ldr	r3, [r3, #0]
 8042bb4:	461a      	mov	r2, r3
 8042bb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8042bb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8042bba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042bbc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8042bbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8042bc0:	e841 2300 	strex	r3, r2, [r1]
 8042bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8042bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8042bc8:	2b00      	cmp	r3, #0
 8042bca:	d1e6      	bne.n	8042b9a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8042bcc:	687b      	ldr	r3, [r7, #4]
 8042bce:	681b      	ldr	r3, [r3, #0]
 8042bd0:	3308      	adds	r3, #8
 8042bd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042bd4:	693b      	ldr	r3, [r7, #16]
 8042bd6:	e853 3f00 	ldrex	r3, [r3]
 8042bda:	60fb      	str	r3, [r7, #12]
   return(result);
 8042bdc:	68fb      	ldr	r3, [r7, #12]
 8042bde:	f023 0301 	bic.w	r3, r3, #1
 8042be2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8042be4:	687b      	ldr	r3, [r7, #4]
 8042be6:	681b      	ldr	r3, [r3, #0]
 8042be8:	3308      	adds	r3, #8
 8042bea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8042bec:	61fa      	str	r2, [r7, #28]
 8042bee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042bf0:	69b9      	ldr	r1, [r7, #24]
 8042bf2:	69fa      	ldr	r2, [r7, #28]
 8042bf4:	e841 2300 	strex	r3, r2, [r1]
 8042bf8:	617b      	str	r3, [r7, #20]
   return(result);
 8042bfa:	697b      	ldr	r3, [r7, #20]
 8042bfc:	2b00      	cmp	r3, #0
 8042bfe:	d1e5      	bne.n	8042bcc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8042c00:	687b      	ldr	r3, [r7, #4]
 8042c02:	2220      	movs	r2, #32
 8042c04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8042c08:	687b      	ldr	r3, [r7, #4]
 8042c0a:	2200      	movs	r2, #0
 8042c0c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8042c10:	2303      	movs	r3, #3
 8042c12:	e011      	b.n	8042c38 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8042c14:	687b      	ldr	r3, [r7, #4]
 8042c16:	2220      	movs	r2, #32
 8042c18:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8042c1a:	687b      	ldr	r3, [r7, #4]
 8042c1c:	2220      	movs	r2, #32
 8042c1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8042c22:	687b      	ldr	r3, [r7, #4]
 8042c24:	2200      	movs	r2, #0
 8042c26:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8042c28:	687b      	ldr	r3, [r7, #4]
 8042c2a:	2200      	movs	r2, #0
 8042c2c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8042c2e:	687b      	ldr	r3, [r7, #4]
 8042c30:	2200      	movs	r2, #0
 8042c32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8042c36:	2300      	movs	r3, #0
}
 8042c38:	4618      	mov	r0, r3
 8042c3a:	3758      	adds	r7, #88	@ 0x58
 8042c3c:	46bd      	mov	sp, r7
 8042c3e:	bd80      	pop	{r7, pc}

08042c40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8042c40:	b580      	push	{r7, lr}
 8042c42:	b084      	sub	sp, #16
 8042c44:	af00      	add	r7, sp, #0
 8042c46:	60f8      	str	r0, [r7, #12]
 8042c48:	60b9      	str	r1, [r7, #8]
 8042c4a:	603b      	str	r3, [r7, #0]
 8042c4c:	4613      	mov	r3, r2
 8042c4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8042c50:	e04f      	b.n	8042cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8042c52:	69bb      	ldr	r3, [r7, #24]
 8042c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8042c58:	d04b      	beq.n	8042cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8042c5a:	f7fd ff35 	bl	8040ac8 <HAL_GetTick>
 8042c5e:	4602      	mov	r2, r0
 8042c60:	683b      	ldr	r3, [r7, #0]
 8042c62:	1ad3      	subs	r3, r2, r3
 8042c64:	69ba      	ldr	r2, [r7, #24]
 8042c66:	429a      	cmp	r2, r3
 8042c68:	d302      	bcc.n	8042c70 <UART_WaitOnFlagUntilTimeout+0x30>
 8042c6a:	69bb      	ldr	r3, [r7, #24]
 8042c6c:	2b00      	cmp	r3, #0
 8042c6e:	d101      	bne.n	8042c74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8042c70:	2303      	movs	r3, #3
 8042c72:	e04e      	b.n	8042d12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8042c74:	68fb      	ldr	r3, [r7, #12]
 8042c76:	681b      	ldr	r3, [r3, #0]
 8042c78:	681b      	ldr	r3, [r3, #0]
 8042c7a:	f003 0304 	and.w	r3, r3, #4
 8042c7e:	2b00      	cmp	r3, #0
 8042c80:	d037      	beq.n	8042cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8042c82:	68bb      	ldr	r3, [r7, #8]
 8042c84:	2b80      	cmp	r3, #128	@ 0x80
 8042c86:	d034      	beq.n	8042cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8042c88:	68bb      	ldr	r3, [r7, #8]
 8042c8a:	2b40      	cmp	r3, #64	@ 0x40
 8042c8c:	d031      	beq.n	8042cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8042c8e:	68fb      	ldr	r3, [r7, #12]
 8042c90:	681b      	ldr	r3, [r3, #0]
 8042c92:	69db      	ldr	r3, [r3, #28]
 8042c94:	f003 0308 	and.w	r3, r3, #8
 8042c98:	2b08      	cmp	r3, #8
 8042c9a:	d110      	bne.n	8042cbe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8042c9c:	68fb      	ldr	r3, [r7, #12]
 8042c9e:	681b      	ldr	r3, [r3, #0]
 8042ca0:	2208      	movs	r2, #8
 8042ca2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8042ca4:	68f8      	ldr	r0, [r7, #12]
 8042ca6:	f000 f838 	bl	8042d1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8042caa:	68fb      	ldr	r3, [r7, #12]
 8042cac:	2208      	movs	r2, #8
 8042cae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8042cb2:	68fb      	ldr	r3, [r7, #12]
 8042cb4:	2200      	movs	r2, #0
 8042cb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8042cba:	2301      	movs	r3, #1
 8042cbc:	e029      	b.n	8042d12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8042cbe:	68fb      	ldr	r3, [r7, #12]
 8042cc0:	681b      	ldr	r3, [r3, #0]
 8042cc2:	69db      	ldr	r3, [r3, #28]
 8042cc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8042cc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8042ccc:	d111      	bne.n	8042cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8042cce:	68fb      	ldr	r3, [r7, #12]
 8042cd0:	681b      	ldr	r3, [r3, #0]
 8042cd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8042cd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8042cd8:	68f8      	ldr	r0, [r7, #12]
 8042cda:	f000 f81e 	bl	8042d1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8042cde:	68fb      	ldr	r3, [r7, #12]
 8042ce0:	2220      	movs	r2, #32
 8042ce2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8042ce6:	68fb      	ldr	r3, [r7, #12]
 8042ce8:	2200      	movs	r2, #0
 8042cea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8042cee:	2303      	movs	r3, #3
 8042cf0:	e00f      	b.n	8042d12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8042cf2:	68fb      	ldr	r3, [r7, #12]
 8042cf4:	681b      	ldr	r3, [r3, #0]
 8042cf6:	69da      	ldr	r2, [r3, #28]
 8042cf8:	68bb      	ldr	r3, [r7, #8]
 8042cfa:	4013      	ands	r3, r2
 8042cfc:	68ba      	ldr	r2, [r7, #8]
 8042cfe:	429a      	cmp	r2, r3
 8042d00:	bf0c      	ite	eq
 8042d02:	2301      	moveq	r3, #1
 8042d04:	2300      	movne	r3, #0
 8042d06:	b2db      	uxtb	r3, r3
 8042d08:	461a      	mov	r2, r3
 8042d0a:	79fb      	ldrb	r3, [r7, #7]
 8042d0c:	429a      	cmp	r2, r3
 8042d0e:	d0a0      	beq.n	8042c52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8042d10:	2300      	movs	r3, #0
}
 8042d12:	4618      	mov	r0, r3
 8042d14:	3710      	adds	r7, #16
 8042d16:	46bd      	mov	sp, r7
 8042d18:	bd80      	pop	{r7, pc}

08042d1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8042d1a:	b480      	push	{r7}
 8042d1c:	b095      	sub	sp, #84	@ 0x54
 8042d1e:	af00      	add	r7, sp, #0
 8042d20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8042d22:	687b      	ldr	r3, [r7, #4]
 8042d24:	681b      	ldr	r3, [r3, #0]
 8042d26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8042d2a:	e853 3f00 	ldrex	r3, [r3]
 8042d2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8042d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8042d32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8042d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8042d38:	687b      	ldr	r3, [r7, #4]
 8042d3a:	681b      	ldr	r3, [r3, #0]
 8042d3c:	461a      	mov	r2, r3
 8042d3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8042d40:	643b      	str	r3, [r7, #64]	@ 0x40
 8042d42:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042d44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8042d46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8042d48:	e841 2300 	strex	r3, r2, [r1]
 8042d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8042d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8042d50:	2b00      	cmp	r3, #0
 8042d52:	d1e6      	bne.n	8042d22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8042d54:	687b      	ldr	r3, [r7, #4]
 8042d56:	681b      	ldr	r3, [r3, #0]
 8042d58:	3308      	adds	r3, #8
 8042d5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042d5c:	6a3b      	ldr	r3, [r7, #32]
 8042d5e:	e853 3f00 	ldrex	r3, [r3]
 8042d62:	61fb      	str	r3, [r7, #28]
   return(result);
 8042d64:	69fb      	ldr	r3, [r7, #28]
 8042d66:	f023 0301 	bic.w	r3, r3, #1
 8042d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8042d6c:	687b      	ldr	r3, [r7, #4]
 8042d6e:	681b      	ldr	r3, [r3, #0]
 8042d70:	3308      	adds	r3, #8
 8042d72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8042d74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8042d76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042d78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8042d7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8042d7c:	e841 2300 	strex	r3, r2, [r1]
 8042d80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8042d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042d84:	2b00      	cmp	r3, #0
 8042d86:	d1e5      	bne.n	8042d54 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8042d88:	687b      	ldr	r3, [r7, #4]
 8042d8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8042d8c:	2b01      	cmp	r3, #1
 8042d8e:	d118      	bne.n	8042dc2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8042d90:	687b      	ldr	r3, [r7, #4]
 8042d92:	681b      	ldr	r3, [r3, #0]
 8042d94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042d96:	68fb      	ldr	r3, [r7, #12]
 8042d98:	e853 3f00 	ldrex	r3, [r3]
 8042d9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8042d9e:	68bb      	ldr	r3, [r7, #8]
 8042da0:	f023 0310 	bic.w	r3, r3, #16
 8042da4:	647b      	str	r3, [r7, #68]	@ 0x44
 8042da6:	687b      	ldr	r3, [r7, #4]
 8042da8:	681b      	ldr	r3, [r3, #0]
 8042daa:	461a      	mov	r2, r3
 8042dac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8042dae:	61bb      	str	r3, [r7, #24]
 8042db0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042db2:	6979      	ldr	r1, [r7, #20]
 8042db4:	69ba      	ldr	r2, [r7, #24]
 8042db6:	e841 2300 	strex	r3, r2, [r1]
 8042dba:	613b      	str	r3, [r7, #16]
   return(result);
 8042dbc:	693b      	ldr	r3, [r7, #16]
 8042dbe:	2b00      	cmp	r3, #0
 8042dc0:	d1e6      	bne.n	8042d90 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8042dc2:	687b      	ldr	r3, [r7, #4]
 8042dc4:	2220      	movs	r2, #32
 8042dc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8042dca:	687b      	ldr	r3, [r7, #4]
 8042dcc:	2200      	movs	r2, #0
 8042dce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8042dd0:	687b      	ldr	r3, [r7, #4]
 8042dd2:	2200      	movs	r2, #0
 8042dd4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8042dd6:	bf00      	nop
 8042dd8:	3754      	adds	r7, #84	@ 0x54
 8042dda:	46bd      	mov	sp, r7
 8042ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042de0:	4770      	bx	lr

08042de2 <memset>:
 8042de2:	4402      	add	r2, r0
 8042de4:	4603      	mov	r3, r0
 8042de6:	4293      	cmp	r3, r2
 8042de8:	d100      	bne.n	8042dec <memset+0xa>
 8042dea:	4770      	bx	lr
 8042dec:	f803 1b01 	strb.w	r1, [r3], #1
 8042df0:	e7f9      	b.n	8042de6 <memset+0x4>
	...

08042df4 <__libc_init_array>:
 8042df4:	b570      	push	{r4, r5, r6, lr}
 8042df6:	4d0d      	ldr	r5, [pc, #52]	@ (8042e2c <__libc_init_array+0x38>)
 8042df8:	4c0d      	ldr	r4, [pc, #52]	@ (8042e30 <__libc_init_array+0x3c>)
 8042dfa:	1b64      	subs	r4, r4, r5
 8042dfc:	10a4      	asrs	r4, r4, #2
 8042dfe:	2600      	movs	r6, #0
 8042e00:	42a6      	cmp	r6, r4
 8042e02:	d109      	bne.n	8042e18 <__libc_init_array+0x24>
 8042e04:	4d0b      	ldr	r5, [pc, #44]	@ (8042e34 <__libc_init_array+0x40>)
 8042e06:	4c0c      	ldr	r4, [pc, #48]	@ (8042e38 <__libc_init_array+0x44>)
 8042e08:	f000 f818 	bl	8042e3c <_init>
 8042e0c:	1b64      	subs	r4, r4, r5
 8042e0e:	10a4      	asrs	r4, r4, #2
 8042e10:	2600      	movs	r6, #0
 8042e12:	42a6      	cmp	r6, r4
 8042e14:	d105      	bne.n	8042e22 <__libc_init_array+0x2e>
 8042e16:	bd70      	pop	{r4, r5, r6, pc}
 8042e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8042e1c:	4798      	blx	r3
 8042e1e:	3601      	adds	r6, #1
 8042e20:	e7ee      	b.n	8042e00 <__libc_init_array+0xc>
 8042e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8042e26:	4798      	blx	r3
 8042e28:	3601      	adds	r6, #1
 8042e2a:	e7f2      	b.n	8042e12 <__libc_init_array+0x1e>
 8042e2c:	08042ea4 	.word	0x08042ea4
 8042e30:	08042ea4 	.word	0x08042ea4
 8042e34:	08042ea4 	.word	0x08042ea4
 8042e38:	08042ea8 	.word	0x08042ea8

08042e3c <_init>:
 8042e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8042e3e:	bf00      	nop
 8042e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8042e42:	bc08      	pop	{r3}
 8042e44:	469e      	mov	lr, r3
 8042e46:	4770      	bx	lr

08042e48 <_fini>:
 8042e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8042e4a:	bf00      	nop
 8042e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8042e4e:	bc08      	pop	{r3}
 8042e50:	469e      	mov	lr, r3
 8042e52:	4770      	bx	lr
