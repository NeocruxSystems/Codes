
APPLICATION_F767ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034d0  081001f8  081001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  081036c8  081036c8  000046c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08103758  08103758  00005014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08103758  08103758  00004758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08103760  08103760  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08103760  08103760  00004760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08103764  08103764  00004764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08103768  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000014  0810377c  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  0810377c  000051dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac48  00000000  00000000  00005042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c55  00000000  00000000  0000fc8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c8  00000000  00000000  000118e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006bd  00000000  00000000  000121a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026d3a  00000000  00000000  00012865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b41b  00000000  00000000  0003959f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f13b1  00000000  00000000  000449ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00135d6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022a0  00000000  00000000  00135db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00138050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081001f8 <__do_global_dtors_aux>:
 81001f8:	b510      	push	{r4, lr}
 81001fa:	4c05      	ldr	r4, [pc, #20]	@ (8100210 <__do_global_dtors_aux+0x18>)
 81001fc:	7823      	ldrb	r3, [r4, #0]
 81001fe:	b933      	cbnz	r3, 810020e <__do_global_dtors_aux+0x16>
 8100200:	4b04      	ldr	r3, [pc, #16]	@ (8100214 <__do_global_dtors_aux+0x1c>)
 8100202:	b113      	cbz	r3, 810020a <__do_global_dtors_aux+0x12>
 8100204:	4804      	ldr	r0, [pc, #16]	@ (8100218 <__do_global_dtors_aux+0x20>)
 8100206:	f3af 8000 	nop.w
 810020a:	2301      	movs	r3, #1
 810020c:	7023      	strb	r3, [r4, #0]
 810020e:	bd10      	pop	{r4, pc}
 8100210:	20000014 	.word	0x20000014
 8100214:	00000000 	.word	0x00000000
 8100218:	081036b0 	.word	0x081036b0

0810021c <frame_dummy>:
 810021c:	b508      	push	{r3, lr}
 810021e:	4b03      	ldr	r3, [pc, #12]	@ (810022c <frame_dummy+0x10>)
 8100220:	b11b      	cbz	r3, 810022a <frame_dummy+0xe>
 8100222:	4903      	ldr	r1, [pc, #12]	@ (8100230 <frame_dummy+0x14>)
 8100224:	4803      	ldr	r0, [pc, #12]	@ (8100234 <frame_dummy+0x18>)
 8100226:	f3af 8000 	nop.w
 810022a:	bd08      	pop	{r3, pc}
 810022c:	00000000 	.word	0x00000000
 8100230:	20000018 	.word	0x20000018
 8100234:	081036b0 	.word	0x081036b0

08100238 <strlen>:
 8100238:	4603      	mov	r3, r0
 810023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810023e:	2a00      	cmp	r2, #0
 8100240:	d1fb      	bne.n	810023a <strlen+0x2>
 8100242:	1a18      	subs	r0, r3, r0
 8100244:	3801      	subs	r0, #1
 8100246:	4770      	bx	lr

08100248 <__aeabi_uldivmod>:
 8100248:	b953      	cbnz	r3, 8100260 <__aeabi_uldivmod+0x18>
 810024a:	b94a      	cbnz	r2, 8100260 <__aeabi_uldivmod+0x18>
 810024c:	2900      	cmp	r1, #0
 810024e:	bf08      	it	eq
 8100250:	2800      	cmpeq	r0, #0
 8100252:	bf1c      	itt	ne
 8100254:	f04f 31ff 	movne.w	r1, #4294967295
 8100258:	f04f 30ff 	movne.w	r0, #4294967295
 810025c:	f000 b988 	b.w	8100570 <__aeabi_idiv0>
 8100260:	f1ad 0c08 	sub.w	ip, sp, #8
 8100264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100268:	f000 f806 	bl	8100278 <__udivmoddi4>
 810026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100274:	b004      	add	sp, #16
 8100276:	4770      	bx	lr

08100278 <__udivmoddi4>:
 8100278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810027c:	9d08      	ldr	r5, [sp, #32]
 810027e:	468e      	mov	lr, r1
 8100280:	4604      	mov	r4, r0
 8100282:	4688      	mov	r8, r1
 8100284:	2b00      	cmp	r3, #0
 8100286:	d14a      	bne.n	810031e <__udivmoddi4+0xa6>
 8100288:	428a      	cmp	r2, r1
 810028a:	4617      	mov	r7, r2
 810028c:	d962      	bls.n	8100354 <__udivmoddi4+0xdc>
 810028e:	fab2 f682 	clz	r6, r2
 8100292:	b14e      	cbz	r6, 81002a8 <__udivmoddi4+0x30>
 8100294:	f1c6 0320 	rsb	r3, r6, #32
 8100298:	fa01 f806 	lsl.w	r8, r1, r6
 810029c:	fa20 f303 	lsr.w	r3, r0, r3
 81002a0:	40b7      	lsls	r7, r6
 81002a2:	ea43 0808 	orr.w	r8, r3, r8
 81002a6:	40b4      	lsls	r4, r6
 81002a8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 81002ac:	fa1f fc87 	uxth.w	ip, r7
 81002b0:	fbb8 f1fe 	udiv	r1, r8, lr
 81002b4:	0c23      	lsrs	r3, r4, #16
 81002b6:	fb0e 8811 	mls	r8, lr, r1, r8
 81002ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 81002be:	fb01 f20c 	mul.w	r2, r1, ip
 81002c2:	429a      	cmp	r2, r3
 81002c4:	d909      	bls.n	81002da <__udivmoddi4+0x62>
 81002c6:	18fb      	adds	r3, r7, r3
 81002c8:	f101 30ff 	add.w	r0, r1, #4294967295
 81002cc:	f080 80ea 	bcs.w	81004a4 <__udivmoddi4+0x22c>
 81002d0:	429a      	cmp	r2, r3
 81002d2:	f240 80e7 	bls.w	81004a4 <__udivmoddi4+0x22c>
 81002d6:	3902      	subs	r1, #2
 81002d8:	443b      	add	r3, r7
 81002da:	1a9a      	subs	r2, r3, r2
 81002dc:	b2a3      	uxth	r3, r4
 81002de:	fbb2 f0fe 	udiv	r0, r2, lr
 81002e2:	fb0e 2210 	mls	r2, lr, r0, r2
 81002e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 81002ea:	fb00 fc0c 	mul.w	ip, r0, ip
 81002ee:	459c      	cmp	ip, r3
 81002f0:	d909      	bls.n	8100306 <__udivmoddi4+0x8e>
 81002f2:	18fb      	adds	r3, r7, r3
 81002f4:	f100 32ff 	add.w	r2, r0, #4294967295
 81002f8:	f080 80d6 	bcs.w	81004a8 <__udivmoddi4+0x230>
 81002fc:	459c      	cmp	ip, r3
 81002fe:	f240 80d3 	bls.w	81004a8 <__udivmoddi4+0x230>
 8100302:	443b      	add	r3, r7
 8100304:	3802      	subs	r0, #2
 8100306:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 810030a:	eba3 030c 	sub.w	r3, r3, ip
 810030e:	2100      	movs	r1, #0
 8100310:	b11d      	cbz	r5, 810031a <__udivmoddi4+0xa2>
 8100312:	40f3      	lsrs	r3, r6
 8100314:	2200      	movs	r2, #0
 8100316:	e9c5 3200 	strd	r3, r2, [r5]
 810031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810031e:	428b      	cmp	r3, r1
 8100320:	d905      	bls.n	810032e <__udivmoddi4+0xb6>
 8100322:	b10d      	cbz	r5, 8100328 <__udivmoddi4+0xb0>
 8100324:	e9c5 0100 	strd	r0, r1, [r5]
 8100328:	2100      	movs	r1, #0
 810032a:	4608      	mov	r0, r1
 810032c:	e7f5      	b.n	810031a <__udivmoddi4+0xa2>
 810032e:	fab3 f183 	clz	r1, r3
 8100332:	2900      	cmp	r1, #0
 8100334:	d146      	bne.n	81003c4 <__udivmoddi4+0x14c>
 8100336:	4573      	cmp	r3, lr
 8100338:	d302      	bcc.n	8100340 <__udivmoddi4+0xc8>
 810033a:	4282      	cmp	r2, r0
 810033c:	f200 8105 	bhi.w	810054a <__udivmoddi4+0x2d2>
 8100340:	1a84      	subs	r4, r0, r2
 8100342:	eb6e 0203 	sbc.w	r2, lr, r3
 8100346:	2001      	movs	r0, #1
 8100348:	4690      	mov	r8, r2
 810034a:	2d00      	cmp	r5, #0
 810034c:	d0e5      	beq.n	810031a <__udivmoddi4+0xa2>
 810034e:	e9c5 4800 	strd	r4, r8, [r5]
 8100352:	e7e2      	b.n	810031a <__udivmoddi4+0xa2>
 8100354:	2a00      	cmp	r2, #0
 8100356:	f000 8090 	beq.w	810047a <__udivmoddi4+0x202>
 810035a:	fab2 f682 	clz	r6, r2
 810035e:	2e00      	cmp	r6, #0
 8100360:	f040 80a4 	bne.w	81004ac <__udivmoddi4+0x234>
 8100364:	1a8a      	subs	r2, r1, r2
 8100366:	0c03      	lsrs	r3, r0, #16
 8100368:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 810036c:	b280      	uxth	r0, r0
 810036e:	b2bc      	uxth	r4, r7
 8100370:	2101      	movs	r1, #1
 8100372:	fbb2 fcfe 	udiv	ip, r2, lr
 8100376:	fb0e 221c 	mls	r2, lr, ip, r2
 810037a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810037e:	fb04 f20c 	mul.w	r2, r4, ip
 8100382:	429a      	cmp	r2, r3
 8100384:	d907      	bls.n	8100396 <__udivmoddi4+0x11e>
 8100386:	18fb      	adds	r3, r7, r3
 8100388:	f10c 38ff 	add.w	r8, ip, #4294967295
 810038c:	d202      	bcs.n	8100394 <__udivmoddi4+0x11c>
 810038e:	429a      	cmp	r2, r3
 8100390:	f200 80e0 	bhi.w	8100554 <__udivmoddi4+0x2dc>
 8100394:	46c4      	mov	ip, r8
 8100396:	1a9b      	subs	r3, r3, r2
 8100398:	fbb3 f2fe 	udiv	r2, r3, lr
 810039c:	fb0e 3312 	mls	r3, lr, r2, r3
 81003a0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 81003a4:	fb02 f404 	mul.w	r4, r2, r4
 81003a8:	429c      	cmp	r4, r3
 81003aa:	d907      	bls.n	81003bc <__udivmoddi4+0x144>
 81003ac:	18fb      	adds	r3, r7, r3
 81003ae:	f102 30ff 	add.w	r0, r2, #4294967295
 81003b2:	d202      	bcs.n	81003ba <__udivmoddi4+0x142>
 81003b4:	429c      	cmp	r4, r3
 81003b6:	f200 80ca 	bhi.w	810054e <__udivmoddi4+0x2d6>
 81003ba:	4602      	mov	r2, r0
 81003bc:	1b1b      	subs	r3, r3, r4
 81003be:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 81003c2:	e7a5      	b.n	8100310 <__udivmoddi4+0x98>
 81003c4:	f1c1 0620 	rsb	r6, r1, #32
 81003c8:	408b      	lsls	r3, r1
 81003ca:	fa22 f706 	lsr.w	r7, r2, r6
 81003ce:	431f      	orrs	r7, r3
 81003d0:	fa0e f401 	lsl.w	r4, lr, r1
 81003d4:	fa20 f306 	lsr.w	r3, r0, r6
 81003d8:	fa2e fe06 	lsr.w	lr, lr, r6
 81003dc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 81003e0:	4323      	orrs	r3, r4
 81003e2:	fa00 f801 	lsl.w	r8, r0, r1
 81003e6:	fa1f fc87 	uxth.w	ip, r7
 81003ea:	fbbe f0f9 	udiv	r0, lr, r9
 81003ee:	0c1c      	lsrs	r4, r3, #16
 81003f0:	fb09 ee10 	mls	lr, r9, r0, lr
 81003f4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 81003f8:	fb00 fe0c 	mul.w	lr, r0, ip
 81003fc:	45a6      	cmp	lr, r4
 81003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8100402:	d909      	bls.n	8100418 <__udivmoddi4+0x1a0>
 8100404:	193c      	adds	r4, r7, r4
 8100406:	f100 3aff 	add.w	sl, r0, #4294967295
 810040a:	f080 809c 	bcs.w	8100546 <__udivmoddi4+0x2ce>
 810040e:	45a6      	cmp	lr, r4
 8100410:	f240 8099 	bls.w	8100546 <__udivmoddi4+0x2ce>
 8100414:	3802      	subs	r0, #2
 8100416:	443c      	add	r4, r7
 8100418:	eba4 040e 	sub.w	r4, r4, lr
 810041c:	fa1f fe83 	uxth.w	lr, r3
 8100420:	fbb4 f3f9 	udiv	r3, r4, r9
 8100424:	fb09 4413 	mls	r4, r9, r3, r4
 8100428:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 810042c:	fb03 fc0c 	mul.w	ip, r3, ip
 8100430:	45a4      	cmp	ip, r4
 8100432:	d908      	bls.n	8100446 <__udivmoddi4+0x1ce>
 8100434:	193c      	adds	r4, r7, r4
 8100436:	f103 3eff 	add.w	lr, r3, #4294967295
 810043a:	f080 8082 	bcs.w	8100542 <__udivmoddi4+0x2ca>
 810043e:	45a4      	cmp	ip, r4
 8100440:	d97f      	bls.n	8100542 <__udivmoddi4+0x2ca>
 8100442:	3b02      	subs	r3, #2
 8100444:	443c      	add	r4, r7
 8100446:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 810044a:	eba4 040c 	sub.w	r4, r4, ip
 810044e:	fba0 ec02 	umull	lr, ip, r0, r2
 8100452:	4564      	cmp	r4, ip
 8100454:	4673      	mov	r3, lr
 8100456:	46e1      	mov	r9, ip
 8100458:	d362      	bcc.n	8100520 <__udivmoddi4+0x2a8>
 810045a:	d05f      	beq.n	810051c <__udivmoddi4+0x2a4>
 810045c:	b15d      	cbz	r5, 8100476 <__udivmoddi4+0x1fe>
 810045e:	ebb8 0203 	subs.w	r2, r8, r3
 8100462:	eb64 0409 	sbc.w	r4, r4, r9
 8100466:	fa04 f606 	lsl.w	r6, r4, r6
 810046a:	fa22 f301 	lsr.w	r3, r2, r1
 810046e:	431e      	orrs	r6, r3
 8100470:	40cc      	lsrs	r4, r1
 8100472:	e9c5 6400 	strd	r6, r4, [r5]
 8100476:	2100      	movs	r1, #0
 8100478:	e74f      	b.n	810031a <__udivmoddi4+0xa2>
 810047a:	fbb1 fcf2 	udiv	ip, r1, r2
 810047e:	0c01      	lsrs	r1, r0, #16
 8100480:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8100484:	b280      	uxth	r0, r0
 8100486:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 810048a:	463b      	mov	r3, r7
 810048c:	4638      	mov	r0, r7
 810048e:	463c      	mov	r4, r7
 8100490:	46b8      	mov	r8, r7
 8100492:	46be      	mov	lr, r7
 8100494:	2620      	movs	r6, #32
 8100496:	fbb1 f1f7 	udiv	r1, r1, r7
 810049a:	eba2 0208 	sub.w	r2, r2, r8
 810049e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 81004a2:	e766      	b.n	8100372 <__udivmoddi4+0xfa>
 81004a4:	4601      	mov	r1, r0
 81004a6:	e718      	b.n	81002da <__udivmoddi4+0x62>
 81004a8:	4610      	mov	r0, r2
 81004aa:	e72c      	b.n	8100306 <__udivmoddi4+0x8e>
 81004ac:	f1c6 0220 	rsb	r2, r6, #32
 81004b0:	fa2e f302 	lsr.w	r3, lr, r2
 81004b4:	40b7      	lsls	r7, r6
 81004b6:	40b1      	lsls	r1, r6
 81004b8:	fa20 f202 	lsr.w	r2, r0, r2
 81004bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 81004c0:	430a      	orrs	r2, r1
 81004c2:	fbb3 f8fe 	udiv	r8, r3, lr
 81004c6:	b2bc      	uxth	r4, r7
 81004c8:	fb0e 3318 	mls	r3, lr, r8, r3
 81004cc:	0c11      	lsrs	r1, r2, #16
 81004ce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81004d2:	fb08 f904 	mul.w	r9, r8, r4
 81004d6:	40b0      	lsls	r0, r6
 81004d8:	4589      	cmp	r9, r1
 81004da:	ea4f 4310 	mov.w	r3, r0, lsr #16
 81004de:	b280      	uxth	r0, r0
 81004e0:	d93e      	bls.n	8100560 <__udivmoddi4+0x2e8>
 81004e2:	1879      	adds	r1, r7, r1
 81004e4:	f108 3cff 	add.w	ip, r8, #4294967295
 81004e8:	d201      	bcs.n	81004ee <__udivmoddi4+0x276>
 81004ea:	4589      	cmp	r9, r1
 81004ec:	d81f      	bhi.n	810052e <__udivmoddi4+0x2b6>
 81004ee:	eba1 0109 	sub.w	r1, r1, r9
 81004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 81004f6:	fb09 f804 	mul.w	r8, r9, r4
 81004fa:	fb0e 1119 	mls	r1, lr, r9, r1
 81004fe:	b292      	uxth	r2, r2
 8100500:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8100504:	4542      	cmp	r2, r8
 8100506:	d229      	bcs.n	810055c <__udivmoddi4+0x2e4>
 8100508:	18ba      	adds	r2, r7, r2
 810050a:	f109 31ff 	add.w	r1, r9, #4294967295
 810050e:	d2c4      	bcs.n	810049a <__udivmoddi4+0x222>
 8100510:	4542      	cmp	r2, r8
 8100512:	d2c2      	bcs.n	810049a <__udivmoddi4+0x222>
 8100514:	f1a9 0102 	sub.w	r1, r9, #2
 8100518:	443a      	add	r2, r7
 810051a:	e7be      	b.n	810049a <__udivmoddi4+0x222>
 810051c:	45f0      	cmp	r8, lr
 810051e:	d29d      	bcs.n	810045c <__udivmoddi4+0x1e4>
 8100520:	ebbe 0302 	subs.w	r3, lr, r2
 8100524:	eb6c 0c07 	sbc.w	ip, ip, r7
 8100528:	3801      	subs	r0, #1
 810052a:	46e1      	mov	r9, ip
 810052c:	e796      	b.n	810045c <__udivmoddi4+0x1e4>
 810052e:	eba7 0909 	sub.w	r9, r7, r9
 8100532:	4449      	add	r1, r9
 8100534:	f1a8 0c02 	sub.w	ip, r8, #2
 8100538:	fbb1 f9fe 	udiv	r9, r1, lr
 810053c:	fb09 f804 	mul.w	r8, r9, r4
 8100540:	e7db      	b.n	81004fa <__udivmoddi4+0x282>
 8100542:	4673      	mov	r3, lr
 8100544:	e77f      	b.n	8100446 <__udivmoddi4+0x1ce>
 8100546:	4650      	mov	r0, sl
 8100548:	e766      	b.n	8100418 <__udivmoddi4+0x1a0>
 810054a:	4608      	mov	r0, r1
 810054c:	e6fd      	b.n	810034a <__udivmoddi4+0xd2>
 810054e:	443b      	add	r3, r7
 8100550:	3a02      	subs	r2, #2
 8100552:	e733      	b.n	81003bc <__udivmoddi4+0x144>
 8100554:	f1ac 0c02 	sub.w	ip, ip, #2
 8100558:	443b      	add	r3, r7
 810055a:	e71c      	b.n	8100396 <__udivmoddi4+0x11e>
 810055c:	4649      	mov	r1, r9
 810055e:	e79c      	b.n	810049a <__udivmoddi4+0x222>
 8100560:	eba1 0109 	sub.w	r1, r1, r9
 8100564:	46c4      	mov	ip, r8
 8100566:	fbb1 f9fe 	udiv	r9, r1, lr
 810056a:	fb09 f804 	mul.w	r8, r9, r4
 810056e:	e7c4      	b.n	81004fa <__udivmoddi4+0x282>

08100570 <__aeabi_idiv0>:
 8100570:	4770      	bx	lr
 8100572:	bf00      	nop

08100574 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8100574:	b480      	push	{r7}
 8100576:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8100578:	f3bf 8f4f 	dsb	sy
}
 810057c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 810057e:	4b06      	ldr	r3, [pc, #24]	@ (8100598 <__NVIC_SystemReset+0x24>)
 8100580:	68db      	ldr	r3, [r3, #12]
 8100582:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8100586:	4904      	ldr	r1, [pc, #16]	@ (8100598 <__NVIC_SystemReset+0x24>)
 8100588:	4b04      	ldr	r3, [pc, #16]	@ (810059c <__NVIC_SystemReset+0x28>)
 810058a:	4313      	orrs	r3, r2
 810058c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 810058e:	f3bf 8f4f 	dsb	sy
}
 8100592:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8100594:	bf00      	nop
 8100596:	e7fd      	b.n	8100594 <__NVIC_SystemReset+0x20>
 8100598:	e000ed00 	.word	0xe000ed00
 810059c:	05fa0004 	.word	0x05fa0004

081005a0 <SCB_InvalidateICache>:
/**
  \brief   Invalidate I-Cache
  \details Invalidates I-Cache
  */
__STATIC_INLINE void SCB_InvalidateICache (void)
{
 81005a0:	b480      	push	{r7}
 81005a2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 81005a4:	f3bf 8f4f 	dsb	sy
}
 81005a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81005aa:	f3bf 8f6f 	isb	sy
}
 81005ae:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 81005b0:	4b07      	ldr	r3, [pc, #28]	@ (81005d0 <SCB_InvalidateICache+0x30>)
 81005b2:	2200      	movs	r2, #0
 81005b4:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 81005b8:	f3bf 8f4f 	dsb	sy
}
 81005bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81005be:	f3bf 8f6f 	isb	sy
}
 81005c2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 81005c4:	bf00      	nop
 81005c6:	46bd      	mov	sp, r7
 81005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005cc:	4770      	bx	lr
 81005ce:	bf00      	nop
 81005d0:	e000ed00 	.word	0xe000ed00

081005d4 <SCB_CleanInvalidateDCache_by_Addr>:
  \details Cleans and invalidates D_Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanInvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 81005d4:	b480      	push	{r7}
 81005d6:	b087      	sub	sp, #28
 81005d8:	af00      	add	r7, sp, #0
 81005da:	6078      	str	r0, [r7, #4]
 81005dc:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 81005de:	683b      	ldr	r3, [r7, #0]
 81005e0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 81005e2:	687b      	ldr	r3, [r7, #4]
 81005e4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 81005e6:	2320      	movs	r3, #32
 81005e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 81005ea:	f3bf 8f4f 	dsb	sy
}
 81005ee:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 81005f0:	e00b      	b.n	810060a <SCB_CleanInvalidateDCache_by_Addr+0x36>
      SCB->DCCIMVAC = op_addr;
 81005f2:	4a0d      	ldr	r2, [pc, #52]	@ (8100628 <SCB_CleanInvalidateDCache_by_Addr+0x54>)
 81005f4:	693b      	ldr	r3, [r7, #16]
 81005f6:	f8c2 3270 	str.w	r3, [r2, #624]	@ 0x270
      op_addr += (uint32_t)linesize;
 81005fa:	68fb      	ldr	r3, [r7, #12]
 81005fc:	693a      	ldr	r2, [r7, #16]
 81005fe:	4413      	add	r3, r2
 8100600:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8100602:	697a      	ldr	r2, [r7, #20]
 8100604:	68fb      	ldr	r3, [r7, #12]
 8100606:	1ad3      	subs	r3, r2, r3
 8100608:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 810060a:	697b      	ldr	r3, [r7, #20]
 810060c:	2b00      	cmp	r3, #0
 810060e:	dcf0      	bgt.n	81005f2 <SCB_CleanInvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8100610:	f3bf 8f4f 	dsb	sy
}
 8100614:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100616:	f3bf 8f6f 	isb	sy
}
 810061a:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 810061c:	bf00      	nop
 810061e:	371c      	adds	r7, #28
 8100620:	46bd      	mov	sp, r7
 8100622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100626:	4770      	bx	lr
 8100628:	e000ed00 	.word	0xe000ed00

0810062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 810062c:	b580      	push	{r7, lr}
 810062e:	b088      	sub	sp, #32
 8100630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	SCB->VTOR = 0x08100000;
 8100632:	4b5c      	ldr	r3, [pc, #368]	@ (81007a4 <main+0x178>)
 8100634:	f04f 6201 	mov.w	r2, #135266304	@ 0x8100000
 8100638:	609a      	str	r2, [r3, #8]

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  HAL_Init();
 810063a:	f000 fb76 	bl	8100d2a <HAL_Init>


  /* USER CODE BEGIN Init */
  uint32_t tickstartld = 0;
 810063e:	2300      	movs	r3, #0
 8100640:	61fb      	str	r3, [r7, #28]
  uint32_t waitld = 500;
 8100642:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8100646:	60bb      	str	r3, [r7, #8]

  GPIO_PinState Bt_state;

  uint32_t tick = 0;
 8100648:	2300      	movs	r3, #0
 810064a:	607b      	str	r3, [r7, #4]


  uint8_t buttonPressed = 0;
 810064c:	2300      	movs	r3, #0
 810064e:	76fb      	strb	r3, [r7, #27]
  uint32_t pressStartTick = 0;
 8100650:	2300      	movs	r3, #0
 8100652:	617b      	str	r3, [r7, #20]


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8100654:	f000 f8be 	bl	81007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100658:	f000 f95c 	bl	8100914 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 810065c:	f000 f92a 	bl	81008b4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8100660:	2200      	movs	r2, #0
 8100662:	2180      	movs	r1, #128	@ 0x80
 8100664:	4850      	ldr	r0, [pc, #320]	@ (81007a8 <main+0x17c>)
 8100666:	f001 f91f 	bl	81018a8 <HAL_GPIO_WritePin>

  write("\nStarting application\n");
 810066a:	4850      	ldr	r0, [pc, #320]	@ (81007ac <main+0x180>)
 810066c:	f000 f9ae 	bl	81009cc <write>

  readLED_flash();
 8100670:	f000 fa04 	bl	8100a7c <readLED_flash>
  if(count == 0){
 8100674:	4b4e      	ldr	r3, [pc, #312]	@ (81007b0 <main+0x184>)
 8100676:	781b      	ldrb	r3, [r3, #0]
 8100678:	2b00      	cmp	r3, #0
 810067a:	d103      	bne.n	8100684 <main+0x58>
	  write("Blue led should blink");
 810067c:	484d      	ldr	r0, [pc, #308]	@ (81007b4 <main+0x188>)
 810067e:	f000 f9a5 	bl	81009cc <write>
 8100682:	e002      	b.n	810068a <main+0x5e>
  }
  else{
	  write("Red led should blink");
 8100684:	484c      	ldr	r0, [pc, #304]	@ (81007b8 <main+0x18c>)
 8100686:	f000 f9a1 	bl	81009cc <write>
  }

  readTXT_flash();
 810068a:	f000 fa17 	bl	8100abc <readTXT_flash>
  write("\nStored sentence: ");
 810068e:	484b      	ldr	r0, [pc, #300]	@ (81007bc <main+0x190>)
 8100690:	f000 f99c 	bl	81009cc <write>
  write(stored_sen);
 8100694:	484a      	ldr	r0, [pc, #296]	@ (81007c0 <main+0x194>)
 8100696:	f000 f999 	bl	81009cc <write>
  write("\r\n");
 810069a:	484a      	ldr	r0, [pc, #296]	@ (81007c4 <main+0x198>)
 810069c:	f000 f996 	bl	81009cc <write>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  tick = HAL_GetTick();
 81006a0:	f000 fb94 	bl	8100dcc <HAL_GetTick>
 81006a4:	6078      	str	r0, [r7, #4]

	  if ((tick - tickstartld) >= waitld)
 81006a6:	687a      	ldr	r2, [r7, #4]
 81006a8:	69fb      	ldr	r3, [r7, #28]
 81006aa:	1ad3      	subs	r3, r2, r3
 81006ac:	68ba      	ldr	r2, [r7, #8]
 81006ae:	429a      	cmp	r2, r3
 81006b0:	d81a      	bhi.n	81006e8 <main+0xbc>
	  {
	  	tickstartld = tick;
 81006b2:	687b      	ldr	r3, [r7, #4]
 81006b4:	61fb      	str	r3, [r7, #28]

	  	if (count == 0) {
 81006b6:	4b3e      	ldr	r3, [pc, #248]	@ (81007b0 <main+0x184>)
 81006b8:	781b      	ldrb	r3, [r3, #0]
 81006ba:	2b00      	cmp	r3, #0
 81006bc:	d10a      	bne.n	81006d4 <main+0xa8>
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 81006be:	2200      	movs	r2, #0
 81006c0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 81006c4:	4838      	ldr	r0, [pc, #224]	@ (81007a8 <main+0x17c>)
 81006c6:	f001 f8ef 	bl	81018a8 <HAL_GPIO_WritePin>
	  		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 81006ca:	2180      	movs	r1, #128	@ 0x80
 81006cc:	4836      	ldr	r0, [pc, #216]	@ (81007a8 <main+0x17c>)
 81006ce:	f001 f904 	bl	81018da <HAL_GPIO_TogglePin>
 81006d2:	e009      	b.n	81006e8 <main+0xbc>


	  	} else {
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 81006d4:	2200      	movs	r2, #0
 81006d6:	2180      	movs	r1, #128	@ 0x80
 81006d8:	4833      	ldr	r0, [pc, #204]	@ (81007a8 <main+0x17c>)
 81006da:	f001 f8e5 	bl	81018a8 <HAL_GPIO_WritePin>
	  		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 81006de:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 81006e2:	4831      	ldr	r0, [pc, #196]	@ (81007a8 <main+0x17c>)
 81006e4:	f001 f8f9 	bl	81018da <HAL_GPIO_TogglePin>
	  	}
	  }

	  Bt_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 81006e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 81006ec:	4836      	ldr	r0, [pc, #216]	@ (81007c8 <main+0x19c>)
 81006ee:	f001 f8c3 	bl	8101878 <HAL_GPIO_ReadPin>
 81006f2:	4603      	mov	r3, r0
 81006f4:	70fb      	strb	r3, [r7, #3]

	  if (Bt_state == GPIO_PIN_SET) {
 81006f6:	78fb      	ldrb	r3, [r7, #3]
 81006f8:	2b01      	cmp	r3, #1
 81006fa:	d107      	bne.n	810070c <main+0xe0>
	  	if (!buttonPressed) {
 81006fc:	7efb      	ldrb	r3, [r7, #27]
 81006fe:	2b00      	cmp	r3, #0
 8100700:	d1ce      	bne.n	81006a0 <main+0x74>

	  		buttonPressed = 1;
 8100702:	2301      	movs	r3, #1
 8100704:	76fb      	strb	r3, [r7, #27]
	  		pressStartTick = tick;
 8100706:	687b      	ldr	r3, [r7, #4]
 8100708:	617b      	str	r3, [r7, #20]
 810070a:	e7c9      	b.n	81006a0 <main+0x74>
	  	}
	  } else {
	  	if (buttonPressed) {
 810070c:	7efb      	ldrb	r3, [r7, #27]
 810070e:	2b00      	cmp	r3, #0
 8100710:	d0c6      	beq.n	81006a0 <main+0x74>

	  		buttonPressed = 0;
 8100712:	2300      	movs	r3, #0
 8100714:	76fb      	strb	r3, [r7, #27]
	  		if ((tick - pressStartTick) >= 3000) {
 8100716:	687a      	ldr	r2, [r7, #4]
 8100718:	697b      	ldr	r3, [r7, #20]
 810071a:	1ad3      	subs	r3, r2, r3
 810071c:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8100720:	4293      	cmp	r3, r2
 8100722:	d902      	bls.n	810072a <main+0xfe>
	  			goto_bootloader();
 8100724:	f000 f96c 	bl	8100a00 <goto_bootloader>
 8100728:	e7ba      	b.n	81006a0 <main+0x74>
	  		} else {
	  			count = !count;
 810072a:	4b21      	ldr	r3, [pc, #132]	@ (81007b0 <main+0x184>)
 810072c:	781b      	ldrb	r3, [r3, #0]
 810072e:	2b00      	cmp	r3, #0
 8100730:	bf0c      	ite	eq
 8100732:	2301      	moveq	r3, #1
 8100734:	2300      	movne	r3, #0
 8100736:	b2db      	uxtb	r3, r3
 8100738:	461a      	mov	r2, r3
 810073a:	4b1d      	ldr	r3, [pc, #116]	@ (81007b0 <main+0x184>)
 810073c:	701a      	strb	r2, [r3, #0]
	  			erase_flash();
 810073e:	f000 f969 	bl	8100a14 <erase_flash>
	  			uint32_t count_Address = TXT_Address;
 8100742:	4b22      	ldr	r3, [pc, #136]	@ (81007cc <main+0x1a0>)
 8100744:	681b      	ldr	r3, [r3, #0]
 8100746:	613b      	str	r3, [r7, #16]

	  			for (size_t i=0; i<strlen(stored_sen); i++) {
 8100748:	2300      	movs	r3, #0
 810074a:	60fb      	str	r3, [r7, #12]
 810074c:	e00c      	b.n	8100768 <main+0x13c>
	  				program_flash((uint8_t)stored_sen[i], count_Address++);
 810074e:	4a1c      	ldr	r2, [pc, #112]	@ (81007c0 <main+0x194>)
 8100750:	68fb      	ldr	r3, [r7, #12]
 8100752:	4413      	add	r3, r2
 8100754:	7818      	ldrb	r0, [r3, #0]
 8100756:	693b      	ldr	r3, [r7, #16]
 8100758:	1c5a      	adds	r2, r3, #1
 810075a:	613a      	str	r2, [r7, #16]
 810075c:	4619      	mov	r1, r3
 810075e:	f000 f974 	bl	8100a4a <program_flash>
	  			for (size_t i=0; i<strlen(stored_sen); i++) {
 8100762:	68fb      	ldr	r3, [r7, #12]
 8100764:	3301      	adds	r3, #1
 8100766:	60fb      	str	r3, [r7, #12]
 8100768:	4815      	ldr	r0, [pc, #84]	@ (81007c0 <main+0x194>)
 810076a:	f7ff fd65 	bl	8100238 <strlen>
 810076e:	4602      	mov	r2, r0
 8100770:	68fb      	ldr	r3, [r7, #12]
 8100772:	4293      	cmp	r3, r2
 8100774:	d3eb      	bcc.n	810074e <main+0x122>
	  			}
	  			program_flash(0x00, count_Address);
 8100776:	6939      	ldr	r1, [r7, #16]
 8100778:	2000      	movs	r0, #0
 810077a:	f000 f966 	bl	8100a4a <program_flash>

	  			InvalidateFlashRange(TXT_Address, (count_Address - TXT_Address) + 1);
 810077e:	4b13      	ldr	r3, [pc, #76]	@ (81007cc <main+0x1a0>)
 8100780:	6818      	ldr	r0, [r3, #0]
 8100782:	4b12      	ldr	r3, [pc, #72]	@ (81007cc <main+0x1a0>)
 8100784:	681b      	ldr	r3, [r3, #0]
 8100786:	693a      	ldr	r2, [r7, #16]
 8100788:	1ad3      	subs	r3, r2, r3
 810078a:	3301      	adds	r3, #1
 810078c:	4619      	mov	r1, r3
 810078e:	f000 f9b7 	bl	8100b00 <InvalidateFlashRange>
	  			program_flash(count, LED_Address);
 8100792:	4b07      	ldr	r3, [pc, #28]	@ (81007b0 <main+0x184>)
 8100794:	781b      	ldrb	r3, [r3, #0]
 8100796:	4a0e      	ldr	r2, [pc, #56]	@ (81007d0 <main+0x1a4>)
 8100798:	6812      	ldr	r2, [r2, #0]
 810079a:	4611      	mov	r1, r2
 810079c:	4618      	mov	r0, r3
 810079e:	f000 f954 	bl	8100a4a <program_flash>
	  tick = HAL_GetTick();
 81007a2:	e77d      	b.n	81006a0 <main+0x74>
 81007a4:	e000ed00 	.word	0xe000ed00
 81007a8:	40020400 	.word	0x40020400
 81007ac:	081036c8 	.word	0x081036c8
 81007b0:	200000b8 	.word	0x200000b8
 81007b4:	081036e0 	.word	0x081036e0
 81007b8:	081036f8 	.word	0x081036f8
 81007bc:	08103710 	.word	0x08103710
 81007c0:	200000bc 	.word	0x200000bc
 81007c4:	08103724 	.word	0x08103724
 81007c8:	40020800 	.word	0x40020800
 81007cc:	20000000 	.word	0x20000000
 81007d0:	20000004 	.word	0x20000004

081007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 81007d4:	b580      	push	{r7, lr}
 81007d6:	b094      	sub	sp, #80	@ 0x50
 81007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 81007da:	f107 031c 	add.w	r3, r7, #28
 81007de:	2234      	movs	r2, #52	@ 0x34
 81007e0:	2100      	movs	r1, #0
 81007e2:	4618      	mov	r0, r3
 81007e4:	f002 ff37 	bl	8103656 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 81007e8:	f107 0308 	add.w	r3, r7, #8
 81007ec:	2200      	movs	r2, #0
 81007ee:	601a      	str	r2, [r3, #0]
 81007f0:	605a      	str	r2, [r3, #4]
 81007f2:	609a      	str	r2, [r3, #8]
 81007f4:	60da      	str	r2, [r3, #12]
 81007f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 81007f8:	4b2c      	ldr	r3, [pc, #176]	@ (81008ac <SystemClock_Config+0xd8>)
 81007fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81007fc:	4a2b      	ldr	r2, [pc, #172]	@ (81008ac <SystemClock_Config+0xd8>)
 81007fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8100802:	6413      	str	r3, [r2, #64]	@ 0x40
 8100804:	4b29      	ldr	r3, [pc, #164]	@ (81008ac <SystemClock_Config+0xd8>)
 8100806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8100808:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810080c:	607b      	str	r3, [r7, #4]
 810080e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8100810:	4b27      	ldr	r3, [pc, #156]	@ (81008b0 <SystemClock_Config+0xdc>)
 8100812:	681b      	ldr	r3, [r3, #0]
 8100814:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8100818:	4a25      	ldr	r2, [pc, #148]	@ (81008b0 <SystemClock_Config+0xdc>)
 810081a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 810081e:	6013      	str	r3, [r2, #0]
 8100820:	4b23      	ldr	r3, [pc, #140]	@ (81008b0 <SystemClock_Config+0xdc>)
 8100822:	681b      	ldr	r3, [r3, #0]
 8100824:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8100828:	603b      	str	r3, [r7, #0]
 810082a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 810082c:	2302      	movs	r3, #2
 810082e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8100830:	2301      	movs	r3, #1
 8100832:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8100834:	2310      	movs	r3, #16
 8100836:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8100838:	2302      	movs	r3, #2
 810083a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 810083c:	2300      	movs	r3, #0
 810083e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8100840:	2308      	movs	r3, #8
 8100842:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8100844:	2360      	movs	r3, #96	@ 0x60
 8100846:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8100848:	2302      	movs	r3, #2
 810084a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 810084c:	2304      	movs	r3, #4
 810084e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8100850:	2302      	movs	r3, #2
 8100852:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8100854:	f107 031c 	add.w	r3, r7, #28
 8100858:	4618      	mov	r0, r3
 810085a:	f001 f8a9 	bl	81019b0 <HAL_RCC_OscConfig>
 810085e:	4603      	mov	r3, r0
 8100860:	2b00      	cmp	r3, #0
 8100862:	d001      	beq.n	8100868 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8100864:	f000 f96c 	bl	8100b40 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8100868:	f001 f852 	bl	8101910 <HAL_PWREx_EnableOverDrive>
 810086c:	4603      	mov	r3, r0
 810086e:	2b00      	cmp	r3, #0
 8100870:	d001      	beq.n	8100876 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8100872:	f000 f965 	bl	8100b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8100876:	230f      	movs	r3, #15
 8100878:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 810087a:	2302      	movs	r3, #2
 810087c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 810087e:	2300      	movs	r3, #0
 8100880:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8100882:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8100886:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8100888:	2300      	movs	r3, #0
 810088a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 810088c:	f107 0308 	add.w	r3, r7, #8
 8100890:	2103      	movs	r1, #3
 8100892:	4618      	mov	r0, r3
 8100894:	f001 fb3a 	bl	8101f0c <HAL_RCC_ClockConfig>
 8100898:	4603      	mov	r3, r0
 810089a:	2b00      	cmp	r3, #0
 810089c:	d001      	beq.n	81008a2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 810089e:	f000 f94f 	bl	8100b40 <Error_Handler>
  }
}
 81008a2:	bf00      	nop
 81008a4:	3750      	adds	r7, #80	@ 0x50
 81008a6:	46bd      	mov	sp, r7
 81008a8:	bd80      	pop	{r7, pc}
 81008aa:	bf00      	nop
 81008ac:	40023800 	.word	0x40023800
 81008b0:	40007000 	.word	0x40007000

081008b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 81008b4:	b580      	push	{r7, lr}
 81008b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 81008b8:	4b14      	ldr	r3, [pc, #80]	@ (810090c <MX_USART3_UART_Init+0x58>)
 81008ba:	4a15      	ldr	r2, [pc, #84]	@ (8100910 <MX_USART3_UART_Init+0x5c>)
 81008bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 81008be:	4b13      	ldr	r3, [pc, #76]	@ (810090c <MX_USART3_UART_Init+0x58>)
 81008c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 81008c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 81008c6:	4b11      	ldr	r3, [pc, #68]	@ (810090c <MX_USART3_UART_Init+0x58>)
 81008c8:	2200      	movs	r2, #0
 81008ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 81008cc:	4b0f      	ldr	r3, [pc, #60]	@ (810090c <MX_USART3_UART_Init+0x58>)
 81008ce:	2200      	movs	r2, #0
 81008d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 81008d2:	4b0e      	ldr	r3, [pc, #56]	@ (810090c <MX_USART3_UART_Init+0x58>)
 81008d4:	2200      	movs	r2, #0
 81008d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 81008d8:	4b0c      	ldr	r3, [pc, #48]	@ (810090c <MX_USART3_UART_Init+0x58>)
 81008da:	220c      	movs	r2, #12
 81008dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81008de:	4b0b      	ldr	r3, [pc, #44]	@ (810090c <MX_USART3_UART_Init+0x58>)
 81008e0:	2200      	movs	r2, #0
 81008e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 81008e4:	4b09      	ldr	r3, [pc, #36]	@ (810090c <MX_USART3_UART_Init+0x58>)
 81008e6:	2200      	movs	r2, #0
 81008e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81008ea:	4b08      	ldr	r3, [pc, #32]	@ (810090c <MX_USART3_UART_Init+0x58>)
 81008ec:	2200      	movs	r2, #0
 81008ee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81008f0:	4b06      	ldr	r3, [pc, #24]	@ (810090c <MX_USART3_UART_Init+0x58>)
 81008f2:	2200      	movs	r2, #0
 81008f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 81008f6:	4805      	ldr	r0, [pc, #20]	@ (810090c <MX_USART3_UART_Init+0x58>)
 81008f8:	f002 f956 	bl	8102ba8 <HAL_UART_Init>
 81008fc:	4603      	mov	r3, r0
 81008fe:	2b00      	cmp	r3, #0
 8100900:	d001      	beq.n	8100906 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8100902:	f000 f91d 	bl	8100b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8100906:	bf00      	nop
 8100908:	bd80      	pop	{r7, pc}
 810090a:	bf00      	nop
 810090c:	20000030 	.word	0x20000030
 8100910:	40004800 	.word	0x40004800

08100914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100914:	b580      	push	{r7, lr}
 8100916:	b088      	sub	sp, #32
 8100918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810091a:	f107 030c 	add.w	r3, r7, #12
 810091e:	2200      	movs	r2, #0
 8100920:	601a      	str	r2, [r3, #0]
 8100922:	605a      	str	r2, [r3, #4]
 8100924:	609a      	str	r2, [r3, #8]
 8100926:	60da      	str	r2, [r3, #12]
 8100928:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 810092a:	4b25      	ldr	r3, [pc, #148]	@ (81009c0 <MX_GPIO_Init+0xac>)
 810092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810092e:	4a24      	ldr	r2, [pc, #144]	@ (81009c0 <MX_GPIO_Init+0xac>)
 8100930:	f043 0304 	orr.w	r3, r3, #4
 8100934:	6313      	str	r3, [r2, #48]	@ 0x30
 8100936:	4b22      	ldr	r3, [pc, #136]	@ (81009c0 <MX_GPIO_Init+0xac>)
 8100938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810093a:	f003 0304 	and.w	r3, r3, #4
 810093e:	60bb      	str	r3, [r7, #8]
 8100940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100942:	4b1f      	ldr	r3, [pc, #124]	@ (81009c0 <MX_GPIO_Init+0xac>)
 8100944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100946:	4a1e      	ldr	r2, [pc, #120]	@ (81009c0 <MX_GPIO_Init+0xac>)
 8100948:	f043 0302 	orr.w	r3, r3, #2
 810094c:	6313      	str	r3, [r2, #48]	@ 0x30
 810094e:	4b1c      	ldr	r3, [pc, #112]	@ (81009c0 <MX_GPIO_Init+0xac>)
 8100950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100952:	f003 0302 	and.w	r3, r3, #2
 8100956:	607b      	str	r3, [r7, #4]
 8100958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 810095a:	4b19      	ldr	r3, [pc, #100]	@ (81009c0 <MX_GPIO_Init+0xac>)
 810095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810095e:	4a18      	ldr	r2, [pc, #96]	@ (81009c0 <MX_GPIO_Init+0xac>)
 8100960:	f043 0308 	orr.w	r3, r3, #8
 8100964:	6313      	str	r3, [r2, #48]	@ 0x30
 8100966:	4b16      	ldr	r3, [pc, #88]	@ (81009c0 <MX_GPIO_Init+0xac>)
 8100968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810096a:	f003 0308 	and.w	r3, r3, #8
 810096e:	603b      	str	r3, [r7, #0]
 8100970:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8100972:	2200      	movs	r2, #0
 8100974:	f244 0181 	movw	r1, #16513	@ 0x4081
 8100978:	4812      	ldr	r0, [pc, #72]	@ (81009c4 <MX_GPIO_Init+0xb0>)
 810097a:	f000 ff95 	bl	81018a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 810097e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8100982:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8100984:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8100988:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810098a:	2300      	movs	r3, #0
 810098c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 810098e:	f107 030c 	add.w	r3, r7, #12
 8100992:	4619      	mov	r1, r3
 8100994:	480c      	ldr	r0, [pc, #48]	@ (81009c8 <MX_GPIO_Init+0xb4>)
 8100996:	f000 fdc3 	bl	8101520 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 810099a:	f244 0381 	movw	r3, #16513	@ 0x4081
 810099e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81009a0:	2301      	movs	r3, #1
 81009a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81009a4:	2300      	movs	r3, #0
 81009a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81009a8:	2300      	movs	r3, #0
 81009aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81009ac:	f107 030c 	add.w	r3, r7, #12
 81009b0:	4619      	mov	r1, r3
 81009b2:	4804      	ldr	r0, [pc, #16]	@ (81009c4 <MX_GPIO_Init+0xb0>)
 81009b4:	f000 fdb4 	bl	8101520 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 81009b8:	bf00      	nop
 81009ba:	3720      	adds	r7, #32
 81009bc:	46bd      	mov	sp, r7
 81009be:	bd80      	pop	{r7, pc}
 81009c0:	40023800 	.word	0x40023800
 81009c4:	40020400 	.word	0x40020400
 81009c8:	40020800 	.word	0x40020800

081009cc <write>:

/* USER CODE BEGIN 4 */

int write(char *ptr){
 81009cc:	b580      	push	{r7, lr}
 81009ce:	b082      	sub	sp, #8
 81009d0:	af00      	add	r7, sp, #0
 81009d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)ptr, strlen(ptr), HAL_MAX_DELAY);
 81009d4:	6878      	ldr	r0, [r7, #4]
 81009d6:	f7ff fc2f 	bl	8100238 <strlen>
 81009da:	4603      	mov	r3, r0
 81009dc:	b29a      	uxth	r2, r3
 81009de:	f04f 33ff 	mov.w	r3, #4294967295
 81009e2:	6879      	ldr	r1, [r7, #4]
 81009e4:	4805      	ldr	r0, [pc, #20]	@ (81009fc <write+0x30>)
 81009e6:	f002 f92d 	bl	8102c44 <HAL_UART_Transmit>
	return strlen(ptr);
 81009ea:	6878      	ldr	r0, [r7, #4]
 81009ec:	f7ff fc24 	bl	8100238 <strlen>
 81009f0:	4603      	mov	r3, r0
}
 81009f2:	4618      	mov	r0, r3
 81009f4:	3708      	adds	r7, #8
 81009f6:	46bd      	mov	sp, r7
 81009f8:	bd80      	pop	{r7, pc}
 81009fa:	bf00      	nop
 81009fc:	20000030 	.word	0x20000030

08100a00 <goto_bootloader>:


static void goto_bootloader(void)
{
 8100a00:	b580      	push	{r7, lr}
 8100a02:	af00      	add	r7, sp, #0
	write("\nJumping to Bootloader");
 8100a04:	4802      	ldr	r0, [pc, #8]	@ (8100a10 <goto_bootloader+0x10>)
 8100a06:	f7ff ffe1 	bl	81009cc <write>
	NVIC_SystemReset();
 8100a0a:	f7ff fdb3 	bl	8100574 <__NVIC_SystemReset>
 8100a0e:	bf00      	nop
 8100a10:	08103728 	.word	0x08103728

08100a14 <erase_flash>:
}

void erase_flash(void){
 8100a14:	b580      	push	{r7, lr}
 8100a16:	b086      	sub	sp, #24
 8100a18:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef ERASE_STRUCT;
	ERASE_STRUCT.TypeErase = FLASH_TYPEERASE_SECTORS;
 8100a1a:	2300      	movs	r3, #0
 8100a1c:	607b      	str	r3, [r7, #4]
	ERASE_STRUCT.Banks = FLASH_BANK_1;
 8100a1e:	2301      	movs	r3, #1
 8100a20:	60bb      	str	r3, [r7, #8]
	ERASE_STRUCT.Sector = FLASH_SECTOR_11;
 8100a22:	230b      	movs	r3, #11
 8100a24:	60fb      	str	r3, [r7, #12]
	ERASE_STRUCT.NbSectors = 1;
 8100a26:	2301      	movs	r3, #1
 8100a28:	613b      	str	r3, [r7, #16]
	ERASE_STRUCT.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8100a2a:	2302      	movs	r3, #2
 8100a2c:	617b      	str	r3, [r7, #20]

	uint32_t Sector_error;

	HAL_FLASH_Unlock();
 8100a2e:	f000 fb19 	bl	8101064 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&ERASE_STRUCT, &Sector_error);
 8100a32:	463a      	mov	r2, r7
 8100a34:	1d3b      	adds	r3, r7, #4
 8100a36:	4611      	mov	r1, r2
 8100a38:	4618      	mov	r0, r3
 8100a3a:	f000 fc75 	bl	8101328 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8100a3e:	f000 fb33 	bl	81010a8 <HAL_FLASH_Lock>

}
 8100a42:	bf00      	nop
 8100a44:	3718      	adds	r7, #24
 8100a46:	46bd      	mov	sp, r7
 8100a48:	bd80      	pop	{r7, pc}

08100a4a <program_flash>:

void program_flash(uint8_t data, uint32_t address){
 8100a4a:	b5b0      	push	{r4, r5, r7, lr}
 8100a4c:	b082      	sub	sp, #8
 8100a4e:	af00      	add	r7, sp, #0
 8100a50:	4603      	mov	r3, r0
 8100a52:	6039      	str	r1, [r7, #0]
 8100a54:	71fb      	strb	r3, [r7, #7]

	HAL_FLASH_Unlock();
 8100a56:	f000 fb05 	bl	8101064 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address, data);
 8100a5a:	79fb      	ldrb	r3, [r7, #7]
 8100a5c:	2200      	movs	r2, #0
 8100a5e:	461c      	mov	r4, r3
 8100a60:	4615      	mov	r5, r2
 8100a62:	4622      	mov	r2, r4
 8100a64:	462b      	mov	r3, r5
 8100a66:	6839      	ldr	r1, [r7, #0]
 8100a68:	2000      	movs	r0, #0
 8100a6a:	f000 faa1 	bl	8100fb0 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8100a6e:	f000 fb1b 	bl	81010a8 <HAL_FLASH_Lock>

}
 8100a72:	bf00      	nop
 8100a74:	3708      	adds	r7, #8
 8100a76:	46bd      	mov	sp, r7
 8100a78:	bdb0      	pop	{r4, r5, r7, pc}
	...

08100a7c <readLED_flash>:

void readLED_flash(void){
 8100a7c:	b480      	push	{r7}
 8100a7e:	b083      	sub	sp, #12
 8100a80:	af00      	add	r7, sp, #0

	uint8_t data = (uint8_t) (* ((volatile uint32_t*) LED_Address));
 8100a82:	4b0c      	ldr	r3, [pc, #48]	@ (8100ab4 <readLED_flash+0x38>)
 8100a84:	681b      	ldr	r3, [r3, #0]
 8100a86:	681b      	ldr	r3, [r3, #0]
 8100a88:	71fb      	strb	r3, [r7, #7]

	if((data == 0) || (data == 1)){
 8100a8a:	79fb      	ldrb	r3, [r7, #7]
 8100a8c:	2b00      	cmp	r3, #0
 8100a8e:	d002      	beq.n	8100a96 <readLED_flash+0x1a>
 8100a90:	79fb      	ldrb	r3, [r7, #7]
 8100a92:	2b01      	cmp	r3, #1
 8100a94:	d103      	bne.n	8100a9e <readLED_flash+0x22>
		count = data;
 8100a96:	4a08      	ldr	r2, [pc, #32]	@ (8100ab8 <readLED_flash+0x3c>)
 8100a98:	79fb      	ldrb	r3, [r7, #7]
 8100a9a:	7013      	strb	r3, [r2, #0]
 8100a9c:	e003      	b.n	8100aa6 <readLED_flash+0x2a>
	}
	else{
		count = 0;
 8100a9e:	4b06      	ldr	r3, [pc, #24]	@ (8100ab8 <readLED_flash+0x3c>)
 8100aa0:	2200      	movs	r2, #0
 8100aa2:	701a      	strb	r2, [r3, #0]
	}

}
 8100aa4:	bf00      	nop
 8100aa6:	bf00      	nop
 8100aa8:	370c      	adds	r7, #12
 8100aaa:	46bd      	mov	sp, r7
 8100aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ab0:	4770      	bx	lr
 8100ab2:	bf00      	nop
 8100ab4:	20000004 	.word	0x20000004
 8100ab8:	200000b8 	.word	0x200000b8

08100abc <readTXT_flash>:

void readTXT_flash(void)
{
 8100abc:	b480      	push	{r7}
 8100abe:	b085      	sub	sp, #20
 8100ac0:	af00      	add	r7, sp, #0
    const char *ptr = (const char *)TXT_Address;
 8100ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8100af8 <readTXT_flash+0x3c>)
 8100ac4:	681b      	ldr	r3, [r3, #0]
 8100ac6:	60fb      	str	r3, [r7, #12]
    char *dst = stored_sen;
 8100ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8100afc <readTXT_flash+0x40>)
 8100aca:	60bb      	str	r3, [r7, #8]

    while (1) {
        char c = *ptr++;
 8100acc:	68fb      	ldr	r3, [r7, #12]
 8100ace:	1c5a      	adds	r2, r3, #1
 8100ad0:	60fa      	str	r2, [r7, #12]
 8100ad2:	781b      	ldrb	r3, [r3, #0]
 8100ad4:	71fb      	strb	r3, [r7, #7]
        *dst++ = c;
 8100ad6:	68bb      	ldr	r3, [r7, #8]
 8100ad8:	1c5a      	adds	r2, r3, #1
 8100ada:	60ba      	str	r2, [r7, #8]
 8100adc:	79fa      	ldrb	r2, [r7, #7]
 8100ade:	701a      	strb	r2, [r3, #0]
        if (c == '\0') {
 8100ae0:	79fb      	ldrb	r3, [r7, #7]
 8100ae2:	2b00      	cmp	r3, #0
 8100ae4:	d000      	beq.n	8100ae8 <readTXT_flash+0x2c>
    while (1) {
 8100ae6:	e7f1      	b.n	8100acc <readTXT_flash+0x10>
            break;
 8100ae8:	bf00      	nop
        }
    }
}
 8100aea:	bf00      	nop
 8100aec:	3714      	adds	r7, #20
 8100aee:	46bd      	mov	sp, r7
 8100af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100af4:	4770      	bx	lr
 8100af6:	bf00      	nop
 8100af8:	20000000 	.word	0x20000000
 8100afc:	200000bc 	.word	0x200000bc

08100b00 <InvalidateFlashRange>:

static void InvalidateFlashRange(uint32_t start_addr, uint32_t length)
{
 8100b00:	b580      	push	{r7, lr}
 8100b02:	b086      	sub	sp, #24
 8100b04:	af00      	add	r7, sp, #0
 8100b06:	6078      	str	r0, [r7, #4]
 8100b08:	6039      	str	r1, [r7, #0]

    uint32_t start = start_addr & ~31U;
 8100b0a:	687b      	ldr	r3, [r7, #4]
 8100b0c:	f023 031f 	bic.w	r3, r3, #31
 8100b10:	617b      	str	r3, [r7, #20]
    uint32_t end   = (start_addr + length + 31U) & ~31U;
 8100b12:	687a      	ldr	r2, [r7, #4]
 8100b14:	683b      	ldr	r3, [r7, #0]
 8100b16:	4413      	add	r3, r2
 8100b18:	331f      	adds	r3, #31
 8100b1a:	f023 031f 	bic.w	r3, r3, #31
 8100b1e:	613b      	str	r3, [r7, #16]
    uint32_t size  = end - start;
 8100b20:	693a      	ldr	r2, [r7, #16]
 8100b22:	697b      	ldr	r3, [r7, #20]
 8100b24:	1ad3      	subs	r3, r2, r3
 8100b26:	60fb      	str	r3, [r7, #12]

    SCB_CleanInvalidateDCache_by_Addr((void*)start, (int32_t)size);
 8100b28:	697b      	ldr	r3, [r7, #20]
 8100b2a:	68fa      	ldr	r2, [r7, #12]
 8100b2c:	4611      	mov	r1, r2
 8100b2e:	4618      	mov	r0, r3
 8100b30:	f7ff fd50 	bl	81005d4 <SCB_CleanInvalidateDCache_by_Addr>
    SCB_InvalidateICache();
 8100b34:	f7ff fd34 	bl	81005a0 <SCB_InvalidateICache>
}
 8100b38:	bf00      	nop
 8100b3a:	3718      	adds	r7, #24
 8100b3c:	46bd      	mov	sp, r7
 8100b3e:	bd80      	pop	{r7, pc}

08100b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100b40:	b480      	push	{r7}
 8100b42:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8100b44:	b672      	cpsid	i
}
 8100b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100b48:	bf00      	nop
 8100b4a:	e7fd      	b.n	8100b48 <Error_Handler+0x8>

08100b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100b4c:	b480      	push	{r7}
 8100b4e:	b083      	sub	sp, #12
 8100b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8100b52:	4b0f      	ldr	r3, [pc, #60]	@ (8100b90 <HAL_MspInit+0x44>)
 8100b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8100b56:	4a0e      	ldr	r2, [pc, #56]	@ (8100b90 <HAL_MspInit+0x44>)
 8100b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8100b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8100b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8100b90 <HAL_MspInit+0x44>)
 8100b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8100b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8100b66:	607b      	str	r3, [r7, #4]
 8100b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100b6a:	4b09      	ldr	r3, [pc, #36]	@ (8100b90 <HAL_MspInit+0x44>)
 8100b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8100b6e:	4a08      	ldr	r2, [pc, #32]	@ (8100b90 <HAL_MspInit+0x44>)
 8100b70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8100b74:	6453      	str	r3, [r2, #68]	@ 0x44
 8100b76:	4b06      	ldr	r3, [pc, #24]	@ (8100b90 <HAL_MspInit+0x44>)
 8100b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8100b7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8100b7e:	603b      	str	r3, [r7, #0]
 8100b80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100b82:	bf00      	nop
 8100b84:	370c      	adds	r7, #12
 8100b86:	46bd      	mov	sp, r7
 8100b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b8c:	4770      	bx	lr
 8100b8e:	bf00      	nop
 8100b90:	40023800 	.word	0x40023800

08100b94 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8100b94:	b580      	push	{r7, lr}
 8100b96:	b0ae      	sub	sp, #184	@ 0xb8
 8100b98:	af00      	add	r7, sp, #0
 8100b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100b9c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8100ba0:	2200      	movs	r2, #0
 8100ba2:	601a      	str	r2, [r3, #0]
 8100ba4:	605a      	str	r2, [r3, #4]
 8100ba6:	609a      	str	r2, [r3, #8]
 8100ba8:	60da      	str	r2, [r3, #12]
 8100baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100bac:	f107 0314 	add.w	r3, r7, #20
 8100bb0:	2290      	movs	r2, #144	@ 0x90
 8100bb2:	2100      	movs	r1, #0
 8100bb4:	4618      	mov	r0, r3
 8100bb6:	f002 fd4e 	bl	8103656 <memset>
  if(huart->Instance==USART3)
 8100bba:	687b      	ldr	r3, [r7, #4]
 8100bbc:	681b      	ldr	r3, [r3, #0]
 8100bbe:	4a22      	ldr	r2, [pc, #136]	@ (8100c48 <HAL_UART_MspInit+0xb4>)
 8100bc0:	4293      	cmp	r3, r2
 8100bc2:	d13c      	bne.n	8100c3e <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8100bc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8100bc8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8100bca:	2300      	movs	r3, #0
 8100bcc:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100bce:	f107 0314 	add.w	r3, r7, #20
 8100bd2:	4618      	mov	r0, r3
 8100bd4:	f001 fbc0 	bl	8102358 <HAL_RCCEx_PeriphCLKConfig>
 8100bd8:	4603      	mov	r3, r0
 8100bda:	2b00      	cmp	r3, #0
 8100bdc:	d001      	beq.n	8100be2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8100bde:	f7ff ffaf 	bl	8100b40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8100be2:	4b1a      	ldr	r3, [pc, #104]	@ (8100c4c <HAL_UART_MspInit+0xb8>)
 8100be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8100be6:	4a19      	ldr	r2, [pc, #100]	@ (8100c4c <HAL_UART_MspInit+0xb8>)
 8100be8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8100bec:	6413      	str	r3, [r2, #64]	@ 0x40
 8100bee:	4b17      	ldr	r3, [pc, #92]	@ (8100c4c <HAL_UART_MspInit+0xb8>)
 8100bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8100bf2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8100bf6:	613b      	str	r3, [r7, #16]
 8100bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8100bfa:	4b14      	ldr	r3, [pc, #80]	@ (8100c4c <HAL_UART_MspInit+0xb8>)
 8100bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100bfe:	4a13      	ldr	r2, [pc, #76]	@ (8100c4c <HAL_UART_MspInit+0xb8>)
 8100c00:	f043 0308 	orr.w	r3, r3, #8
 8100c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8100c06:	4b11      	ldr	r3, [pc, #68]	@ (8100c4c <HAL_UART_MspInit+0xb8>)
 8100c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100c0a:	f003 0308 	and.w	r3, r3, #8
 8100c0e:	60fb      	str	r3, [r7, #12]
 8100c10:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8100c12:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8100c16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100c1a:	2302      	movs	r3, #2
 8100c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100c20:	2300      	movs	r3, #0
 8100c22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100c26:	2303      	movs	r3, #3
 8100c28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8100c2c:	2307      	movs	r3, #7
 8100c2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8100c32:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8100c36:	4619      	mov	r1, r3
 8100c38:	4805      	ldr	r0, [pc, #20]	@ (8100c50 <HAL_UART_MspInit+0xbc>)
 8100c3a:	f000 fc71 	bl	8101520 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8100c3e:	bf00      	nop
 8100c40:	37b8      	adds	r7, #184	@ 0xb8
 8100c42:	46bd      	mov	sp, r7
 8100c44:	bd80      	pop	{r7, pc}
 8100c46:	bf00      	nop
 8100c48:	40004800 	.word	0x40004800
 8100c4c:	40023800 	.word	0x40023800
 8100c50:	40020c00 	.word	0x40020c00

08100c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100c54:	b480      	push	{r7}
 8100c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8100c58:	bf00      	nop
 8100c5a:	e7fd      	b.n	8100c58 <NMI_Handler+0x4>

08100c5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100c5c:	b480      	push	{r7}
 8100c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100c60:	bf00      	nop
 8100c62:	e7fd      	b.n	8100c60 <HardFault_Handler+0x4>

08100c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100c64:	b480      	push	{r7}
 8100c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100c68:	bf00      	nop
 8100c6a:	e7fd      	b.n	8100c68 <MemManage_Handler+0x4>

08100c6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100c6c:	b480      	push	{r7}
 8100c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100c70:	bf00      	nop
 8100c72:	e7fd      	b.n	8100c70 <BusFault_Handler+0x4>

08100c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100c74:	b480      	push	{r7}
 8100c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100c78:	bf00      	nop
 8100c7a:	e7fd      	b.n	8100c78 <UsageFault_Handler+0x4>

08100c7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100c7c:	b480      	push	{r7}
 8100c7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100c80:	bf00      	nop
 8100c82:	46bd      	mov	sp, r7
 8100c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c88:	4770      	bx	lr

08100c8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100c8a:	b480      	push	{r7}
 8100c8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100c8e:	bf00      	nop
 8100c90:	46bd      	mov	sp, r7
 8100c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c96:	4770      	bx	lr

08100c98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8100c98:	b480      	push	{r7}
 8100c9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8100c9c:	bf00      	nop
 8100c9e:	46bd      	mov	sp, r7
 8100ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ca4:	4770      	bx	lr

08100ca6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100ca6:	b580      	push	{r7, lr}
 8100ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8100caa:	f000 f87b 	bl	8100da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8100cae:	bf00      	nop
 8100cb0:	bd80      	pop	{r7, pc}
	...

08100cb4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8100cb4:	b480      	push	{r7}
 8100cb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8100cb8:	4b06      	ldr	r3, [pc, #24]	@ (8100cd4 <SystemInit+0x20>)
 8100cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8100cbe:	4a05      	ldr	r2, [pc, #20]	@ (8100cd4 <SystemInit+0x20>)
 8100cc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8100cc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8100cc8:	bf00      	nop
 8100cca:	46bd      	mov	sp, r7
 8100ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cd0:	4770      	bx	lr
 8100cd2:	bf00      	nop
 8100cd4:	e000ed00 	.word	0xe000ed00

08100cd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8100cd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8100d10 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8100cdc:	f7ff ffea 	bl	8100cb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8100ce0:	480c      	ldr	r0, [pc, #48]	@ (8100d14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100ce2:	490d      	ldr	r1, [pc, #52]	@ (8100d18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100ce4:	4a0d      	ldr	r2, [pc, #52]	@ (8100d1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100ce8:	e002      	b.n	8100cf0 <LoopCopyDataInit>

08100cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100cee:	3304      	adds	r3, #4

08100cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100cf4:	d3f9      	bcc.n	8100cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8100d20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100cf8:	4c0a      	ldr	r4, [pc, #40]	@ (8100d24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8100cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100cfc:	e001      	b.n	8100d02 <LoopFillZerobss>

08100cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100d00:	3204      	adds	r2, #4

08100d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100d04:	d3fb      	bcc.n	8100cfe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8100d06:	f002 fcaf 	bl	8103668 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100d0a:	f7ff fc8f 	bl	810062c <main>
  bx  lr    
 8100d0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100d10:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8100d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8100d18:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8100d1c:	08103768 	.word	0x08103768
  ldr r2, =_sbss
 8100d20:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8100d24:	200001dc 	.word	0x200001dc

08100d28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100d28:	e7fe      	b.n	8100d28 <ADC_IRQHandler>

08100d2a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100d2a:	b580      	push	{r7, lr}
 8100d2c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100d2e:	2003      	movs	r0, #3
 8100d30:	f000 f90a 	bl	8100f48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8100d34:	2000      	movs	r0, #0
 8100d36:	f000 f805 	bl	8100d44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8100d3a:	f7ff ff07 	bl	8100b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100d3e:	2300      	movs	r3, #0
}
 8100d40:	4618      	mov	r0, r3
 8100d42:	bd80      	pop	{r7, pc}

08100d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100d44:	b580      	push	{r7, lr}
 8100d46:	b082      	sub	sp, #8
 8100d48:	af00      	add	r7, sp, #0
 8100d4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8100d4c:	4b12      	ldr	r3, [pc, #72]	@ (8100d98 <HAL_InitTick+0x54>)
 8100d4e:	681a      	ldr	r2, [r3, #0]
 8100d50:	4b12      	ldr	r3, [pc, #72]	@ (8100d9c <HAL_InitTick+0x58>)
 8100d52:	781b      	ldrb	r3, [r3, #0]
 8100d54:	4619      	mov	r1, r3
 8100d56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8100d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8100d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8100d62:	4618      	mov	r0, r3
 8100d64:	f000 f917 	bl	8100f96 <HAL_SYSTICK_Config>
 8100d68:	4603      	mov	r3, r0
 8100d6a:	2b00      	cmp	r3, #0
 8100d6c:	d001      	beq.n	8100d72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8100d6e:	2301      	movs	r3, #1
 8100d70:	e00e      	b.n	8100d90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100d72:	687b      	ldr	r3, [r7, #4]
 8100d74:	2b0f      	cmp	r3, #15
 8100d76:	d80a      	bhi.n	8100d8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100d78:	2200      	movs	r2, #0
 8100d7a:	6879      	ldr	r1, [r7, #4]
 8100d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8100d80:	f000 f8ed 	bl	8100f5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100d84:	4a06      	ldr	r2, [pc, #24]	@ (8100da0 <HAL_InitTick+0x5c>)
 8100d86:	687b      	ldr	r3, [r7, #4]
 8100d88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100d8a:	2300      	movs	r3, #0
 8100d8c:	e000      	b.n	8100d90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8100d8e:	2301      	movs	r3, #1
}
 8100d90:	4618      	mov	r0, r3
 8100d92:	3708      	adds	r7, #8
 8100d94:	46bd      	mov	sp, r7
 8100d96:	bd80      	pop	{r7, pc}
 8100d98:	20000008 	.word	0x20000008
 8100d9c:	20000010 	.word	0x20000010
 8100da0:	2000000c 	.word	0x2000000c

08100da4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100da4:	b480      	push	{r7}
 8100da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8100da8:	4b06      	ldr	r3, [pc, #24]	@ (8100dc4 <HAL_IncTick+0x20>)
 8100daa:	781b      	ldrb	r3, [r3, #0]
 8100dac:	461a      	mov	r2, r3
 8100dae:	4b06      	ldr	r3, [pc, #24]	@ (8100dc8 <HAL_IncTick+0x24>)
 8100db0:	681b      	ldr	r3, [r3, #0]
 8100db2:	4413      	add	r3, r2
 8100db4:	4a04      	ldr	r2, [pc, #16]	@ (8100dc8 <HAL_IncTick+0x24>)
 8100db6:	6013      	str	r3, [r2, #0]
}
 8100db8:	bf00      	nop
 8100dba:	46bd      	mov	sp, r7
 8100dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100dc0:	4770      	bx	lr
 8100dc2:	bf00      	nop
 8100dc4:	20000010 	.word	0x20000010
 8100dc8:	200001bc 	.word	0x200001bc

08100dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100dcc:	b480      	push	{r7}
 8100dce:	af00      	add	r7, sp, #0
  return uwTick;
 8100dd0:	4b03      	ldr	r3, [pc, #12]	@ (8100de0 <HAL_GetTick+0x14>)
 8100dd2:	681b      	ldr	r3, [r3, #0]
}
 8100dd4:	4618      	mov	r0, r3
 8100dd6:	46bd      	mov	sp, r7
 8100dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ddc:	4770      	bx	lr
 8100dde:	bf00      	nop
 8100de0:	200001bc 	.word	0x200001bc

08100de4 <__NVIC_SetPriorityGrouping>:
{
 8100de4:	b480      	push	{r7}
 8100de6:	b085      	sub	sp, #20
 8100de8:	af00      	add	r7, sp, #0
 8100dea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100dec:	687b      	ldr	r3, [r7, #4]
 8100dee:	f003 0307 	and.w	r3, r3, #7
 8100df2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100df4:	4b0b      	ldr	r3, [pc, #44]	@ (8100e24 <__NVIC_SetPriorityGrouping+0x40>)
 8100df6:	68db      	ldr	r3, [r3, #12]
 8100df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100dfa:	68ba      	ldr	r2, [r7, #8]
 8100dfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8100e00:	4013      	ands	r3, r2
 8100e02:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100e04:	68fb      	ldr	r3, [r7, #12]
 8100e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100e08:	68bb      	ldr	r3, [r7, #8]
 8100e0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8100e0c:	4b06      	ldr	r3, [pc, #24]	@ (8100e28 <__NVIC_SetPriorityGrouping+0x44>)
 8100e0e:	4313      	orrs	r3, r2
 8100e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100e12:	4a04      	ldr	r2, [pc, #16]	@ (8100e24 <__NVIC_SetPriorityGrouping+0x40>)
 8100e14:	68bb      	ldr	r3, [r7, #8]
 8100e16:	60d3      	str	r3, [r2, #12]
}
 8100e18:	bf00      	nop
 8100e1a:	3714      	adds	r7, #20
 8100e1c:	46bd      	mov	sp, r7
 8100e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e22:	4770      	bx	lr
 8100e24:	e000ed00 	.word	0xe000ed00
 8100e28:	05fa0000 	.word	0x05fa0000

08100e2c <__NVIC_GetPriorityGrouping>:
{
 8100e2c:	b480      	push	{r7}
 8100e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100e30:	4b04      	ldr	r3, [pc, #16]	@ (8100e44 <__NVIC_GetPriorityGrouping+0x18>)
 8100e32:	68db      	ldr	r3, [r3, #12]
 8100e34:	0a1b      	lsrs	r3, r3, #8
 8100e36:	f003 0307 	and.w	r3, r3, #7
}
 8100e3a:	4618      	mov	r0, r3
 8100e3c:	46bd      	mov	sp, r7
 8100e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e42:	4770      	bx	lr
 8100e44:	e000ed00 	.word	0xe000ed00

08100e48 <__NVIC_SetPriority>:
{
 8100e48:	b480      	push	{r7}
 8100e4a:	b083      	sub	sp, #12
 8100e4c:	af00      	add	r7, sp, #0
 8100e4e:	4603      	mov	r3, r0
 8100e50:	6039      	str	r1, [r7, #0]
 8100e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8100e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8100e58:	2b00      	cmp	r3, #0
 8100e5a:	db0a      	blt.n	8100e72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100e5c:	683b      	ldr	r3, [r7, #0]
 8100e5e:	b2da      	uxtb	r2, r3
 8100e60:	490c      	ldr	r1, [pc, #48]	@ (8100e94 <__NVIC_SetPriority+0x4c>)
 8100e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8100e66:	0112      	lsls	r2, r2, #4
 8100e68:	b2d2      	uxtb	r2, r2
 8100e6a:	440b      	add	r3, r1
 8100e6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8100e70:	e00a      	b.n	8100e88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100e72:	683b      	ldr	r3, [r7, #0]
 8100e74:	b2da      	uxtb	r2, r3
 8100e76:	4908      	ldr	r1, [pc, #32]	@ (8100e98 <__NVIC_SetPriority+0x50>)
 8100e78:	79fb      	ldrb	r3, [r7, #7]
 8100e7a:	f003 030f 	and.w	r3, r3, #15
 8100e7e:	3b04      	subs	r3, #4
 8100e80:	0112      	lsls	r2, r2, #4
 8100e82:	b2d2      	uxtb	r2, r2
 8100e84:	440b      	add	r3, r1
 8100e86:	761a      	strb	r2, [r3, #24]
}
 8100e88:	bf00      	nop
 8100e8a:	370c      	adds	r7, #12
 8100e8c:	46bd      	mov	sp, r7
 8100e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e92:	4770      	bx	lr
 8100e94:	e000e100 	.word	0xe000e100
 8100e98:	e000ed00 	.word	0xe000ed00

08100e9c <NVIC_EncodePriority>:
{
 8100e9c:	b480      	push	{r7}
 8100e9e:	b089      	sub	sp, #36	@ 0x24
 8100ea0:	af00      	add	r7, sp, #0
 8100ea2:	60f8      	str	r0, [r7, #12]
 8100ea4:	60b9      	str	r1, [r7, #8]
 8100ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100ea8:	68fb      	ldr	r3, [r7, #12]
 8100eaa:	f003 0307 	and.w	r3, r3, #7
 8100eae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100eb0:	69fb      	ldr	r3, [r7, #28]
 8100eb2:	f1c3 0307 	rsb	r3, r3, #7
 8100eb6:	2b04      	cmp	r3, #4
 8100eb8:	bf28      	it	cs
 8100eba:	2304      	movcs	r3, #4
 8100ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100ebe:	69fb      	ldr	r3, [r7, #28]
 8100ec0:	3304      	adds	r3, #4
 8100ec2:	2b06      	cmp	r3, #6
 8100ec4:	d902      	bls.n	8100ecc <NVIC_EncodePriority+0x30>
 8100ec6:	69fb      	ldr	r3, [r7, #28]
 8100ec8:	3b03      	subs	r3, #3
 8100eca:	e000      	b.n	8100ece <NVIC_EncodePriority+0x32>
 8100ecc:	2300      	movs	r3, #0
 8100ece:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8100ed4:	69bb      	ldr	r3, [r7, #24]
 8100ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8100eda:	43da      	mvns	r2, r3
 8100edc:	68bb      	ldr	r3, [r7, #8]
 8100ede:	401a      	ands	r2, r3
 8100ee0:	697b      	ldr	r3, [r7, #20]
 8100ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8100ee8:	697b      	ldr	r3, [r7, #20]
 8100eea:	fa01 f303 	lsl.w	r3, r1, r3
 8100eee:	43d9      	mvns	r1, r3
 8100ef0:	687b      	ldr	r3, [r7, #4]
 8100ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100ef4:	4313      	orrs	r3, r2
}
 8100ef6:	4618      	mov	r0, r3
 8100ef8:	3724      	adds	r7, #36	@ 0x24
 8100efa:	46bd      	mov	sp, r7
 8100efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f00:	4770      	bx	lr
	...

08100f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100f04:	b580      	push	{r7, lr}
 8100f06:	b082      	sub	sp, #8
 8100f08:	af00      	add	r7, sp, #0
 8100f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100f0c:	687b      	ldr	r3, [r7, #4]
 8100f0e:	3b01      	subs	r3, #1
 8100f10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8100f14:	d301      	bcc.n	8100f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100f16:	2301      	movs	r3, #1
 8100f18:	e00f      	b.n	8100f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8100f44 <SysTick_Config+0x40>)
 8100f1c:	687b      	ldr	r3, [r7, #4]
 8100f1e:	3b01      	subs	r3, #1
 8100f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100f22:	210f      	movs	r1, #15
 8100f24:	f04f 30ff 	mov.w	r0, #4294967295
 8100f28:	f7ff ff8e 	bl	8100e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100f2c:	4b05      	ldr	r3, [pc, #20]	@ (8100f44 <SysTick_Config+0x40>)
 8100f2e:	2200      	movs	r2, #0
 8100f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100f32:	4b04      	ldr	r3, [pc, #16]	@ (8100f44 <SysTick_Config+0x40>)
 8100f34:	2207      	movs	r2, #7
 8100f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100f38:	2300      	movs	r3, #0
}
 8100f3a:	4618      	mov	r0, r3
 8100f3c:	3708      	adds	r7, #8
 8100f3e:	46bd      	mov	sp, r7
 8100f40:	bd80      	pop	{r7, pc}
 8100f42:	bf00      	nop
 8100f44:	e000e010 	.word	0xe000e010

08100f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100f48:	b580      	push	{r7, lr}
 8100f4a:	b082      	sub	sp, #8
 8100f4c:	af00      	add	r7, sp, #0
 8100f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100f50:	6878      	ldr	r0, [r7, #4]
 8100f52:	f7ff ff47 	bl	8100de4 <__NVIC_SetPriorityGrouping>
}
 8100f56:	bf00      	nop
 8100f58:	3708      	adds	r7, #8
 8100f5a:	46bd      	mov	sp, r7
 8100f5c:	bd80      	pop	{r7, pc}

08100f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8100f5e:	b580      	push	{r7, lr}
 8100f60:	b086      	sub	sp, #24
 8100f62:	af00      	add	r7, sp, #0
 8100f64:	4603      	mov	r3, r0
 8100f66:	60b9      	str	r1, [r7, #8]
 8100f68:	607a      	str	r2, [r7, #4]
 8100f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8100f6c:	2300      	movs	r3, #0
 8100f6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8100f70:	f7ff ff5c 	bl	8100e2c <__NVIC_GetPriorityGrouping>
 8100f74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100f76:	687a      	ldr	r2, [r7, #4]
 8100f78:	68b9      	ldr	r1, [r7, #8]
 8100f7a:	6978      	ldr	r0, [r7, #20]
 8100f7c:	f7ff ff8e 	bl	8100e9c <NVIC_EncodePriority>
 8100f80:	4602      	mov	r2, r0
 8100f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8100f86:	4611      	mov	r1, r2
 8100f88:	4618      	mov	r0, r3
 8100f8a:	f7ff ff5d 	bl	8100e48 <__NVIC_SetPriority>
}
 8100f8e:	bf00      	nop
 8100f90:	3718      	adds	r7, #24
 8100f92:	46bd      	mov	sp, r7
 8100f94:	bd80      	pop	{r7, pc}

08100f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100f96:	b580      	push	{r7, lr}
 8100f98:	b082      	sub	sp, #8
 8100f9a:	af00      	add	r7, sp, #0
 8100f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100f9e:	6878      	ldr	r0, [r7, #4]
 8100fa0:	f7ff ffb0 	bl	8100f04 <SysTick_Config>
 8100fa4:	4603      	mov	r3, r0
}
 8100fa6:	4618      	mov	r0, r3
 8100fa8:	3708      	adds	r7, #8
 8100faa:	46bd      	mov	sp, r7
 8100fac:	bd80      	pop	{r7, pc}
	...

08100fb0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8100fb0:	b580      	push	{r7, lr}
 8100fb2:	b086      	sub	sp, #24
 8100fb4:	af00      	add	r7, sp, #0
 8100fb6:	60f8      	str	r0, [r7, #12]
 8100fb8:	60b9      	str	r1, [r7, #8]
 8100fba:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8100fbe:	4b27      	ldr	r3, [pc, #156]	@ (810105c <HAL_FLASH_Program+0xac>)
 8100fc0:	7d1b      	ldrb	r3, [r3, #20]
 8100fc2:	2b01      	cmp	r3, #1
 8100fc4:	d101      	bne.n	8100fca <HAL_FLASH_Program+0x1a>
 8100fc6:	2302      	movs	r3, #2
 8100fc8:	e043      	b.n	8101052 <HAL_FLASH_Program+0xa2>
 8100fca:	4b24      	ldr	r3, [pc, #144]	@ (810105c <HAL_FLASH_Program+0xac>)
 8100fcc:	2201      	movs	r2, #1
 8100fce:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8100fd0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8100fd4:	f000 f878 	bl	81010c8 <FLASH_WaitForLastOperation>
 8100fd8:	4603      	mov	r3, r0
 8100fda:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8100fdc:	7dfb      	ldrb	r3, [r7, #23]
 8100fde:	2b00      	cmp	r3, #0
 8100fe0:	d133      	bne.n	810104a <HAL_FLASH_Program+0x9a>
  {
    switch(TypeProgram)
 8100fe2:	68fb      	ldr	r3, [r7, #12]
 8100fe4:	2b03      	cmp	r3, #3
 8100fe6:	d823      	bhi.n	8101030 <HAL_FLASH_Program+0x80>
 8100fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8100ff0 <HAL_FLASH_Program+0x40>)
 8100fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100fee:	bf00      	nop
 8100ff0:	08101001 	.word	0x08101001
 8100ff4:	0810100d 	.word	0x0810100d
 8100ff8:	08101019 	.word	0x08101019
 8100ffc:	08101025 	.word	0x08101025
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8101000:	783b      	ldrb	r3, [r7, #0]
 8101002:	4619      	mov	r1, r3
 8101004:	68b8      	ldr	r0, [r7, #8]
 8101006:	f000 f921 	bl	810124c <FLASH_Program_Byte>
        break;
 810100a:	e012      	b.n	8101032 <HAL_FLASH_Program+0x82>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 810100c:	883b      	ldrh	r3, [r7, #0]
 810100e:	4619      	mov	r1, r3
 8101010:	68b8      	ldr	r0, [r7, #8]
 8101012:	f000 f8f5 	bl	8101200 <FLASH_Program_HalfWord>
        break;
 8101016:	e00c      	b.n	8101032 <HAL_FLASH_Program+0x82>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8101018:	683b      	ldr	r3, [r7, #0]
 810101a:	4619      	mov	r1, r3
 810101c:	68b8      	ldr	r0, [r7, #8]
 810101e:	f000 f8c9 	bl	81011b4 <FLASH_Program_Word>
        break;
 8101022:	e006      	b.n	8101032 <HAL_FLASH_Program+0x82>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8101024:	e9d7 2300 	ldrd	r2, r3, [r7]
 8101028:	68b8      	ldr	r0, [r7, #8]
 810102a:	f000 f88d 	bl	8101148 <FLASH_Program_DoubleWord>
        break;
 810102e:	e000      	b.n	8101032 <HAL_FLASH_Program+0x82>
      }
      default :
        break;
 8101030:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8101032:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8101036:	f000 f847 	bl	81010c8 <FLASH_WaitForLastOperation>
 810103a:	4603      	mov	r3, r0
 810103c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 810103e:	4b08      	ldr	r3, [pc, #32]	@ (8101060 <HAL_FLASH_Program+0xb0>)
 8101040:	691b      	ldr	r3, [r3, #16]
 8101042:	4a07      	ldr	r2, [pc, #28]	@ (8101060 <HAL_FLASH_Program+0xb0>)
 8101044:	f023 0301 	bic.w	r3, r3, #1
 8101048:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 810104a:	4b04      	ldr	r3, [pc, #16]	@ (810105c <HAL_FLASH_Program+0xac>)
 810104c:	2200      	movs	r2, #0
 810104e:	751a      	strb	r2, [r3, #20]

  return status;
 8101050:	7dfb      	ldrb	r3, [r7, #23]
}
 8101052:	4618      	mov	r0, r3
 8101054:	3718      	adds	r7, #24
 8101056:	46bd      	mov	sp, r7
 8101058:	bd80      	pop	{r7, pc}
 810105a:	bf00      	nop
 810105c:	200001c0 	.word	0x200001c0
 8101060:	40023c00 	.word	0x40023c00

08101064 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8101064:	b480      	push	{r7}
 8101066:	b083      	sub	sp, #12
 8101068:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 810106a:	2300      	movs	r3, #0
 810106c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 810106e:	4b0b      	ldr	r3, [pc, #44]	@ (810109c <HAL_FLASH_Unlock+0x38>)
 8101070:	691b      	ldr	r3, [r3, #16]
 8101072:	2b00      	cmp	r3, #0
 8101074:	da0b      	bge.n	810108e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8101076:	4b09      	ldr	r3, [pc, #36]	@ (810109c <HAL_FLASH_Unlock+0x38>)
 8101078:	4a09      	ldr	r2, [pc, #36]	@ (81010a0 <HAL_FLASH_Unlock+0x3c>)
 810107a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 810107c:	4b07      	ldr	r3, [pc, #28]	@ (810109c <HAL_FLASH_Unlock+0x38>)
 810107e:	4a09      	ldr	r2, [pc, #36]	@ (81010a4 <HAL_FLASH_Unlock+0x40>)
 8101080:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8101082:	4b06      	ldr	r3, [pc, #24]	@ (810109c <HAL_FLASH_Unlock+0x38>)
 8101084:	691b      	ldr	r3, [r3, #16]
 8101086:	2b00      	cmp	r3, #0
 8101088:	da01      	bge.n	810108e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 810108a:	2301      	movs	r3, #1
 810108c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 810108e:	79fb      	ldrb	r3, [r7, #7]
}
 8101090:	4618      	mov	r0, r3
 8101092:	370c      	adds	r7, #12
 8101094:	46bd      	mov	sp, r7
 8101096:	f85d 7b04 	ldr.w	r7, [sp], #4
 810109a:	4770      	bx	lr
 810109c:	40023c00 	.word	0x40023c00
 81010a0:	45670123 	.word	0x45670123
 81010a4:	cdef89ab 	.word	0xcdef89ab

081010a8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 81010a8:	b480      	push	{r7}
 81010aa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 81010ac:	4b05      	ldr	r3, [pc, #20]	@ (81010c4 <HAL_FLASH_Lock+0x1c>)
 81010ae:	691b      	ldr	r3, [r3, #16]
 81010b0:	4a04      	ldr	r2, [pc, #16]	@ (81010c4 <HAL_FLASH_Lock+0x1c>)
 81010b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 81010b6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 81010b8:	2300      	movs	r3, #0
}
 81010ba:	4618      	mov	r0, r3
 81010bc:	46bd      	mov	sp, r7
 81010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010c2:	4770      	bx	lr
 81010c4:	40023c00 	.word	0x40023c00

081010c8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 81010c8:	b580      	push	{r7, lr}
 81010ca:	b084      	sub	sp, #16
 81010cc:	af00      	add	r7, sp, #0
 81010ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 81010d0:	2300      	movs	r3, #0
 81010d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 81010d4:	4b1a      	ldr	r3, [pc, #104]	@ (8101140 <FLASH_WaitForLastOperation+0x78>)
 81010d6:	2200      	movs	r2, #0
 81010d8:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 81010da:	f7ff fe77 	bl	8100dcc <HAL_GetTick>
 81010de:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 81010e0:	e010      	b.n	8101104 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 81010e2:	687b      	ldr	r3, [r7, #4]
 81010e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81010e8:	d00c      	beq.n	8101104 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 81010ea:	687b      	ldr	r3, [r7, #4]
 81010ec:	2b00      	cmp	r3, #0
 81010ee:	d007      	beq.n	8101100 <FLASH_WaitForLastOperation+0x38>
 81010f0:	f7ff fe6c 	bl	8100dcc <HAL_GetTick>
 81010f4:	4602      	mov	r2, r0
 81010f6:	68fb      	ldr	r3, [r7, #12]
 81010f8:	1ad3      	subs	r3, r2, r3
 81010fa:	687a      	ldr	r2, [r7, #4]
 81010fc:	429a      	cmp	r2, r3
 81010fe:	d201      	bcs.n	8101104 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8101100:	2303      	movs	r3, #3
 8101102:	e019      	b.n	8101138 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8101104:	4b0f      	ldr	r3, [pc, #60]	@ (8101144 <FLASH_WaitForLastOperation+0x7c>)
 8101106:	68db      	ldr	r3, [r3, #12]
 8101108:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810110c:	2b00      	cmp	r3, #0
 810110e:	d1e8      	bne.n	81010e2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8101110:	4b0c      	ldr	r3, [pc, #48]	@ (8101144 <FLASH_WaitForLastOperation+0x7c>)
 8101112:	68db      	ldr	r3, [r3, #12]
 8101114:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8101118:	2b00      	cmp	r3, #0
 810111a:	d003      	beq.n	8101124 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 810111c:	f000 f8ba 	bl	8101294 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8101120:	2301      	movs	r3, #1
 8101122:	e009      	b.n	8101138 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8101124:	4b07      	ldr	r3, [pc, #28]	@ (8101144 <FLASH_WaitForLastOperation+0x7c>)
 8101126:	68db      	ldr	r3, [r3, #12]
 8101128:	f003 0301 	and.w	r3, r3, #1
 810112c:	2b00      	cmp	r3, #0
 810112e:	d002      	beq.n	8101136 <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8101130:	4b04      	ldr	r3, [pc, #16]	@ (8101144 <FLASH_WaitForLastOperation+0x7c>)
 8101132:	2201      	movs	r2, #1
 8101134:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8101136:	2300      	movs	r3, #0
  
}  
 8101138:	4618      	mov	r0, r3
 810113a:	3710      	adds	r7, #16
 810113c:	46bd      	mov	sp, r7
 810113e:	bd80      	pop	{r7, pc}
 8101140:	200001c0 	.word	0x200001c0
 8101144:	40023c00 	.word	0x40023c00

08101148 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8101148:	b480      	push	{r7}
 810114a:	b085      	sub	sp, #20
 810114c:	af00      	add	r7, sp, #0
 810114e:	60f8      	str	r0, [r7, #12]
 8101150:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8101154:	4b16      	ldr	r3, [pc, #88]	@ (81011b0 <FLASH_Program_DoubleWord+0x68>)
 8101156:	691b      	ldr	r3, [r3, #16]
 8101158:	4a15      	ldr	r2, [pc, #84]	@ (81011b0 <FLASH_Program_DoubleWord+0x68>)
 810115a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810115e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8101160:	4b13      	ldr	r3, [pc, #76]	@ (81011b0 <FLASH_Program_DoubleWord+0x68>)
 8101162:	691b      	ldr	r3, [r3, #16]
 8101164:	4a12      	ldr	r2, [pc, #72]	@ (81011b0 <FLASH_Program_DoubleWord+0x68>)
 8101166:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 810116a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 810116c:	4b10      	ldr	r3, [pc, #64]	@ (81011b0 <FLASH_Program_DoubleWord+0x68>)
 810116e:	691b      	ldr	r3, [r3, #16]
 8101170:	4a0f      	ldr	r2, [pc, #60]	@ (81011b0 <FLASH_Program_DoubleWord+0x68>)
 8101172:	f043 0301 	orr.w	r3, r3, #1
 8101176:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8101178:	68fb      	ldr	r3, [r7, #12]
 810117a:	683a      	ldr	r2, [r7, #0]
 810117c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 810117e:	f3bf 8f6f 	isb	sy
}
 8101182:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8101184:	e9d7 0100 	ldrd	r0, r1, [r7]
 8101188:	f04f 0200 	mov.w	r2, #0
 810118c:	f04f 0300 	mov.w	r3, #0
 8101190:	000a      	movs	r2, r1
 8101192:	2300      	movs	r3, #0
 8101194:	68f9      	ldr	r1, [r7, #12]
 8101196:	3104      	adds	r1, #4
 8101198:	4613      	mov	r3, r2
 810119a:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 810119c:	f3bf 8f4f 	dsb	sy
}
 81011a0:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 81011a2:	bf00      	nop
 81011a4:	3714      	adds	r7, #20
 81011a6:	46bd      	mov	sp, r7
 81011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011ac:	4770      	bx	lr
 81011ae:	bf00      	nop
 81011b0:	40023c00 	.word	0x40023c00

081011b4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 81011b4:	b480      	push	{r7}
 81011b6:	b083      	sub	sp, #12
 81011b8:	af00      	add	r7, sp, #0
 81011ba:	6078      	str	r0, [r7, #4]
 81011bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 81011be:	4b0f      	ldr	r3, [pc, #60]	@ (81011fc <FLASH_Program_Word+0x48>)
 81011c0:	691b      	ldr	r3, [r3, #16]
 81011c2:	4a0e      	ldr	r2, [pc, #56]	@ (81011fc <FLASH_Program_Word+0x48>)
 81011c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 81011c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 81011ca:	4b0c      	ldr	r3, [pc, #48]	@ (81011fc <FLASH_Program_Word+0x48>)
 81011cc:	691b      	ldr	r3, [r3, #16]
 81011ce:	4a0b      	ldr	r2, [pc, #44]	@ (81011fc <FLASH_Program_Word+0x48>)
 81011d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 81011d4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 81011d6:	4b09      	ldr	r3, [pc, #36]	@ (81011fc <FLASH_Program_Word+0x48>)
 81011d8:	691b      	ldr	r3, [r3, #16]
 81011da:	4a08      	ldr	r2, [pc, #32]	@ (81011fc <FLASH_Program_Word+0x48>)
 81011dc:	f043 0301 	orr.w	r3, r3, #1
 81011e0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 81011e2:	687b      	ldr	r3, [r7, #4]
 81011e4:	683a      	ldr	r2, [r7, #0]
 81011e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 81011e8:	f3bf 8f4f 	dsb	sy
}
 81011ec:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 81011ee:	bf00      	nop
 81011f0:	370c      	adds	r7, #12
 81011f2:	46bd      	mov	sp, r7
 81011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011f8:	4770      	bx	lr
 81011fa:	bf00      	nop
 81011fc:	40023c00 	.word	0x40023c00

08101200 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8101200:	b480      	push	{r7}
 8101202:	b083      	sub	sp, #12
 8101204:	af00      	add	r7, sp, #0
 8101206:	6078      	str	r0, [r7, #4]
 8101208:	460b      	mov	r3, r1
 810120a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 810120c:	4b0e      	ldr	r3, [pc, #56]	@ (8101248 <FLASH_Program_HalfWord+0x48>)
 810120e:	691b      	ldr	r3, [r3, #16]
 8101210:	4a0d      	ldr	r2, [pc, #52]	@ (8101248 <FLASH_Program_HalfWord+0x48>)
 8101212:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8101216:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8101218:	4b0b      	ldr	r3, [pc, #44]	@ (8101248 <FLASH_Program_HalfWord+0x48>)
 810121a:	691b      	ldr	r3, [r3, #16]
 810121c:	4a0a      	ldr	r2, [pc, #40]	@ (8101248 <FLASH_Program_HalfWord+0x48>)
 810121e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8101222:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8101224:	4b08      	ldr	r3, [pc, #32]	@ (8101248 <FLASH_Program_HalfWord+0x48>)
 8101226:	691b      	ldr	r3, [r3, #16]
 8101228:	4a07      	ldr	r2, [pc, #28]	@ (8101248 <FLASH_Program_HalfWord+0x48>)
 810122a:	f043 0301 	orr.w	r3, r3, #1
 810122e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8101230:	687b      	ldr	r3, [r7, #4]
 8101232:	887a      	ldrh	r2, [r7, #2]
 8101234:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8101236:	f3bf 8f4f 	dsb	sy
}
 810123a:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 810123c:	bf00      	nop
 810123e:	370c      	adds	r7, #12
 8101240:	46bd      	mov	sp, r7
 8101242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101246:	4770      	bx	lr
 8101248:	40023c00 	.word	0x40023c00

0810124c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 810124c:	b480      	push	{r7}
 810124e:	b083      	sub	sp, #12
 8101250:	af00      	add	r7, sp, #0
 8101252:	6078      	str	r0, [r7, #4]
 8101254:	460b      	mov	r3, r1
 8101256:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8101258:	4b0d      	ldr	r3, [pc, #52]	@ (8101290 <FLASH_Program_Byte+0x44>)
 810125a:	691b      	ldr	r3, [r3, #16]
 810125c:	4a0c      	ldr	r2, [pc, #48]	@ (8101290 <FLASH_Program_Byte+0x44>)
 810125e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8101262:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8101264:	4b0a      	ldr	r3, [pc, #40]	@ (8101290 <FLASH_Program_Byte+0x44>)
 8101266:	4a0a      	ldr	r2, [pc, #40]	@ (8101290 <FLASH_Program_Byte+0x44>)
 8101268:	691b      	ldr	r3, [r3, #16]
 810126a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 810126c:	4b08      	ldr	r3, [pc, #32]	@ (8101290 <FLASH_Program_Byte+0x44>)
 810126e:	691b      	ldr	r3, [r3, #16]
 8101270:	4a07      	ldr	r2, [pc, #28]	@ (8101290 <FLASH_Program_Byte+0x44>)
 8101272:	f043 0301 	orr.w	r3, r3, #1
 8101276:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8101278:	687b      	ldr	r3, [r7, #4]
 810127a:	78fa      	ldrb	r2, [r7, #3]
 810127c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 810127e:	f3bf 8f4f 	dsb	sy
}
 8101282:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8101284:	bf00      	nop
 8101286:	370c      	adds	r7, #12
 8101288:	46bd      	mov	sp, r7
 810128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810128e:	4770      	bx	lr
 8101290:	40023c00 	.word	0x40023c00

08101294 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8101294:	b480      	push	{r7}
 8101296:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8101298:	4b21      	ldr	r3, [pc, #132]	@ (8101320 <FLASH_SetErrorCode+0x8c>)
 810129a:	68db      	ldr	r3, [r3, #12]
 810129c:	f003 0302 	and.w	r3, r3, #2
 81012a0:	2b00      	cmp	r3, #0
 81012a2:	d005      	beq.n	81012b0 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 81012a4:	4b1f      	ldr	r3, [pc, #124]	@ (8101324 <FLASH_SetErrorCode+0x90>)
 81012a6:	699b      	ldr	r3, [r3, #24]
 81012a8:	f043 0320 	orr.w	r3, r3, #32
 81012ac:	4a1d      	ldr	r2, [pc, #116]	@ (8101324 <FLASH_SetErrorCode+0x90>)
 81012ae:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 81012b0:	4b1b      	ldr	r3, [pc, #108]	@ (8101320 <FLASH_SetErrorCode+0x8c>)
 81012b2:	68db      	ldr	r3, [r3, #12]
 81012b4:	f003 0310 	and.w	r3, r3, #16
 81012b8:	2b00      	cmp	r3, #0
 81012ba:	d005      	beq.n	81012c8 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 81012bc:	4b19      	ldr	r3, [pc, #100]	@ (8101324 <FLASH_SetErrorCode+0x90>)
 81012be:	699b      	ldr	r3, [r3, #24]
 81012c0:	f043 0310 	orr.w	r3, r3, #16
 81012c4:	4a17      	ldr	r2, [pc, #92]	@ (8101324 <FLASH_SetErrorCode+0x90>)
 81012c6:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 81012c8:	4b15      	ldr	r3, [pc, #84]	@ (8101320 <FLASH_SetErrorCode+0x8c>)
 81012ca:	68db      	ldr	r3, [r3, #12]
 81012cc:	f003 0320 	and.w	r3, r3, #32
 81012d0:	2b00      	cmp	r3, #0
 81012d2:	d005      	beq.n	81012e0 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 81012d4:	4b13      	ldr	r3, [pc, #76]	@ (8101324 <FLASH_SetErrorCode+0x90>)
 81012d6:	699b      	ldr	r3, [r3, #24]
 81012d8:	f043 0308 	orr.w	r3, r3, #8
 81012dc:	4a11      	ldr	r2, [pc, #68]	@ (8101324 <FLASH_SetErrorCode+0x90>)
 81012de:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 81012e0:	4b0f      	ldr	r3, [pc, #60]	@ (8101320 <FLASH_SetErrorCode+0x8c>)
 81012e2:	68db      	ldr	r3, [r3, #12]
 81012e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81012e8:	2b00      	cmp	r3, #0
 81012ea:	d005      	beq.n	81012f8 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 81012ec:	4b0d      	ldr	r3, [pc, #52]	@ (8101324 <FLASH_SetErrorCode+0x90>)
 81012ee:	699b      	ldr	r3, [r3, #24]
 81012f0:	f043 0304 	orr.w	r3, r3, #4
 81012f4:	4a0b      	ldr	r2, [pc, #44]	@ (8101324 <FLASH_SetErrorCode+0x90>)
 81012f6:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 81012f8:	4b09      	ldr	r3, [pc, #36]	@ (8101320 <FLASH_SetErrorCode+0x8c>)
 81012fa:	68db      	ldr	r3, [r3, #12]
 81012fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8101300:	2b00      	cmp	r3, #0
 8101302:	d005      	beq.n	8101310 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8101304:	4b07      	ldr	r3, [pc, #28]	@ (8101324 <FLASH_SetErrorCode+0x90>)
 8101306:	699b      	ldr	r3, [r3, #24]
 8101308:	f043 0302 	orr.w	r3, r3, #2
 810130c:	4a05      	ldr	r2, [pc, #20]	@ (8101324 <FLASH_SetErrorCode+0x90>)
 810130e:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8101310:	4b03      	ldr	r3, [pc, #12]	@ (8101320 <FLASH_SetErrorCode+0x8c>)
 8101312:	22f2      	movs	r2, #242	@ 0xf2
 8101314:	60da      	str	r2, [r3, #12]
}
 8101316:	bf00      	nop
 8101318:	46bd      	mov	sp, r7
 810131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810131e:	4770      	bx	lr
 8101320:	40023c00 	.word	0x40023c00
 8101324:	200001c0 	.word	0x200001c0

08101328 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8101328:	b580      	push	{r7, lr}
 810132a:	b084      	sub	sp, #16
 810132c:	af00      	add	r7, sp, #0
 810132e:	6078      	str	r0, [r7, #4]
 8101330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0;
 8101332:	2300      	movs	r3, #0
 8101334:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8101336:	4b30      	ldr	r3, [pc, #192]	@ (81013f8 <HAL_FLASHEx_Erase+0xd0>)
 8101338:	7d1b      	ldrb	r3, [r3, #20]
 810133a:	2b01      	cmp	r3, #1
 810133c:	d101      	bne.n	8101342 <HAL_FLASHEx_Erase+0x1a>
 810133e:	2302      	movs	r3, #2
 8101340:	e056      	b.n	81013f0 <HAL_FLASHEx_Erase+0xc8>
 8101342:	4b2d      	ldr	r3, [pc, #180]	@ (81013f8 <HAL_FLASHEx_Erase+0xd0>)
 8101344:	2201      	movs	r2, #1
 8101346:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8101348:	f24c 3050 	movw	r0, #50000	@ 0xc350
 810134c:	f7ff febc 	bl	81010c8 <FLASH_WaitForLastOperation>
 8101350:	4603      	mov	r3, r0
 8101352:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8101354:	7bfb      	ldrb	r3, [r7, #15]
 8101356:	2b00      	cmp	r3, #0
 8101358:	d146      	bne.n	81013e8 <HAL_FLASHEx_Erase+0xc0>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 810135a:	683b      	ldr	r3, [r7, #0]
 810135c:	f04f 32ff 	mov.w	r2, #4294967295
 8101360:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8101362:	687b      	ldr	r3, [r7, #4]
 8101364:	681b      	ldr	r3, [r3, #0]
 8101366:	2b01      	cmp	r3, #1
 8101368:	d115      	bne.n	8101396 <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 810136a:	687b      	ldr	r3, [r7, #4]
 810136c:	691b      	ldr	r3, [r3, #16]
 810136e:	b2da      	uxtb	r2, r3
 8101370:	687b      	ldr	r3, [r7, #4]
 8101372:	685b      	ldr	r3, [r3, #4]
 8101374:	4619      	mov	r1, r3
 8101376:	4610      	mov	r0, r2
 8101378:	f000 f844 	bl	8101404 <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 810137c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8101380:	f7ff fea2 	bl	81010c8 <FLASH_WaitForLastOperation>
 8101384:	4603      	mov	r3, r0
 8101386:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8101388:	4b1c      	ldr	r3, [pc, #112]	@ (81013fc <HAL_FLASHEx_Erase+0xd4>)
 810138a:	691a      	ldr	r2, [r3, #16]
 810138c:	491b      	ldr	r1, [pc, #108]	@ (81013fc <HAL_FLASHEx_Erase+0xd4>)
 810138e:	4b1c      	ldr	r3, [pc, #112]	@ (8101400 <HAL_FLASHEx_Erase+0xd8>)
 8101390:	4013      	ands	r3, r2
 8101392:	610b      	str	r3, [r1, #16]
 8101394:	e028      	b.n	81013e8 <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8101396:	687b      	ldr	r3, [r7, #4]
 8101398:	689b      	ldr	r3, [r3, #8]
 810139a:	60bb      	str	r3, [r7, #8]
 810139c:	e01c      	b.n	81013d8 <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 810139e:	687b      	ldr	r3, [r7, #4]
 81013a0:	691b      	ldr	r3, [r3, #16]
 81013a2:	b2db      	uxtb	r3, r3
 81013a4:	4619      	mov	r1, r3
 81013a6:	68b8      	ldr	r0, [r7, #8]
 81013a8:	f000 f868 	bl	810147c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 81013ac:	f24c 3050 	movw	r0, #50000	@ 0xc350
 81013b0:	f7ff fe8a 	bl	81010c8 <FLASH_WaitForLastOperation>
 81013b4:	4603      	mov	r3, r0
 81013b6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 81013b8:	4b10      	ldr	r3, [pc, #64]	@ (81013fc <HAL_FLASHEx_Erase+0xd4>)
 81013ba:	691b      	ldr	r3, [r3, #16]
 81013bc:	4a0f      	ldr	r2, [pc, #60]	@ (81013fc <HAL_FLASHEx_Erase+0xd4>)
 81013be:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 81013c2:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 81013c4:	7bfb      	ldrb	r3, [r7, #15]
 81013c6:	2b00      	cmp	r3, #0
 81013c8:	d003      	beq.n	81013d2 <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 81013ca:	683b      	ldr	r3, [r7, #0]
 81013cc:	68ba      	ldr	r2, [r7, #8]
 81013ce:	601a      	str	r2, [r3, #0]
          break;
 81013d0:	e00a      	b.n	81013e8 <HAL_FLASHEx_Erase+0xc0>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 81013d2:	68bb      	ldr	r3, [r7, #8]
 81013d4:	3301      	adds	r3, #1
 81013d6:	60bb      	str	r3, [r7, #8]
 81013d8:	687b      	ldr	r3, [r7, #4]
 81013da:	68da      	ldr	r2, [r3, #12]
 81013dc:	687b      	ldr	r3, [r7, #4]
 81013de:	689b      	ldr	r3, [r3, #8]
 81013e0:	4413      	add	r3, r2
 81013e2:	68ba      	ldr	r2, [r7, #8]
 81013e4:	429a      	cmp	r2, r3
 81013e6:	d3da      	bcc.n	810139e <HAL_FLASHEx_Erase+0x76>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 81013e8:	4b03      	ldr	r3, [pc, #12]	@ (81013f8 <HAL_FLASHEx_Erase+0xd0>)
 81013ea:	2200      	movs	r2, #0
 81013ec:	751a      	strb	r2, [r3, #20]

  return status;
 81013ee:	7bfb      	ldrb	r3, [r7, #15]
}
 81013f0:	4618      	mov	r0, r3
 81013f2:	3710      	adds	r7, #16
 81013f4:	46bd      	mov	sp, r7
 81013f6:	bd80      	pop	{r7, pc}
 81013f8:	200001c0 	.word	0x200001c0
 81013fc:	40023c00 	.word	0x40023c00
 8101400:	ffff7ffb 	.word	0xffff7ffb

08101404 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8101404:	b480      	push	{r7}
 8101406:	b083      	sub	sp, #12
 8101408:	af00      	add	r7, sp, #0
 810140a:	4603      	mov	r3, r0
 810140c:	6039      	str	r1, [r7, #0]
 810140e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8101410:	4b19      	ldr	r3, [pc, #100]	@ (8101478 <FLASH_MassErase+0x74>)
 8101412:	691b      	ldr	r3, [r3, #16]
 8101414:	4a18      	ldr	r2, [pc, #96]	@ (8101478 <FLASH_MassErase+0x74>)
 8101416:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810141a:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 810141c:	683b      	ldr	r3, [r7, #0]
 810141e:	2b03      	cmp	r3, #3
 8101420:	d107      	bne.n	8101432 <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8101422:	4b15      	ldr	r3, [pc, #84]	@ (8101478 <FLASH_MassErase+0x74>)
 8101424:	691a      	ldr	r2, [r3, #16]
 8101426:	4914      	ldr	r1, [pc, #80]	@ (8101478 <FLASH_MassErase+0x74>)
 8101428:	f248 0304 	movw	r3, #32772	@ 0x8004
 810142c:	4313      	orrs	r3, r2
 810142e:	610b      	str	r3, [r1, #16]
 8101430:	e00f      	b.n	8101452 <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 8101432:	683b      	ldr	r3, [r7, #0]
 8101434:	2b02      	cmp	r3, #2
 8101436:	d106      	bne.n	8101446 <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8101438:	4b0f      	ldr	r3, [pc, #60]	@ (8101478 <FLASH_MassErase+0x74>)
 810143a:	691b      	ldr	r3, [r3, #16]
 810143c:	4a0e      	ldr	r2, [pc, #56]	@ (8101478 <FLASH_MassErase+0x74>)
 810143e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8101442:	6113      	str	r3, [r2, #16]
 8101444:	e005      	b.n	8101452 <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 8101446:	4b0c      	ldr	r3, [pc, #48]	@ (8101478 <FLASH_MassErase+0x74>)
 8101448:	691b      	ldr	r3, [r3, #16]
 810144a:	4a0b      	ldr	r2, [pc, #44]	@ (8101478 <FLASH_MassErase+0x74>)
 810144c:	f043 0304 	orr.w	r3, r3, #4
 8101450:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 8101452:	4b09      	ldr	r3, [pc, #36]	@ (8101478 <FLASH_MassErase+0x74>)
 8101454:	691a      	ldr	r2, [r3, #16]
 8101456:	79fb      	ldrb	r3, [r7, #7]
 8101458:	021b      	lsls	r3, r3, #8
 810145a:	4313      	orrs	r3, r2
 810145c:	4a06      	ldr	r2, [pc, #24]	@ (8101478 <FLASH_MassErase+0x74>)
 810145e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8101462:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101464:	f3bf 8f4f 	dsb	sy
}
 8101468:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 810146a:	bf00      	nop
 810146c:	370c      	adds	r7, #12
 810146e:	46bd      	mov	sp, r7
 8101470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101474:	4770      	bx	lr
 8101476:	bf00      	nop
 8101478:	40023c00 	.word	0x40023c00

0810147c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 810147c:	b480      	push	{r7}
 810147e:	b085      	sub	sp, #20
 8101480:	af00      	add	r7, sp, #0
 8101482:	6078      	str	r0, [r7, #4]
 8101484:	460b      	mov	r3, r1
 8101486:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8101488:	2300      	movs	r3, #0
 810148a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 810148c:	78fb      	ldrb	r3, [r7, #3]
 810148e:	2b00      	cmp	r3, #0
 8101490:	d102      	bne.n	8101498 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8101492:	2300      	movs	r3, #0
 8101494:	60fb      	str	r3, [r7, #12]
 8101496:	e010      	b.n	81014ba <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8101498:	78fb      	ldrb	r3, [r7, #3]
 810149a:	2b01      	cmp	r3, #1
 810149c:	d103      	bne.n	81014a6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 810149e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 81014a2:	60fb      	str	r3, [r7, #12]
 81014a4:	e009      	b.n	81014ba <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 81014a6:	78fb      	ldrb	r3, [r7, #3]
 81014a8:	2b02      	cmp	r3, #2
 81014aa:	d103      	bne.n	81014b4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 81014ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 81014b0:	60fb      	str	r3, [r7, #12]
 81014b2:	e002      	b.n	81014ba <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 81014b4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 81014b8:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 81014ba:	687b      	ldr	r3, [r7, #4]
 81014bc:	2b0b      	cmp	r3, #11
 81014be:	d902      	bls.n	81014c6 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 81014c0:	687b      	ldr	r3, [r7, #4]
 81014c2:	3304      	adds	r3, #4
 81014c4:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 81014c6:	4b15      	ldr	r3, [pc, #84]	@ (810151c <FLASH_Erase_Sector+0xa0>)
 81014c8:	691b      	ldr	r3, [r3, #16]
 81014ca:	4a14      	ldr	r2, [pc, #80]	@ (810151c <FLASH_Erase_Sector+0xa0>)
 81014cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 81014d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 81014d2:	4b12      	ldr	r3, [pc, #72]	@ (810151c <FLASH_Erase_Sector+0xa0>)
 81014d4:	691a      	ldr	r2, [r3, #16]
 81014d6:	4911      	ldr	r1, [pc, #68]	@ (810151c <FLASH_Erase_Sector+0xa0>)
 81014d8:	68fb      	ldr	r3, [r7, #12]
 81014da:	4313      	orrs	r3, r2
 81014dc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 81014de:	4b0f      	ldr	r3, [pc, #60]	@ (810151c <FLASH_Erase_Sector+0xa0>)
 81014e0:	691b      	ldr	r3, [r3, #16]
 81014e2:	4a0e      	ldr	r2, [pc, #56]	@ (810151c <FLASH_Erase_Sector+0xa0>)
 81014e4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81014e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 81014ea:	4b0c      	ldr	r3, [pc, #48]	@ (810151c <FLASH_Erase_Sector+0xa0>)
 81014ec:	691a      	ldr	r2, [r3, #16]
 81014ee:	687b      	ldr	r3, [r7, #4]
 81014f0:	00db      	lsls	r3, r3, #3
 81014f2:	4313      	orrs	r3, r2
 81014f4:	4a09      	ldr	r2, [pc, #36]	@ (810151c <FLASH_Erase_Sector+0xa0>)
 81014f6:	f043 0302 	orr.w	r3, r3, #2
 81014fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 81014fc:	4b07      	ldr	r3, [pc, #28]	@ (810151c <FLASH_Erase_Sector+0xa0>)
 81014fe:	691b      	ldr	r3, [r3, #16]
 8101500:	4a06      	ldr	r2, [pc, #24]	@ (810151c <FLASH_Erase_Sector+0xa0>)
 8101502:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8101506:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101508:	f3bf 8f4f 	dsb	sy
}
 810150c:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 810150e:	bf00      	nop
 8101510:	3714      	adds	r7, #20
 8101512:	46bd      	mov	sp, r7
 8101514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101518:	4770      	bx	lr
 810151a:	bf00      	nop
 810151c:	40023c00 	.word	0x40023c00

08101520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8101520:	b480      	push	{r7}
 8101522:	b089      	sub	sp, #36	@ 0x24
 8101524:	af00      	add	r7, sp, #0
 8101526:	6078      	str	r0, [r7, #4]
 8101528:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 810152a:	2300      	movs	r3, #0
 810152c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 810152e:	2300      	movs	r3, #0
 8101530:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8101532:	2300      	movs	r3, #0
 8101534:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8101536:	2300      	movs	r3, #0
 8101538:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 810153a:	2300      	movs	r3, #0
 810153c:	61fb      	str	r3, [r7, #28]
 810153e:	e175      	b.n	810182c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8101540:	2201      	movs	r2, #1
 8101542:	69fb      	ldr	r3, [r7, #28]
 8101544:	fa02 f303 	lsl.w	r3, r2, r3
 8101548:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 810154a:	683b      	ldr	r3, [r7, #0]
 810154c:	681b      	ldr	r3, [r3, #0]
 810154e:	697a      	ldr	r2, [r7, #20]
 8101550:	4013      	ands	r3, r2
 8101552:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8101554:	693a      	ldr	r2, [r7, #16]
 8101556:	697b      	ldr	r3, [r7, #20]
 8101558:	429a      	cmp	r2, r3
 810155a:	f040 8164 	bne.w	8101826 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 810155e:	683b      	ldr	r3, [r7, #0]
 8101560:	685b      	ldr	r3, [r3, #4]
 8101562:	f003 0303 	and.w	r3, r3, #3
 8101566:	2b01      	cmp	r3, #1
 8101568:	d005      	beq.n	8101576 <HAL_GPIO_Init+0x56>
 810156a:	683b      	ldr	r3, [r7, #0]
 810156c:	685b      	ldr	r3, [r3, #4]
 810156e:	f003 0303 	and.w	r3, r3, #3
 8101572:	2b02      	cmp	r3, #2
 8101574:	d130      	bne.n	81015d8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101576:	687b      	ldr	r3, [r7, #4]
 8101578:	689b      	ldr	r3, [r3, #8]
 810157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 810157c:	69fb      	ldr	r3, [r7, #28]
 810157e:	005b      	lsls	r3, r3, #1
 8101580:	2203      	movs	r2, #3
 8101582:	fa02 f303 	lsl.w	r3, r2, r3
 8101586:	43db      	mvns	r3, r3
 8101588:	69ba      	ldr	r2, [r7, #24]
 810158a:	4013      	ands	r3, r2
 810158c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 810158e:	683b      	ldr	r3, [r7, #0]
 8101590:	68da      	ldr	r2, [r3, #12]
 8101592:	69fb      	ldr	r3, [r7, #28]
 8101594:	005b      	lsls	r3, r3, #1
 8101596:	fa02 f303 	lsl.w	r3, r2, r3
 810159a:	69ba      	ldr	r2, [r7, #24]
 810159c:	4313      	orrs	r3, r2
 810159e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81015a0:	687b      	ldr	r3, [r7, #4]
 81015a2:	69ba      	ldr	r2, [r7, #24]
 81015a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81015a6:	687b      	ldr	r3, [r7, #4]
 81015a8:	685b      	ldr	r3, [r3, #4]
 81015aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 81015ac:	2201      	movs	r2, #1
 81015ae:	69fb      	ldr	r3, [r7, #28]
 81015b0:	fa02 f303 	lsl.w	r3, r2, r3
 81015b4:	43db      	mvns	r3, r3
 81015b6:	69ba      	ldr	r2, [r7, #24]
 81015b8:	4013      	ands	r3, r2
 81015ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81015bc:	683b      	ldr	r3, [r7, #0]
 81015be:	685b      	ldr	r3, [r3, #4]
 81015c0:	091b      	lsrs	r3, r3, #4
 81015c2:	f003 0201 	and.w	r2, r3, #1
 81015c6:	69fb      	ldr	r3, [r7, #28]
 81015c8:	fa02 f303 	lsl.w	r3, r2, r3
 81015cc:	69ba      	ldr	r2, [r7, #24]
 81015ce:	4313      	orrs	r3, r2
 81015d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81015d2:	687b      	ldr	r3, [r7, #4]
 81015d4:	69ba      	ldr	r2, [r7, #24]
 81015d6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81015d8:	683b      	ldr	r3, [r7, #0]
 81015da:	685b      	ldr	r3, [r3, #4]
 81015dc:	f003 0303 	and.w	r3, r3, #3
 81015e0:	2b03      	cmp	r3, #3
 81015e2:	d017      	beq.n	8101614 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 81015e4:	687b      	ldr	r3, [r7, #4]
 81015e6:	68db      	ldr	r3, [r3, #12]
 81015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 81015ea:	69fb      	ldr	r3, [r7, #28]
 81015ec:	005b      	lsls	r3, r3, #1
 81015ee:	2203      	movs	r2, #3
 81015f0:	fa02 f303 	lsl.w	r3, r2, r3
 81015f4:	43db      	mvns	r3, r3
 81015f6:	69ba      	ldr	r2, [r7, #24]
 81015f8:	4013      	ands	r3, r2
 81015fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 81015fc:	683b      	ldr	r3, [r7, #0]
 81015fe:	689a      	ldr	r2, [r3, #8]
 8101600:	69fb      	ldr	r3, [r7, #28]
 8101602:	005b      	lsls	r3, r3, #1
 8101604:	fa02 f303 	lsl.w	r3, r2, r3
 8101608:	69ba      	ldr	r2, [r7, #24]
 810160a:	4313      	orrs	r3, r2
 810160c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 810160e:	687b      	ldr	r3, [r7, #4]
 8101610:	69ba      	ldr	r2, [r7, #24]
 8101612:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8101614:	683b      	ldr	r3, [r7, #0]
 8101616:	685b      	ldr	r3, [r3, #4]
 8101618:	f003 0303 	and.w	r3, r3, #3
 810161c:	2b02      	cmp	r3, #2
 810161e:	d123      	bne.n	8101668 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8101620:	69fb      	ldr	r3, [r7, #28]
 8101622:	08da      	lsrs	r2, r3, #3
 8101624:	687b      	ldr	r3, [r7, #4]
 8101626:	3208      	adds	r2, #8
 8101628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810162c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 810162e:	69fb      	ldr	r3, [r7, #28]
 8101630:	f003 0307 	and.w	r3, r3, #7
 8101634:	009b      	lsls	r3, r3, #2
 8101636:	220f      	movs	r2, #15
 8101638:	fa02 f303 	lsl.w	r3, r2, r3
 810163c:	43db      	mvns	r3, r3
 810163e:	69ba      	ldr	r2, [r7, #24]
 8101640:	4013      	ands	r3, r2
 8101642:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8101644:	683b      	ldr	r3, [r7, #0]
 8101646:	691a      	ldr	r2, [r3, #16]
 8101648:	69fb      	ldr	r3, [r7, #28]
 810164a:	f003 0307 	and.w	r3, r3, #7
 810164e:	009b      	lsls	r3, r3, #2
 8101650:	fa02 f303 	lsl.w	r3, r2, r3
 8101654:	69ba      	ldr	r2, [r7, #24]
 8101656:	4313      	orrs	r3, r2
 8101658:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 810165a:	69fb      	ldr	r3, [r7, #28]
 810165c:	08da      	lsrs	r2, r3, #3
 810165e:	687b      	ldr	r3, [r7, #4]
 8101660:	3208      	adds	r2, #8
 8101662:	69b9      	ldr	r1, [r7, #24]
 8101664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8101668:	687b      	ldr	r3, [r7, #4]
 810166a:	681b      	ldr	r3, [r3, #0]
 810166c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 810166e:	69fb      	ldr	r3, [r7, #28]
 8101670:	005b      	lsls	r3, r3, #1
 8101672:	2203      	movs	r2, #3
 8101674:	fa02 f303 	lsl.w	r3, r2, r3
 8101678:	43db      	mvns	r3, r3
 810167a:	69ba      	ldr	r2, [r7, #24]
 810167c:	4013      	ands	r3, r2
 810167e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8101680:	683b      	ldr	r3, [r7, #0]
 8101682:	685b      	ldr	r3, [r3, #4]
 8101684:	f003 0203 	and.w	r2, r3, #3
 8101688:	69fb      	ldr	r3, [r7, #28]
 810168a:	005b      	lsls	r3, r3, #1
 810168c:	fa02 f303 	lsl.w	r3, r2, r3
 8101690:	69ba      	ldr	r2, [r7, #24]
 8101692:	4313      	orrs	r3, r2
 8101694:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8101696:	687b      	ldr	r3, [r7, #4]
 8101698:	69ba      	ldr	r2, [r7, #24]
 810169a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 810169c:	683b      	ldr	r3, [r7, #0]
 810169e:	685b      	ldr	r3, [r3, #4]
 81016a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 81016a4:	2b00      	cmp	r3, #0
 81016a6:	f000 80be 	beq.w	8101826 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81016aa:	4b66      	ldr	r3, [pc, #408]	@ (8101844 <HAL_GPIO_Init+0x324>)
 81016ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81016ae:	4a65      	ldr	r2, [pc, #404]	@ (8101844 <HAL_GPIO_Init+0x324>)
 81016b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81016b4:	6453      	str	r3, [r2, #68]	@ 0x44
 81016b6:	4b63      	ldr	r3, [pc, #396]	@ (8101844 <HAL_GPIO_Init+0x324>)
 81016b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81016ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81016be:	60fb      	str	r3, [r7, #12]
 81016c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 81016c2:	4a61      	ldr	r2, [pc, #388]	@ (8101848 <HAL_GPIO_Init+0x328>)
 81016c4:	69fb      	ldr	r3, [r7, #28]
 81016c6:	089b      	lsrs	r3, r3, #2
 81016c8:	3302      	adds	r3, #2
 81016ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 81016d0:	69fb      	ldr	r3, [r7, #28]
 81016d2:	f003 0303 	and.w	r3, r3, #3
 81016d6:	009b      	lsls	r3, r3, #2
 81016d8:	220f      	movs	r2, #15
 81016da:	fa02 f303 	lsl.w	r3, r2, r3
 81016de:	43db      	mvns	r3, r3
 81016e0:	69ba      	ldr	r2, [r7, #24]
 81016e2:	4013      	ands	r3, r2
 81016e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 81016e6:	687b      	ldr	r3, [r7, #4]
 81016e8:	4a58      	ldr	r2, [pc, #352]	@ (810184c <HAL_GPIO_Init+0x32c>)
 81016ea:	4293      	cmp	r3, r2
 81016ec:	d037      	beq.n	810175e <HAL_GPIO_Init+0x23e>
 81016ee:	687b      	ldr	r3, [r7, #4]
 81016f0:	4a57      	ldr	r2, [pc, #348]	@ (8101850 <HAL_GPIO_Init+0x330>)
 81016f2:	4293      	cmp	r3, r2
 81016f4:	d031      	beq.n	810175a <HAL_GPIO_Init+0x23a>
 81016f6:	687b      	ldr	r3, [r7, #4]
 81016f8:	4a56      	ldr	r2, [pc, #344]	@ (8101854 <HAL_GPIO_Init+0x334>)
 81016fa:	4293      	cmp	r3, r2
 81016fc:	d02b      	beq.n	8101756 <HAL_GPIO_Init+0x236>
 81016fe:	687b      	ldr	r3, [r7, #4]
 8101700:	4a55      	ldr	r2, [pc, #340]	@ (8101858 <HAL_GPIO_Init+0x338>)
 8101702:	4293      	cmp	r3, r2
 8101704:	d025      	beq.n	8101752 <HAL_GPIO_Init+0x232>
 8101706:	687b      	ldr	r3, [r7, #4]
 8101708:	4a54      	ldr	r2, [pc, #336]	@ (810185c <HAL_GPIO_Init+0x33c>)
 810170a:	4293      	cmp	r3, r2
 810170c:	d01f      	beq.n	810174e <HAL_GPIO_Init+0x22e>
 810170e:	687b      	ldr	r3, [r7, #4]
 8101710:	4a53      	ldr	r2, [pc, #332]	@ (8101860 <HAL_GPIO_Init+0x340>)
 8101712:	4293      	cmp	r3, r2
 8101714:	d019      	beq.n	810174a <HAL_GPIO_Init+0x22a>
 8101716:	687b      	ldr	r3, [r7, #4]
 8101718:	4a52      	ldr	r2, [pc, #328]	@ (8101864 <HAL_GPIO_Init+0x344>)
 810171a:	4293      	cmp	r3, r2
 810171c:	d013      	beq.n	8101746 <HAL_GPIO_Init+0x226>
 810171e:	687b      	ldr	r3, [r7, #4]
 8101720:	4a51      	ldr	r2, [pc, #324]	@ (8101868 <HAL_GPIO_Init+0x348>)
 8101722:	4293      	cmp	r3, r2
 8101724:	d00d      	beq.n	8101742 <HAL_GPIO_Init+0x222>
 8101726:	687b      	ldr	r3, [r7, #4]
 8101728:	4a50      	ldr	r2, [pc, #320]	@ (810186c <HAL_GPIO_Init+0x34c>)
 810172a:	4293      	cmp	r3, r2
 810172c:	d007      	beq.n	810173e <HAL_GPIO_Init+0x21e>
 810172e:	687b      	ldr	r3, [r7, #4]
 8101730:	4a4f      	ldr	r2, [pc, #316]	@ (8101870 <HAL_GPIO_Init+0x350>)
 8101732:	4293      	cmp	r3, r2
 8101734:	d101      	bne.n	810173a <HAL_GPIO_Init+0x21a>
 8101736:	2309      	movs	r3, #9
 8101738:	e012      	b.n	8101760 <HAL_GPIO_Init+0x240>
 810173a:	230a      	movs	r3, #10
 810173c:	e010      	b.n	8101760 <HAL_GPIO_Init+0x240>
 810173e:	2308      	movs	r3, #8
 8101740:	e00e      	b.n	8101760 <HAL_GPIO_Init+0x240>
 8101742:	2307      	movs	r3, #7
 8101744:	e00c      	b.n	8101760 <HAL_GPIO_Init+0x240>
 8101746:	2306      	movs	r3, #6
 8101748:	e00a      	b.n	8101760 <HAL_GPIO_Init+0x240>
 810174a:	2305      	movs	r3, #5
 810174c:	e008      	b.n	8101760 <HAL_GPIO_Init+0x240>
 810174e:	2304      	movs	r3, #4
 8101750:	e006      	b.n	8101760 <HAL_GPIO_Init+0x240>
 8101752:	2303      	movs	r3, #3
 8101754:	e004      	b.n	8101760 <HAL_GPIO_Init+0x240>
 8101756:	2302      	movs	r3, #2
 8101758:	e002      	b.n	8101760 <HAL_GPIO_Init+0x240>
 810175a:	2301      	movs	r3, #1
 810175c:	e000      	b.n	8101760 <HAL_GPIO_Init+0x240>
 810175e:	2300      	movs	r3, #0
 8101760:	69fa      	ldr	r2, [r7, #28]
 8101762:	f002 0203 	and.w	r2, r2, #3
 8101766:	0092      	lsls	r2, r2, #2
 8101768:	4093      	lsls	r3, r2
 810176a:	69ba      	ldr	r2, [r7, #24]
 810176c:	4313      	orrs	r3, r2
 810176e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8101770:	4935      	ldr	r1, [pc, #212]	@ (8101848 <HAL_GPIO_Init+0x328>)
 8101772:	69fb      	ldr	r3, [r7, #28]
 8101774:	089b      	lsrs	r3, r3, #2
 8101776:	3302      	adds	r3, #2
 8101778:	69ba      	ldr	r2, [r7, #24]
 810177a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 810177e:	4b3d      	ldr	r3, [pc, #244]	@ (8101874 <HAL_GPIO_Init+0x354>)
 8101780:	689b      	ldr	r3, [r3, #8]
 8101782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8101784:	693b      	ldr	r3, [r7, #16]
 8101786:	43db      	mvns	r3, r3
 8101788:	69ba      	ldr	r2, [r7, #24]
 810178a:	4013      	ands	r3, r2
 810178c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 810178e:	683b      	ldr	r3, [r7, #0]
 8101790:	685b      	ldr	r3, [r3, #4]
 8101792:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8101796:	2b00      	cmp	r3, #0
 8101798:	d003      	beq.n	81017a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 810179a:	69ba      	ldr	r2, [r7, #24]
 810179c:	693b      	ldr	r3, [r7, #16]
 810179e:	4313      	orrs	r3, r2
 81017a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 81017a2:	4a34      	ldr	r2, [pc, #208]	@ (8101874 <HAL_GPIO_Init+0x354>)
 81017a4:	69bb      	ldr	r3, [r7, #24]
 81017a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 81017a8:	4b32      	ldr	r3, [pc, #200]	@ (8101874 <HAL_GPIO_Init+0x354>)
 81017aa:	68db      	ldr	r3, [r3, #12]
 81017ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 81017ae:	693b      	ldr	r3, [r7, #16]
 81017b0:	43db      	mvns	r3, r3
 81017b2:	69ba      	ldr	r2, [r7, #24]
 81017b4:	4013      	ands	r3, r2
 81017b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 81017b8:	683b      	ldr	r3, [r7, #0]
 81017ba:	685b      	ldr	r3, [r3, #4]
 81017bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81017c0:	2b00      	cmp	r3, #0
 81017c2:	d003      	beq.n	81017cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 81017c4:	69ba      	ldr	r2, [r7, #24]
 81017c6:	693b      	ldr	r3, [r7, #16]
 81017c8:	4313      	orrs	r3, r2
 81017ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 81017cc:	4a29      	ldr	r2, [pc, #164]	@ (8101874 <HAL_GPIO_Init+0x354>)
 81017ce:	69bb      	ldr	r3, [r7, #24]
 81017d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 81017d2:	4b28      	ldr	r3, [pc, #160]	@ (8101874 <HAL_GPIO_Init+0x354>)
 81017d4:	685b      	ldr	r3, [r3, #4]
 81017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 81017d8:	693b      	ldr	r3, [r7, #16]
 81017da:	43db      	mvns	r3, r3
 81017dc:	69ba      	ldr	r2, [r7, #24]
 81017de:	4013      	ands	r3, r2
 81017e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 81017e2:	683b      	ldr	r3, [r7, #0]
 81017e4:	685b      	ldr	r3, [r3, #4]
 81017e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81017ea:	2b00      	cmp	r3, #0
 81017ec:	d003      	beq.n	81017f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 81017ee:	69ba      	ldr	r2, [r7, #24]
 81017f0:	693b      	ldr	r3, [r7, #16]
 81017f2:	4313      	orrs	r3, r2
 81017f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 81017f6:	4a1f      	ldr	r2, [pc, #124]	@ (8101874 <HAL_GPIO_Init+0x354>)
 81017f8:	69bb      	ldr	r3, [r7, #24]
 81017fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 81017fc:	4b1d      	ldr	r3, [pc, #116]	@ (8101874 <HAL_GPIO_Init+0x354>)
 81017fe:	681b      	ldr	r3, [r3, #0]
 8101800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8101802:	693b      	ldr	r3, [r7, #16]
 8101804:	43db      	mvns	r3, r3
 8101806:	69ba      	ldr	r2, [r7, #24]
 8101808:	4013      	ands	r3, r2
 810180a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 810180c:	683b      	ldr	r3, [r7, #0]
 810180e:	685b      	ldr	r3, [r3, #4]
 8101810:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8101814:	2b00      	cmp	r3, #0
 8101816:	d003      	beq.n	8101820 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8101818:	69ba      	ldr	r2, [r7, #24]
 810181a:	693b      	ldr	r3, [r7, #16]
 810181c:	4313      	orrs	r3, r2
 810181e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8101820:	4a14      	ldr	r2, [pc, #80]	@ (8101874 <HAL_GPIO_Init+0x354>)
 8101822:	69bb      	ldr	r3, [r7, #24]
 8101824:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8101826:	69fb      	ldr	r3, [r7, #28]
 8101828:	3301      	adds	r3, #1
 810182a:	61fb      	str	r3, [r7, #28]
 810182c:	69fb      	ldr	r3, [r7, #28]
 810182e:	2b0f      	cmp	r3, #15
 8101830:	f67f ae86 	bls.w	8101540 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8101834:	bf00      	nop
 8101836:	bf00      	nop
 8101838:	3724      	adds	r7, #36	@ 0x24
 810183a:	46bd      	mov	sp, r7
 810183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101840:	4770      	bx	lr
 8101842:	bf00      	nop
 8101844:	40023800 	.word	0x40023800
 8101848:	40013800 	.word	0x40013800
 810184c:	40020000 	.word	0x40020000
 8101850:	40020400 	.word	0x40020400
 8101854:	40020800 	.word	0x40020800
 8101858:	40020c00 	.word	0x40020c00
 810185c:	40021000 	.word	0x40021000
 8101860:	40021400 	.word	0x40021400
 8101864:	40021800 	.word	0x40021800
 8101868:	40021c00 	.word	0x40021c00
 810186c:	40022000 	.word	0x40022000
 8101870:	40022400 	.word	0x40022400
 8101874:	40013c00 	.word	0x40013c00

08101878 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8101878:	b480      	push	{r7}
 810187a:	b085      	sub	sp, #20
 810187c:	af00      	add	r7, sp, #0
 810187e:	6078      	str	r0, [r7, #4]
 8101880:	460b      	mov	r3, r1
 8101882:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8101884:	687b      	ldr	r3, [r7, #4]
 8101886:	691a      	ldr	r2, [r3, #16]
 8101888:	887b      	ldrh	r3, [r7, #2]
 810188a:	4013      	ands	r3, r2
 810188c:	2b00      	cmp	r3, #0
 810188e:	d002      	beq.n	8101896 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8101890:	2301      	movs	r3, #1
 8101892:	73fb      	strb	r3, [r7, #15]
 8101894:	e001      	b.n	810189a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8101896:	2300      	movs	r3, #0
 8101898:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 810189a:	7bfb      	ldrb	r3, [r7, #15]
}
 810189c:	4618      	mov	r0, r3
 810189e:	3714      	adds	r7, #20
 81018a0:	46bd      	mov	sp, r7
 81018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018a6:	4770      	bx	lr

081018a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81018a8:	b480      	push	{r7}
 81018aa:	b083      	sub	sp, #12
 81018ac:	af00      	add	r7, sp, #0
 81018ae:	6078      	str	r0, [r7, #4]
 81018b0:	460b      	mov	r3, r1
 81018b2:	807b      	strh	r3, [r7, #2]
 81018b4:	4613      	mov	r3, r2
 81018b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81018b8:	787b      	ldrb	r3, [r7, #1]
 81018ba:	2b00      	cmp	r3, #0
 81018bc:	d003      	beq.n	81018c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81018be:	887a      	ldrh	r2, [r7, #2]
 81018c0:	687b      	ldr	r3, [r7, #4]
 81018c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 81018c4:	e003      	b.n	81018ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 81018c6:	887b      	ldrh	r3, [r7, #2]
 81018c8:	041a      	lsls	r2, r3, #16
 81018ca:	687b      	ldr	r3, [r7, #4]
 81018cc:	619a      	str	r2, [r3, #24]
}
 81018ce:	bf00      	nop
 81018d0:	370c      	adds	r7, #12
 81018d2:	46bd      	mov	sp, r7
 81018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018d8:	4770      	bx	lr

081018da <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 81018da:	b480      	push	{r7}
 81018dc:	b085      	sub	sp, #20
 81018de:	af00      	add	r7, sp, #0
 81018e0:	6078      	str	r0, [r7, #4]
 81018e2:	460b      	mov	r3, r1
 81018e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 81018e6:	687b      	ldr	r3, [r7, #4]
 81018e8:	695b      	ldr	r3, [r3, #20]
 81018ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 81018ec:	887a      	ldrh	r2, [r7, #2]
 81018ee:	68fb      	ldr	r3, [r7, #12]
 81018f0:	4013      	ands	r3, r2
 81018f2:	041a      	lsls	r2, r3, #16
 81018f4:	68fb      	ldr	r3, [r7, #12]
 81018f6:	43d9      	mvns	r1, r3
 81018f8:	887b      	ldrh	r3, [r7, #2]
 81018fa:	400b      	ands	r3, r1
 81018fc:	431a      	orrs	r2, r3
 81018fe:	687b      	ldr	r3, [r7, #4]
 8101900:	619a      	str	r2, [r3, #24]
}
 8101902:	bf00      	nop
 8101904:	3714      	adds	r7, #20
 8101906:	46bd      	mov	sp, r7
 8101908:	f85d 7b04 	ldr.w	r7, [sp], #4
 810190c:	4770      	bx	lr
	...

08101910 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8101910:	b580      	push	{r7, lr}
 8101912:	b082      	sub	sp, #8
 8101914:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8101916:	2300      	movs	r3, #0
 8101918:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 810191a:	4b23      	ldr	r3, [pc, #140]	@ (81019a8 <HAL_PWREx_EnableOverDrive+0x98>)
 810191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810191e:	4a22      	ldr	r2, [pc, #136]	@ (81019a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8101920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8101924:	6413      	str	r3, [r2, #64]	@ 0x40
 8101926:	4b20      	ldr	r3, [pc, #128]	@ (81019a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8101928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810192a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810192e:	603b      	str	r3, [r7, #0]
 8101930:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8101932:	4b1e      	ldr	r3, [pc, #120]	@ (81019ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8101934:	681b      	ldr	r3, [r3, #0]
 8101936:	4a1d      	ldr	r2, [pc, #116]	@ (81019ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8101938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 810193c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 810193e:	f7ff fa45 	bl	8100dcc <HAL_GetTick>
 8101942:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8101944:	e009      	b.n	810195a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8101946:	f7ff fa41 	bl	8100dcc <HAL_GetTick>
 810194a:	4602      	mov	r2, r0
 810194c:	687b      	ldr	r3, [r7, #4]
 810194e:	1ad3      	subs	r3, r2, r3
 8101950:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8101954:	d901      	bls.n	810195a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8101956:	2303      	movs	r3, #3
 8101958:	e022      	b.n	81019a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 810195a:	4b14      	ldr	r3, [pc, #80]	@ (81019ac <HAL_PWREx_EnableOverDrive+0x9c>)
 810195c:	685b      	ldr	r3, [r3, #4]
 810195e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8101962:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8101966:	d1ee      	bne.n	8101946 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8101968:	4b10      	ldr	r3, [pc, #64]	@ (81019ac <HAL_PWREx_EnableOverDrive+0x9c>)
 810196a:	681b      	ldr	r3, [r3, #0]
 810196c:	4a0f      	ldr	r2, [pc, #60]	@ (81019ac <HAL_PWREx_EnableOverDrive+0x9c>)
 810196e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101972:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8101974:	f7ff fa2a 	bl	8100dcc <HAL_GetTick>
 8101978:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 810197a:	e009      	b.n	8101990 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 810197c:	f7ff fa26 	bl	8100dcc <HAL_GetTick>
 8101980:	4602      	mov	r2, r0
 8101982:	687b      	ldr	r3, [r7, #4]
 8101984:	1ad3      	subs	r3, r2, r3
 8101986:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 810198a:	d901      	bls.n	8101990 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 810198c:	2303      	movs	r3, #3
 810198e:	e007      	b.n	81019a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8101990:	4b06      	ldr	r3, [pc, #24]	@ (81019ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8101992:	685b      	ldr	r3, [r3, #4]
 8101994:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8101998:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810199c:	d1ee      	bne.n	810197c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 810199e:	2300      	movs	r3, #0
}
 81019a0:	4618      	mov	r0, r3
 81019a2:	3708      	adds	r7, #8
 81019a4:	46bd      	mov	sp, r7
 81019a6:	bd80      	pop	{r7, pc}
 81019a8:	40023800 	.word	0x40023800
 81019ac:	40007000 	.word	0x40007000

081019b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 81019b0:	b580      	push	{r7, lr}
 81019b2:	b086      	sub	sp, #24
 81019b4:	af00      	add	r7, sp, #0
 81019b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 81019b8:	2300      	movs	r3, #0
 81019ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 81019bc:	687b      	ldr	r3, [r7, #4]
 81019be:	2b00      	cmp	r3, #0
 81019c0:	d101      	bne.n	81019c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 81019c2:	2301      	movs	r3, #1
 81019c4:	e29b      	b.n	8101efe <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 81019c6:	687b      	ldr	r3, [r7, #4]
 81019c8:	681b      	ldr	r3, [r3, #0]
 81019ca:	f003 0301 	and.w	r3, r3, #1
 81019ce:	2b00      	cmp	r3, #0
 81019d0:	f000 8087 	beq.w	8101ae2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 81019d4:	4b96      	ldr	r3, [pc, #600]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 81019d6:	689b      	ldr	r3, [r3, #8]
 81019d8:	f003 030c 	and.w	r3, r3, #12
 81019dc:	2b04      	cmp	r3, #4
 81019de:	d00c      	beq.n	81019fa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 81019e0:	4b93      	ldr	r3, [pc, #588]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 81019e2:	689b      	ldr	r3, [r3, #8]
 81019e4:	f003 030c 	and.w	r3, r3, #12
 81019e8:	2b08      	cmp	r3, #8
 81019ea:	d112      	bne.n	8101a12 <HAL_RCC_OscConfig+0x62>
 81019ec:	4b90      	ldr	r3, [pc, #576]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 81019ee:	685b      	ldr	r3, [r3, #4]
 81019f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81019f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81019f8:	d10b      	bne.n	8101a12 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 81019fa:	4b8d      	ldr	r3, [pc, #564]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 81019fc:	681b      	ldr	r3, [r3, #0]
 81019fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8101a02:	2b00      	cmp	r3, #0
 8101a04:	d06c      	beq.n	8101ae0 <HAL_RCC_OscConfig+0x130>
 8101a06:	687b      	ldr	r3, [r7, #4]
 8101a08:	685b      	ldr	r3, [r3, #4]
 8101a0a:	2b00      	cmp	r3, #0
 8101a0c:	d168      	bne.n	8101ae0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8101a0e:	2301      	movs	r3, #1
 8101a10:	e275      	b.n	8101efe <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8101a12:	687b      	ldr	r3, [r7, #4]
 8101a14:	685b      	ldr	r3, [r3, #4]
 8101a16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8101a1a:	d106      	bne.n	8101a2a <HAL_RCC_OscConfig+0x7a>
 8101a1c:	4b84      	ldr	r3, [pc, #528]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101a1e:	681b      	ldr	r3, [r3, #0]
 8101a20:	4a83      	ldr	r2, [pc, #524]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101a22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8101a26:	6013      	str	r3, [r2, #0]
 8101a28:	e02e      	b.n	8101a88 <HAL_RCC_OscConfig+0xd8>
 8101a2a:	687b      	ldr	r3, [r7, #4]
 8101a2c:	685b      	ldr	r3, [r3, #4]
 8101a2e:	2b00      	cmp	r3, #0
 8101a30:	d10c      	bne.n	8101a4c <HAL_RCC_OscConfig+0x9c>
 8101a32:	4b7f      	ldr	r3, [pc, #508]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101a34:	681b      	ldr	r3, [r3, #0]
 8101a36:	4a7e      	ldr	r2, [pc, #504]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101a38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8101a3c:	6013      	str	r3, [r2, #0]
 8101a3e:	4b7c      	ldr	r3, [pc, #496]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101a40:	681b      	ldr	r3, [r3, #0]
 8101a42:	4a7b      	ldr	r2, [pc, #492]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101a44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8101a48:	6013      	str	r3, [r2, #0]
 8101a4a:	e01d      	b.n	8101a88 <HAL_RCC_OscConfig+0xd8>
 8101a4c:	687b      	ldr	r3, [r7, #4]
 8101a4e:	685b      	ldr	r3, [r3, #4]
 8101a50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8101a54:	d10c      	bne.n	8101a70 <HAL_RCC_OscConfig+0xc0>
 8101a56:	4b76      	ldr	r3, [pc, #472]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101a58:	681b      	ldr	r3, [r3, #0]
 8101a5a:	4a75      	ldr	r2, [pc, #468]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101a5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8101a60:	6013      	str	r3, [r2, #0]
 8101a62:	4b73      	ldr	r3, [pc, #460]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101a64:	681b      	ldr	r3, [r3, #0]
 8101a66:	4a72      	ldr	r2, [pc, #456]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8101a6c:	6013      	str	r3, [r2, #0]
 8101a6e:	e00b      	b.n	8101a88 <HAL_RCC_OscConfig+0xd8>
 8101a70:	4b6f      	ldr	r3, [pc, #444]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101a72:	681b      	ldr	r3, [r3, #0]
 8101a74:	4a6e      	ldr	r2, [pc, #440]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101a76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8101a7a:	6013      	str	r3, [r2, #0]
 8101a7c:	4b6c      	ldr	r3, [pc, #432]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101a7e:	681b      	ldr	r3, [r3, #0]
 8101a80:	4a6b      	ldr	r2, [pc, #428]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101a82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8101a86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8101a88:	687b      	ldr	r3, [r7, #4]
 8101a8a:	685b      	ldr	r3, [r3, #4]
 8101a8c:	2b00      	cmp	r3, #0
 8101a8e:	d013      	beq.n	8101ab8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8101a90:	f7ff f99c 	bl	8100dcc <HAL_GetTick>
 8101a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8101a96:	e008      	b.n	8101aaa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8101a98:	f7ff f998 	bl	8100dcc <HAL_GetTick>
 8101a9c:	4602      	mov	r2, r0
 8101a9e:	693b      	ldr	r3, [r7, #16]
 8101aa0:	1ad3      	subs	r3, r2, r3
 8101aa2:	2b64      	cmp	r3, #100	@ 0x64
 8101aa4:	d901      	bls.n	8101aaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8101aa6:	2303      	movs	r3, #3
 8101aa8:	e229      	b.n	8101efe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8101aaa:	4b61      	ldr	r3, [pc, #388]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101aac:	681b      	ldr	r3, [r3, #0]
 8101aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8101ab2:	2b00      	cmp	r3, #0
 8101ab4:	d0f0      	beq.n	8101a98 <HAL_RCC_OscConfig+0xe8>
 8101ab6:	e014      	b.n	8101ae2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8101ab8:	f7ff f988 	bl	8100dcc <HAL_GetTick>
 8101abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8101abe:	e008      	b.n	8101ad2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8101ac0:	f7ff f984 	bl	8100dcc <HAL_GetTick>
 8101ac4:	4602      	mov	r2, r0
 8101ac6:	693b      	ldr	r3, [r7, #16]
 8101ac8:	1ad3      	subs	r3, r2, r3
 8101aca:	2b64      	cmp	r3, #100	@ 0x64
 8101acc:	d901      	bls.n	8101ad2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8101ace:	2303      	movs	r3, #3
 8101ad0:	e215      	b.n	8101efe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8101ad2:	4b57      	ldr	r3, [pc, #348]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101ad4:	681b      	ldr	r3, [r3, #0]
 8101ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8101ada:	2b00      	cmp	r3, #0
 8101adc:	d1f0      	bne.n	8101ac0 <HAL_RCC_OscConfig+0x110>
 8101ade:	e000      	b.n	8101ae2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8101ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8101ae2:	687b      	ldr	r3, [r7, #4]
 8101ae4:	681b      	ldr	r3, [r3, #0]
 8101ae6:	f003 0302 	and.w	r3, r3, #2
 8101aea:	2b00      	cmp	r3, #0
 8101aec:	d069      	beq.n	8101bc2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8101aee:	4b50      	ldr	r3, [pc, #320]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101af0:	689b      	ldr	r3, [r3, #8]
 8101af2:	f003 030c 	and.w	r3, r3, #12
 8101af6:	2b00      	cmp	r3, #0
 8101af8:	d00b      	beq.n	8101b12 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8101afa:	4b4d      	ldr	r3, [pc, #308]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101afc:	689b      	ldr	r3, [r3, #8]
 8101afe:	f003 030c 	and.w	r3, r3, #12
 8101b02:	2b08      	cmp	r3, #8
 8101b04:	d11c      	bne.n	8101b40 <HAL_RCC_OscConfig+0x190>
 8101b06:	4b4a      	ldr	r3, [pc, #296]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101b08:	685b      	ldr	r3, [r3, #4]
 8101b0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8101b0e:	2b00      	cmp	r3, #0
 8101b10:	d116      	bne.n	8101b40 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8101b12:	4b47      	ldr	r3, [pc, #284]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101b14:	681b      	ldr	r3, [r3, #0]
 8101b16:	f003 0302 	and.w	r3, r3, #2
 8101b1a:	2b00      	cmp	r3, #0
 8101b1c:	d005      	beq.n	8101b2a <HAL_RCC_OscConfig+0x17a>
 8101b1e:	687b      	ldr	r3, [r7, #4]
 8101b20:	68db      	ldr	r3, [r3, #12]
 8101b22:	2b01      	cmp	r3, #1
 8101b24:	d001      	beq.n	8101b2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8101b26:	2301      	movs	r3, #1
 8101b28:	e1e9      	b.n	8101efe <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8101b2a:	4b41      	ldr	r3, [pc, #260]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101b2c:	681b      	ldr	r3, [r3, #0]
 8101b2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8101b32:	687b      	ldr	r3, [r7, #4]
 8101b34:	691b      	ldr	r3, [r3, #16]
 8101b36:	00db      	lsls	r3, r3, #3
 8101b38:	493d      	ldr	r1, [pc, #244]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101b3a:	4313      	orrs	r3, r2
 8101b3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8101b3e:	e040      	b.n	8101bc2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8101b40:	687b      	ldr	r3, [r7, #4]
 8101b42:	68db      	ldr	r3, [r3, #12]
 8101b44:	2b00      	cmp	r3, #0
 8101b46:	d023      	beq.n	8101b90 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8101b48:	4b39      	ldr	r3, [pc, #228]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101b4a:	681b      	ldr	r3, [r3, #0]
 8101b4c:	4a38      	ldr	r2, [pc, #224]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101b4e:	f043 0301 	orr.w	r3, r3, #1
 8101b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8101b54:	f7ff f93a 	bl	8100dcc <HAL_GetTick>
 8101b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8101b5a:	e008      	b.n	8101b6e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8101b5c:	f7ff f936 	bl	8100dcc <HAL_GetTick>
 8101b60:	4602      	mov	r2, r0
 8101b62:	693b      	ldr	r3, [r7, #16]
 8101b64:	1ad3      	subs	r3, r2, r3
 8101b66:	2b02      	cmp	r3, #2
 8101b68:	d901      	bls.n	8101b6e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8101b6a:	2303      	movs	r3, #3
 8101b6c:	e1c7      	b.n	8101efe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8101b6e:	4b30      	ldr	r3, [pc, #192]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101b70:	681b      	ldr	r3, [r3, #0]
 8101b72:	f003 0302 	and.w	r3, r3, #2
 8101b76:	2b00      	cmp	r3, #0
 8101b78:	d0f0      	beq.n	8101b5c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8101b7a:	4b2d      	ldr	r3, [pc, #180]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101b7c:	681b      	ldr	r3, [r3, #0]
 8101b7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8101b82:	687b      	ldr	r3, [r7, #4]
 8101b84:	691b      	ldr	r3, [r3, #16]
 8101b86:	00db      	lsls	r3, r3, #3
 8101b88:	4929      	ldr	r1, [pc, #164]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101b8a:	4313      	orrs	r3, r2
 8101b8c:	600b      	str	r3, [r1, #0]
 8101b8e:	e018      	b.n	8101bc2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8101b90:	4b27      	ldr	r3, [pc, #156]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101b92:	681b      	ldr	r3, [r3, #0]
 8101b94:	4a26      	ldr	r2, [pc, #152]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101b96:	f023 0301 	bic.w	r3, r3, #1
 8101b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8101b9c:	f7ff f916 	bl	8100dcc <HAL_GetTick>
 8101ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8101ba2:	e008      	b.n	8101bb6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8101ba4:	f7ff f912 	bl	8100dcc <HAL_GetTick>
 8101ba8:	4602      	mov	r2, r0
 8101baa:	693b      	ldr	r3, [r7, #16]
 8101bac:	1ad3      	subs	r3, r2, r3
 8101bae:	2b02      	cmp	r3, #2
 8101bb0:	d901      	bls.n	8101bb6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8101bb2:	2303      	movs	r3, #3
 8101bb4:	e1a3      	b.n	8101efe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8101bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101bb8:	681b      	ldr	r3, [r3, #0]
 8101bba:	f003 0302 	and.w	r3, r3, #2
 8101bbe:	2b00      	cmp	r3, #0
 8101bc0:	d1f0      	bne.n	8101ba4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8101bc2:	687b      	ldr	r3, [r7, #4]
 8101bc4:	681b      	ldr	r3, [r3, #0]
 8101bc6:	f003 0308 	and.w	r3, r3, #8
 8101bca:	2b00      	cmp	r3, #0
 8101bcc:	d038      	beq.n	8101c40 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8101bce:	687b      	ldr	r3, [r7, #4]
 8101bd0:	695b      	ldr	r3, [r3, #20]
 8101bd2:	2b00      	cmp	r3, #0
 8101bd4:	d019      	beq.n	8101c0a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8101bd6:	4b16      	ldr	r3, [pc, #88]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101bd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8101bda:	4a15      	ldr	r2, [pc, #84]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101bdc:	f043 0301 	orr.w	r3, r3, #1
 8101be0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8101be2:	f7ff f8f3 	bl	8100dcc <HAL_GetTick>
 8101be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8101be8:	e008      	b.n	8101bfc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8101bea:	f7ff f8ef 	bl	8100dcc <HAL_GetTick>
 8101bee:	4602      	mov	r2, r0
 8101bf0:	693b      	ldr	r3, [r7, #16]
 8101bf2:	1ad3      	subs	r3, r2, r3
 8101bf4:	2b02      	cmp	r3, #2
 8101bf6:	d901      	bls.n	8101bfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8101bf8:	2303      	movs	r3, #3
 8101bfa:	e180      	b.n	8101efe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8101bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101bfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8101c00:	f003 0302 	and.w	r3, r3, #2
 8101c04:	2b00      	cmp	r3, #0
 8101c06:	d0f0      	beq.n	8101bea <HAL_RCC_OscConfig+0x23a>
 8101c08:	e01a      	b.n	8101c40 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8101c0a:	4b09      	ldr	r3, [pc, #36]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101c0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8101c0e:	4a08      	ldr	r2, [pc, #32]	@ (8101c30 <HAL_RCC_OscConfig+0x280>)
 8101c10:	f023 0301 	bic.w	r3, r3, #1
 8101c14:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8101c16:	f7ff f8d9 	bl	8100dcc <HAL_GetTick>
 8101c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8101c1c:	e00a      	b.n	8101c34 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8101c1e:	f7ff f8d5 	bl	8100dcc <HAL_GetTick>
 8101c22:	4602      	mov	r2, r0
 8101c24:	693b      	ldr	r3, [r7, #16]
 8101c26:	1ad3      	subs	r3, r2, r3
 8101c28:	2b02      	cmp	r3, #2
 8101c2a:	d903      	bls.n	8101c34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8101c2c:	2303      	movs	r3, #3
 8101c2e:	e166      	b.n	8101efe <HAL_RCC_OscConfig+0x54e>
 8101c30:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8101c34:	4b92      	ldr	r3, [pc, #584]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101c36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8101c38:	f003 0302 	and.w	r3, r3, #2
 8101c3c:	2b00      	cmp	r3, #0
 8101c3e:	d1ee      	bne.n	8101c1e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8101c40:	687b      	ldr	r3, [r7, #4]
 8101c42:	681b      	ldr	r3, [r3, #0]
 8101c44:	f003 0304 	and.w	r3, r3, #4
 8101c48:	2b00      	cmp	r3, #0
 8101c4a:	f000 80a4 	beq.w	8101d96 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8101c4e:	4b8c      	ldr	r3, [pc, #560]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8101c56:	2b00      	cmp	r3, #0
 8101c58:	d10d      	bne.n	8101c76 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8101c5a:	4b89      	ldr	r3, [pc, #548]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101c5e:	4a88      	ldr	r2, [pc, #544]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101c60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8101c64:	6413      	str	r3, [r2, #64]	@ 0x40
 8101c66:	4b86      	ldr	r3, [pc, #536]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8101c6e:	60bb      	str	r3, [r7, #8]
 8101c70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8101c72:	2301      	movs	r3, #1
 8101c74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8101c76:	4b83      	ldr	r3, [pc, #524]	@ (8101e84 <HAL_RCC_OscConfig+0x4d4>)
 8101c78:	681b      	ldr	r3, [r3, #0]
 8101c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8101c7e:	2b00      	cmp	r3, #0
 8101c80:	d118      	bne.n	8101cb4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8101c82:	4b80      	ldr	r3, [pc, #512]	@ (8101e84 <HAL_RCC_OscConfig+0x4d4>)
 8101c84:	681b      	ldr	r3, [r3, #0]
 8101c86:	4a7f      	ldr	r2, [pc, #508]	@ (8101e84 <HAL_RCC_OscConfig+0x4d4>)
 8101c88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8101c8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8101c8e:	f7ff f89d 	bl	8100dcc <HAL_GetTick>
 8101c92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8101c94:	e008      	b.n	8101ca8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8101c96:	f7ff f899 	bl	8100dcc <HAL_GetTick>
 8101c9a:	4602      	mov	r2, r0
 8101c9c:	693b      	ldr	r3, [r7, #16]
 8101c9e:	1ad3      	subs	r3, r2, r3
 8101ca0:	2b64      	cmp	r3, #100	@ 0x64
 8101ca2:	d901      	bls.n	8101ca8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8101ca4:	2303      	movs	r3, #3
 8101ca6:	e12a      	b.n	8101efe <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8101ca8:	4b76      	ldr	r3, [pc, #472]	@ (8101e84 <HAL_RCC_OscConfig+0x4d4>)
 8101caa:	681b      	ldr	r3, [r3, #0]
 8101cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8101cb0:	2b00      	cmp	r3, #0
 8101cb2:	d0f0      	beq.n	8101c96 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8101cb4:	687b      	ldr	r3, [r7, #4]
 8101cb6:	689b      	ldr	r3, [r3, #8]
 8101cb8:	2b01      	cmp	r3, #1
 8101cba:	d106      	bne.n	8101cca <HAL_RCC_OscConfig+0x31a>
 8101cbc:	4b70      	ldr	r3, [pc, #448]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101cbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101cc0:	4a6f      	ldr	r2, [pc, #444]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101cc2:	f043 0301 	orr.w	r3, r3, #1
 8101cc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8101cc8:	e02d      	b.n	8101d26 <HAL_RCC_OscConfig+0x376>
 8101cca:	687b      	ldr	r3, [r7, #4]
 8101ccc:	689b      	ldr	r3, [r3, #8]
 8101cce:	2b00      	cmp	r3, #0
 8101cd0:	d10c      	bne.n	8101cec <HAL_RCC_OscConfig+0x33c>
 8101cd2:	4b6b      	ldr	r3, [pc, #428]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101cd6:	4a6a      	ldr	r2, [pc, #424]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101cd8:	f023 0301 	bic.w	r3, r3, #1
 8101cdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8101cde:	4b68      	ldr	r3, [pc, #416]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101ce2:	4a67      	ldr	r2, [pc, #412]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101ce4:	f023 0304 	bic.w	r3, r3, #4
 8101ce8:	6713      	str	r3, [r2, #112]	@ 0x70
 8101cea:	e01c      	b.n	8101d26 <HAL_RCC_OscConfig+0x376>
 8101cec:	687b      	ldr	r3, [r7, #4]
 8101cee:	689b      	ldr	r3, [r3, #8]
 8101cf0:	2b05      	cmp	r3, #5
 8101cf2:	d10c      	bne.n	8101d0e <HAL_RCC_OscConfig+0x35e>
 8101cf4:	4b62      	ldr	r3, [pc, #392]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101cf8:	4a61      	ldr	r2, [pc, #388]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101cfa:	f043 0304 	orr.w	r3, r3, #4
 8101cfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8101d00:	4b5f      	ldr	r3, [pc, #380]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101d04:	4a5e      	ldr	r2, [pc, #376]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101d06:	f043 0301 	orr.w	r3, r3, #1
 8101d0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8101d0c:	e00b      	b.n	8101d26 <HAL_RCC_OscConfig+0x376>
 8101d0e:	4b5c      	ldr	r3, [pc, #368]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101d12:	4a5b      	ldr	r2, [pc, #364]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101d14:	f023 0301 	bic.w	r3, r3, #1
 8101d18:	6713      	str	r3, [r2, #112]	@ 0x70
 8101d1a:	4b59      	ldr	r3, [pc, #356]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101d1e:	4a58      	ldr	r2, [pc, #352]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101d20:	f023 0304 	bic.w	r3, r3, #4
 8101d24:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8101d26:	687b      	ldr	r3, [r7, #4]
 8101d28:	689b      	ldr	r3, [r3, #8]
 8101d2a:	2b00      	cmp	r3, #0
 8101d2c:	d015      	beq.n	8101d5a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8101d2e:	f7ff f84d 	bl	8100dcc <HAL_GetTick>
 8101d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8101d34:	e00a      	b.n	8101d4c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8101d36:	f7ff f849 	bl	8100dcc <HAL_GetTick>
 8101d3a:	4602      	mov	r2, r0
 8101d3c:	693b      	ldr	r3, [r7, #16]
 8101d3e:	1ad3      	subs	r3, r2, r3
 8101d40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8101d44:	4293      	cmp	r3, r2
 8101d46:	d901      	bls.n	8101d4c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8101d48:	2303      	movs	r3, #3
 8101d4a:	e0d8      	b.n	8101efe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8101d4c:	4b4c      	ldr	r3, [pc, #304]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101d4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101d50:	f003 0302 	and.w	r3, r3, #2
 8101d54:	2b00      	cmp	r3, #0
 8101d56:	d0ee      	beq.n	8101d36 <HAL_RCC_OscConfig+0x386>
 8101d58:	e014      	b.n	8101d84 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8101d5a:	f7ff f837 	bl	8100dcc <HAL_GetTick>
 8101d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8101d60:	e00a      	b.n	8101d78 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8101d62:	f7ff f833 	bl	8100dcc <HAL_GetTick>
 8101d66:	4602      	mov	r2, r0
 8101d68:	693b      	ldr	r3, [r7, #16]
 8101d6a:	1ad3      	subs	r3, r2, r3
 8101d6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8101d70:	4293      	cmp	r3, r2
 8101d72:	d901      	bls.n	8101d78 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8101d74:	2303      	movs	r3, #3
 8101d76:	e0c2      	b.n	8101efe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8101d78:	4b41      	ldr	r3, [pc, #260]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101d7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101d7c:	f003 0302 	and.w	r3, r3, #2
 8101d80:	2b00      	cmp	r3, #0
 8101d82:	d1ee      	bne.n	8101d62 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8101d84:	7dfb      	ldrb	r3, [r7, #23]
 8101d86:	2b01      	cmp	r3, #1
 8101d88:	d105      	bne.n	8101d96 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8101d8a:	4b3d      	ldr	r3, [pc, #244]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101d8e:	4a3c      	ldr	r2, [pc, #240]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101d90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8101d94:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8101d96:	687b      	ldr	r3, [r7, #4]
 8101d98:	699b      	ldr	r3, [r3, #24]
 8101d9a:	2b00      	cmp	r3, #0
 8101d9c:	f000 80ae 	beq.w	8101efc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8101da0:	4b37      	ldr	r3, [pc, #220]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101da2:	689b      	ldr	r3, [r3, #8]
 8101da4:	f003 030c 	and.w	r3, r3, #12
 8101da8:	2b08      	cmp	r3, #8
 8101daa:	d06d      	beq.n	8101e88 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8101dac:	687b      	ldr	r3, [r7, #4]
 8101dae:	699b      	ldr	r3, [r3, #24]
 8101db0:	2b02      	cmp	r3, #2
 8101db2:	d14b      	bne.n	8101e4c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8101db4:	4b32      	ldr	r3, [pc, #200]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101db6:	681b      	ldr	r3, [r3, #0]
 8101db8:	4a31      	ldr	r2, [pc, #196]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101dba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8101dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8101dc0:	f7ff f804 	bl	8100dcc <HAL_GetTick>
 8101dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8101dc6:	e008      	b.n	8101dda <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8101dc8:	f7ff f800 	bl	8100dcc <HAL_GetTick>
 8101dcc:	4602      	mov	r2, r0
 8101dce:	693b      	ldr	r3, [r7, #16]
 8101dd0:	1ad3      	subs	r3, r2, r3
 8101dd2:	2b02      	cmp	r3, #2
 8101dd4:	d901      	bls.n	8101dda <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8101dd6:	2303      	movs	r3, #3
 8101dd8:	e091      	b.n	8101efe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8101dda:	4b29      	ldr	r3, [pc, #164]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101ddc:	681b      	ldr	r3, [r3, #0]
 8101dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8101de2:	2b00      	cmp	r3, #0
 8101de4:	d1f0      	bne.n	8101dc8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8101de6:	687b      	ldr	r3, [r7, #4]
 8101de8:	69da      	ldr	r2, [r3, #28]
 8101dea:	687b      	ldr	r3, [r7, #4]
 8101dec:	6a1b      	ldr	r3, [r3, #32]
 8101dee:	431a      	orrs	r2, r3
 8101df0:	687b      	ldr	r3, [r7, #4]
 8101df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8101df4:	019b      	lsls	r3, r3, #6
 8101df6:	431a      	orrs	r2, r3
 8101df8:	687b      	ldr	r3, [r7, #4]
 8101dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101dfc:	085b      	lsrs	r3, r3, #1
 8101dfe:	3b01      	subs	r3, #1
 8101e00:	041b      	lsls	r3, r3, #16
 8101e02:	431a      	orrs	r2, r3
 8101e04:	687b      	ldr	r3, [r7, #4]
 8101e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101e08:	061b      	lsls	r3, r3, #24
 8101e0a:	431a      	orrs	r2, r3
 8101e0c:	687b      	ldr	r3, [r7, #4]
 8101e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101e10:	071b      	lsls	r3, r3, #28
 8101e12:	491b      	ldr	r1, [pc, #108]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101e14:	4313      	orrs	r3, r2
 8101e16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8101e18:	4b19      	ldr	r3, [pc, #100]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101e1a:	681b      	ldr	r3, [r3, #0]
 8101e1c:	4a18      	ldr	r2, [pc, #96]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101e1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8101e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8101e24:	f7fe ffd2 	bl	8100dcc <HAL_GetTick>
 8101e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8101e2a:	e008      	b.n	8101e3e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8101e2c:	f7fe ffce 	bl	8100dcc <HAL_GetTick>
 8101e30:	4602      	mov	r2, r0
 8101e32:	693b      	ldr	r3, [r7, #16]
 8101e34:	1ad3      	subs	r3, r2, r3
 8101e36:	2b02      	cmp	r3, #2
 8101e38:	d901      	bls.n	8101e3e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8101e3a:	2303      	movs	r3, #3
 8101e3c:	e05f      	b.n	8101efe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8101e3e:	4b10      	ldr	r3, [pc, #64]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101e40:	681b      	ldr	r3, [r3, #0]
 8101e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8101e46:	2b00      	cmp	r3, #0
 8101e48:	d0f0      	beq.n	8101e2c <HAL_RCC_OscConfig+0x47c>
 8101e4a:	e057      	b.n	8101efc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8101e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101e4e:	681b      	ldr	r3, [r3, #0]
 8101e50:	4a0b      	ldr	r2, [pc, #44]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101e52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8101e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8101e58:	f7fe ffb8 	bl	8100dcc <HAL_GetTick>
 8101e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8101e5e:	e008      	b.n	8101e72 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8101e60:	f7fe ffb4 	bl	8100dcc <HAL_GetTick>
 8101e64:	4602      	mov	r2, r0
 8101e66:	693b      	ldr	r3, [r7, #16]
 8101e68:	1ad3      	subs	r3, r2, r3
 8101e6a:	2b02      	cmp	r3, #2
 8101e6c:	d901      	bls.n	8101e72 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8101e6e:	2303      	movs	r3, #3
 8101e70:	e045      	b.n	8101efe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8101e72:	4b03      	ldr	r3, [pc, #12]	@ (8101e80 <HAL_RCC_OscConfig+0x4d0>)
 8101e74:	681b      	ldr	r3, [r3, #0]
 8101e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8101e7a:	2b00      	cmp	r3, #0
 8101e7c:	d1f0      	bne.n	8101e60 <HAL_RCC_OscConfig+0x4b0>
 8101e7e:	e03d      	b.n	8101efc <HAL_RCC_OscConfig+0x54c>
 8101e80:	40023800 	.word	0x40023800
 8101e84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8101e88:	4b1f      	ldr	r3, [pc, #124]	@ (8101f08 <HAL_RCC_OscConfig+0x558>)
 8101e8a:	685b      	ldr	r3, [r3, #4]
 8101e8c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8101e8e:	687b      	ldr	r3, [r7, #4]
 8101e90:	699b      	ldr	r3, [r3, #24]
 8101e92:	2b01      	cmp	r3, #1
 8101e94:	d030      	beq.n	8101ef8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8101e96:	68fb      	ldr	r3, [r7, #12]
 8101e98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8101e9c:	687b      	ldr	r3, [r7, #4]
 8101e9e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8101ea0:	429a      	cmp	r2, r3
 8101ea2:	d129      	bne.n	8101ef8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8101ea4:	68fb      	ldr	r3, [r7, #12]
 8101ea6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8101eaa:	687b      	ldr	r3, [r7, #4]
 8101eac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8101eae:	429a      	cmp	r2, r3
 8101eb0:	d122      	bne.n	8101ef8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8101eb2:	68fa      	ldr	r2, [r7, #12]
 8101eb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8101eb8:	4013      	ands	r3, r2
 8101eba:	687a      	ldr	r2, [r7, #4]
 8101ebc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8101ebe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8101ec0:	4293      	cmp	r3, r2
 8101ec2:	d119      	bne.n	8101ef8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8101ec4:	68fb      	ldr	r3, [r7, #12]
 8101ec6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8101eca:	687b      	ldr	r3, [r7, #4]
 8101ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101ece:	085b      	lsrs	r3, r3, #1
 8101ed0:	3b01      	subs	r3, #1
 8101ed2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8101ed4:	429a      	cmp	r2, r3
 8101ed6:	d10f      	bne.n	8101ef8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8101ed8:	68fb      	ldr	r3, [r7, #12]
 8101eda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8101ede:	687b      	ldr	r3, [r7, #4]
 8101ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101ee2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8101ee4:	429a      	cmp	r2, r3
 8101ee6:	d107      	bne.n	8101ef8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8101ee8:	68fb      	ldr	r3, [r7, #12]
 8101eea:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8101eee:	687b      	ldr	r3, [r7, #4]
 8101ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101ef2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8101ef4:	429a      	cmp	r2, r3
 8101ef6:	d001      	beq.n	8101efc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8101ef8:	2301      	movs	r3, #1
 8101efa:	e000      	b.n	8101efe <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8101efc:	2300      	movs	r3, #0
}
 8101efe:	4618      	mov	r0, r3
 8101f00:	3718      	adds	r7, #24
 8101f02:	46bd      	mov	sp, r7
 8101f04:	bd80      	pop	{r7, pc}
 8101f06:	bf00      	nop
 8101f08:	40023800 	.word	0x40023800

08101f0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8101f0c:	b580      	push	{r7, lr}
 8101f0e:	b084      	sub	sp, #16
 8101f10:	af00      	add	r7, sp, #0
 8101f12:	6078      	str	r0, [r7, #4]
 8101f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8101f16:	2300      	movs	r3, #0
 8101f18:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8101f1a:	687b      	ldr	r3, [r7, #4]
 8101f1c:	2b00      	cmp	r3, #0
 8101f1e:	d101      	bne.n	8101f24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8101f20:	2301      	movs	r3, #1
 8101f22:	e0d0      	b.n	81020c6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8101f24:	4b6a      	ldr	r3, [pc, #424]	@ (81020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8101f26:	681b      	ldr	r3, [r3, #0]
 8101f28:	f003 030f 	and.w	r3, r3, #15
 8101f2c:	683a      	ldr	r2, [r7, #0]
 8101f2e:	429a      	cmp	r2, r3
 8101f30:	d910      	bls.n	8101f54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8101f32:	4b67      	ldr	r3, [pc, #412]	@ (81020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8101f34:	681b      	ldr	r3, [r3, #0]
 8101f36:	f023 020f 	bic.w	r2, r3, #15
 8101f3a:	4965      	ldr	r1, [pc, #404]	@ (81020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8101f3c:	683b      	ldr	r3, [r7, #0]
 8101f3e:	4313      	orrs	r3, r2
 8101f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8101f42:	4b63      	ldr	r3, [pc, #396]	@ (81020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8101f44:	681b      	ldr	r3, [r3, #0]
 8101f46:	f003 030f 	and.w	r3, r3, #15
 8101f4a:	683a      	ldr	r2, [r7, #0]
 8101f4c:	429a      	cmp	r2, r3
 8101f4e:	d001      	beq.n	8101f54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8101f50:	2301      	movs	r3, #1
 8101f52:	e0b8      	b.n	81020c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8101f54:	687b      	ldr	r3, [r7, #4]
 8101f56:	681b      	ldr	r3, [r3, #0]
 8101f58:	f003 0302 	and.w	r3, r3, #2
 8101f5c:	2b00      	cmp	r3, #0
 8101f5e:	d020      	beq.n	8101fa2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8101f60:	687b      	ldr	r3, [r7, #4]
 8101f62:	681b      	ldr	r3, [r3, #0]
 8101f64:	f003 0304 	and.w	r3, r3, #4
 8101f68:	2b00      	cmp	r3, #0
 8101f6a:	d005      	beq.n	8101f78 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8101f6c:	4b59      	ldr	r3, [pc, #356]	@ (81020d4 <HAL_RCC_ClockConfig+0x1c8>)
 8101f6e:	689b      	ldr	r3, [r3, #8]
 8101f70:	4a58      	ldr	r2, [pc, #352]	@ (81020d4 <HAL_RCC_ClockConfig+0x1c8>)
 8101f72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8101f76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8101f78:	687b      	ldr	r3, [r7, #4]
 8101f7a:	681b      	ldr	r3, [r3, #0]
 8101f7c:	f003 0308 	and.w	r3, r3, #8
 8101f80:	2b00      	cmp	r3, #0
 8101f82:	d005      	beq.n	8101f90 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8101f84:	4b53      	ldr	r3, [pc, #332]	@ (81020d4 <HAL_RCC_ClockConfig+0x1c8>)
 8101f86:	689b      	ldr	r3, [r3, #8]
 8101f88:	4a52      	ldr	r2, [pc, #328]	@ (81020d4 <HAL_RCC_ClockConfig+0x1c8>)
 8101f8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8101f8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8101f90:	4b50      	ldr	r3, [pc, #320]	@ (81020d4 <HAL_RCC_ClockConfig+0x1c8>)
 8101f92:	689b      	ldr	r3, [r3, #8]
 8101f94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8101f98:	687b      	ldr	r3, [r7, #4]
 8101f9a:	689b      	ldr	r3, [r3, #8]
 8101f9c:	494d      	ldr	r1, [pc, #308]	@ (81020d4 <HAL_RCC_ClockConfig+0x1c8>)
 8101f9e:	4313      	orrs	r3, r2
 8101fa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8101fa2:	687b      	ldr	r3, [r7, #4]
 8101fa4:	681b      	ldr	r3, [r3, #0]
 8101fa6:	f003 0301 	and.w	r3, r3, #1
 8101faa:	2b00      	cmp	r3, #0
 8101fac:	d040      	beq.n	8102030 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8101fae:	687b      	ldr	r3, [r7, #4]
 8101fb0:	685b      	ldr	r3, [r3, #4]
 8101fb2:	2b01      	cmp	r3, #1
 8101fb4:	d107      	bne.n	8101fc6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8101fb6:	4b47      	ldr	r3, [pc, #284]	@ (81020d4 <HAL_RCC_ClockConfig+0x1c8>)
 8101fb8:	681b      	ldr	r3, [r3, #0]
 8101fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8101fbe:	2b00      	cmp	r3, #0
 8101fc0:	d115      	bne.n	8101fee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8101fc2:	2301      	movs	r3, #1
 8101fc4:	e07f      	b.n	81020c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8101fc6:	687b      	ldr	r3, [r7, #4]
 8101fc8:	685b      	ldr	r3, [r3, #4]
 8101fca:	2b02      	cmp	r3, #2
 8101fcc:	d107      	bne.n	8101fde <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8101fce:	4b41      	ldr	r3, [pc, #260]	@ (81020d4 <HAL_RCC_ClockConfig+0x1c8>)
 8101fd0:	681b      	ldr	r3, [r3, #0]
 8101fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8101fd6:	2b00      	cmp	r3, #0
 8101fd8:	d109      	bne.n	8101fee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8101fda:	2301      	movs	r3, #1
 8101fdc:	e073      	b.n	81020c6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8101fde:	4b3d      	ldr	r3, [pc, #244]	@ (81020d4 <HAL_RCC_ClockConfig+0x1c8>)
 8101fe0:	681b      	ldr	r3, [r3, #0]
 8101fe2:	f003 0302 	and.w	r3, r3, #2
 8101fe6:	2b00      	cmp	r3, #0
 8101fe8:	d101      	bne.n	8101fee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8101fea:	2301      	movs	r3, #1
 8101fec:	e06b      	b.n	81020c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8101fee:	4b39      	ldr	r3, [pc, #228]	@ (81020d4 <HAL_RCC_ClockConfig+0x1c8>)
 8101ff0:	689b      	ldr	r3, [r3, #8]
 8101ff2:	f023 0203 	bic.w	r2, r3, #3
 8101ff6:	687b      	ldr	r3, [r7, #4]
 8101ff8:	685b      	ldr	r3, [r3, #4]
 8101ffa:	4936      	ldr	r1, [pc, #216]	@ (81020d4 <HAL_RCC_ClockConfig+0x1c8>)
 8101ffc:	4313      	orrs	r3, r2
 8101ffe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102000:	f7fe fee4 	bl	8100dcc <HAL_GetTick>
 8102004:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8102006:	e00a      	b.n	810201e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8102008:	f7fe fee0 	bl	8100dcc <HAL_GetTick>
 810200c:	4602      	mov	r2, r0
 810200e:	68fb      	ldr	r3, [r7, #12]
 8102010:	1ad3      	subs	r3, r2, r3
 8102012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8102016:	4293      	cmp	r3, r2
 8102018:	d901      	bls.n	810201e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 810201a:	2303      	movs	r3, #3
 810201c:	e053      	b.n	81020c6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 810201e:	4b2d      	ldr	r3, [pc, #180]	@ (81020d4 <HAL_RCC_ClockConfig+0x1c8>)
 8102020:	689b      	ldr	r3, [r3, #8]
 8102022:	f003 020c 	and.w	r2, r3, #12
 8102026:	687b      	ldr	r3, [r7, #4]
 8102028:	685b      	ldr	r3, [r3, #4]
 810202a:	009b      	lsls	r3, r3, #2
 810202c:	429a      	cmp	r2, r3
 810202e:	d1eb      	bne.n	8102008 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8102030:	4b27      	ldr	r3, [pc, #156]	@ (81020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8102032:	681b      	ldr	r3, [r3, #0]
 8102034:	f003 030f 	and.w	r3, r3, #15
 8102038:	683a      	ldr	r2, [r7, #0]
 810203a:	429a      	cmp	r2, r3
 810203c:	d210      	bcs.n	8102060 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 810203e:	4b24      	ldr	r3, [pc, #144]	@ (81020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8102040:	681b      	ldr	r3, [r3, #0]
 8102042:	f023 020f 	bic.w	r2, r3, #15
 8102046:	4922      	ldr	r1, [pc, #136]	@ (81020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8102048:	683b      	ldr	r3, [r7, #0]
 810204a:	4313      	orrs	r3, r2
 810204c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 810204e:	4b20      	ldr	r3, [pc, #128]	@ (81020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8102050:	681b      	ldr	r3, [r3, #0]
 8102052:	f003 030f 	and.w	r3, r3, #15
 8102056:	683a      	ldr	r2, [r7, #0]
 8102058:	429a      	cmp	r2, r3
 810205a:	d001      	beq.n	8102060 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 810205c:	2301      	movs	r3, #1
 810205e:	e032      	b.n	81020c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8102060:	687b      	ldr	r3, [r7, #4]
 8102062:	681b      	ldr	r3, [r3, #0]
 8102064:	f003 0304 	and.w	r3, r3, #4
 8102068:	2b00      	cmp	r3, #0
 810206a:	d008      	beq.n	810207e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 810206c:	4b19      	ldr	r3, [pc, #100]	@ (81020d4 <HAL_RCC_ClockConfig+0x1c8>)
 810206e:	689b      	ldr	r3, [r3, #8]
 8102070:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8102074:	687b      	ldr	r3, [r7, #4]
 8102076:	68db      	ldr	r3, [r3, #12]
 8102078:	4916      	ldr	r1, [pc, #88]	@ (81020d4 <HAL_RCC_ClockConfig+0x1c8>)
 810207a:	4313      	orrs	r3, r2
 810207c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 810207e:	687b      	ldr	r3, [r7, #4]
 8102080:	681b      	ldr	r3, [r3, #0]
 8102082:	f003 0308 	and.w	r3, r3, #8
 8102086:	2b00      	cmp	r3, #0
 8102088:	d009      	beq.n	810209e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 810208a:	4b12      	ldr	r3, [pc, #72]	@ (81020d4 <HAL_RCC_ClockConfig+0x1c8>)
 810208c:	689b      	ldr	r3, [r3, #8]
 810208e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8102092:	687b      	ldr	r3, [r7, #4]
 8102094:	691b      	ldr	r3, [r3, #16]
 8102096:	00db      	lsls	r3, r3, #3
 8102098:	490e      	ldr	r1, [pc, #56]	@ (81020d4 <HAL_RCC_ClockConfig+0x1c8>)
 810209a:	4313      	orrs	r3, r2
 810209c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 810209e:	f000 f821 	bl	81020e4 <HAL_RCC_GetSysClockFreq>
 81020a2:	4602      	mov	r2, r0
 81020a4:	4b0b      	ldr	r3, [pc, #44]	@ (81020d4 <HAL_RCC_ClockConfig+0x1c8>)
 81020a6:	689b      	ldr	r3, [r3, #8]
 81020a8:	091b      	lsrs	r3, r3, #4
 81020aa:	f003 030f 	and.w	r3, r3, #15
 81020ae:	490a      	ldr	r1, [pc, #40]	@ (81020d8 <HAL_RCC_ClockConfig+0x1cc>)
 81020b0:	5ccb      	ldrb	r3, [r1, r3]
 81020b2:	fa22 f303 	lsr.w	r3, r2, r3
 81020b6:	4a09      	ldr	r2, [pc, #36]	@ (81020dc <HAL_RCC_ClockConfig+0x1d0>)
 81020b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 81020ba:	4b09      	ldr	r3, [pc, #36]	@ (81020e0 <HAL_RCC_ClockConfig+0x1d4>)
 81020bc:	681b      	ldr	r3, [r3, #0]
 81020be:	4618      	mov	r0, r3
 81020c0:	f7fe fe40 	bl	8100d44 <HAL_InitTick>

  return HAL_OK;
 81020c4:	2300      	movs	r3, #0
}
 81020c6:	4618      	mov	r0, r3
 81020c8:	3710      	adds	r7, #16
 81020ca:	46bd      	mov	sp, r7
 81020cc:	bd80      	pop	{r7, pc}
 81020ce:	bf00      	nop
 81020d0:	40023c00 	.word	0x40023c00
 81020d4:	40023800 	.word	0x40023800
 81020d8:	08103740 	.word	0x08103740
 81020dc:	20000008 	.word	0x20000008
 81020e0:	2000000c 	.word	0x2000000c

081020e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81020e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81020e8:	b094      	sub	sp, #80	@ 0x50
 81020ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 81020ec:	2300      	movs	r3, #0
 81020ee:	647b      	str	r3, [r7, #68]	@ 0x44
 81020f0:	2300      	movs	r3, #0
 81020f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81020f4:	2300      	movs	r3, #0
 81020f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 81020f8:	2300      	movs	r3, #0
 81020fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 81020fc:	4b79      	ldr	r3, [pc, #484]	@ (81022e4 <HAL_RCC_GetSysClockFreq+0x200>)
 81020fe:	689b      	ldr	r3, [r3, #8]
 8102100:	f003 030c 	and.w	r3, r3, #12
 8102104:	2b08      	cmp	r3, #8
 8102106:	d00d      	beq.n	8102124 <HAL_RCC_GetSysClockFreq+0x40>
 8102108:	2b08      	cmp	r3, #8
 810210a:	f200 80e1 	bhi.w	81022d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 810210e:	2b00      	cmp	r3, #0
 8102110:	d002      	beq.n	8102118 <HAL_RCC_GetSysClockFreq+0x34>
 8102112:	2b04      	cmp	r3, #4
 8102114:	d003      	beq.n	810211e <HAL_RCC_GetSysClockFreq+0x3a>
 8102116:	e0db      	b.n	81022d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8102118:	4b73      	ldr	r3, [pc, #460]	@ (81022e8 <HAL_RCC_GetSysClockFreq+0x204>)
 810211a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 810211c:	e0db      	b.n	81022d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 810211e:	4b73      	ldr	r3, [pc, #460]	@ (81022ec <HAL_RCC_GetSysClockFreq+0x208>)
 8102120:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8102122:	e0d8      	b.n	81022d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8102124:	4b6f      	ldr	r3, [pc, #444]	@ (81022e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8102126:	685b      	ldr	r3, [r3, #4]
 8102128:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810212c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 810212e:	4b6d      	ldr	r3, [pc, #436]	@ (81022e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8102130:	685b      	ldr	r3, [r3, #4]
 8102132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8102136:	2b00      	cmp	r3, #0
 8102138:	d063      	beq.n	8102202 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 810213a:	4b6a      	ldr	r3, [pc, #424]	@ (81022e4 <HAL_RCC_GetSysClockFreq+0x200>)
 810213c:	685b      	ldr	r3, [r3, #4]
 810213e:	099b      	lsrs	r3, r3, #6
 8102140:	2200      	movs	r2, #0
 8102142:	63bb      	str	r3, [r7, #56]	@ 0x38
 8102144:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8102146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810214c:	633b      	str	r3, [r7, #48]	@ 0x30
 810214e:	2300      	movs	r3, #0
 8102150:	637b      	str	r3, [r7, #52]	@ 0x34
 8102152:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8102156:	4622      	mov	r2, r4
 8102158:	462b      	mov	r3, r5
 810215a:	f04f 0000 	mov.w	r0, #0
 810215e:	f04f 0100 	mov.w	r1, #0
 8102162:	0159      	lsls	r1, r3, #5
 8102164:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8102168:	0150      	lsls	r0, r2, #5
 810216a:	4602      	mov	r2, r0
 810216c:	460b      	mov	r3, r1
 810216e:	4621      	mov	r1, r4
 8102170:	1a51      	subs	r1, r2, r1
 8102172:	6139      	str	r1, [r7, #16]
 8102174:	4629      	mov	r1, r5
 8102176:	eb63 0301 	sbc.w	r3, r3, r1
 810217a:	617b      	str	r3, [r7, #20]
 810217c:	f04f 0200 	mov.w	r2, #0
 8102180:	f04f 0300 	mov.w	r3, #0
 8102184:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8102188:	4659      	mov	r1, fp
 810218a:	018b      	lsls	r3, r1, #6
 810218c:	4651      	mov	r1, sl
 810218e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8102192:	4651      	mov	r1, sl
 8102194:	018a      	lsls	r2, r1, #6
 8102196:	4651      	mov	r1, sl
 8102198:	ebb2 0801 	subs.w	r8, r2, r1
 810219c:	4659      	mov	r1, fp
 810219e:	eb63 0901 	sbc.w	r9, r3, r1
 81021a2:	f04f 0200 	mov.w	r2, #0
 81021a6:	f04f 0300 	mov.w	r3, #0
 81021aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 81021ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 81021b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 81021b6:	4690      	mov	r8, r2
 81021b8:	4699      	mov	r9, r3
 81021ba:	4623      	mov	r3, r4
 81021bc:	eb18 0303 	adds.w	r3, r8, r3
 81021c0:	60bb      	str	r3, [r7, #8]
 81021c2:	462b      	mov	r3, r5
 81021c4:	eb49 0303 	adc.w	r3, r9, r3
 81021c8:	60fb      	str	r3, [r7, #12]
 81021ca:	f04f 0200 	mov.w	r2, #0
 81021ce:	f04f 0300 	mov.w	r3, #0
 81021d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 81021d6:	4629      	mov	r1, r5
 81021d8:	024b      	lsls	r3, r1, #9
 81021da:	4621      	mov	r1, r4
 81021dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 81021e0:	4621      	mov	r1, r4
 81021e2:	024a      	lsls	r2, r1, #9
 81021e4:	4610      	mov	r0, r2
 81021e6:	4619      	mov	r1, r3
 81021e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81021ea:	2200      	movs	r2, #0
 81021ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 81021ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 81021f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 81021f4:	f7fe f828 	bl	8100248 <__aeabi_uldivmod>
 81021f8:	4602      	mov	r2, r0
 81021fa:	460b      	mov	r3, r1
 81021fc:	4613      	mov	r3, r2
 81021fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8102200:	e058      	b.n	81022b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8102202:	4b38      	ldr	r3, [pc, #224]	@ (81022e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8102204:	685b      	ldr	r3, [r3, #4]
 8102206:	099b      	lsrs	r3, r3, #6
 8102208:	2200      	movs	r2, #0
 810220a:	4618      	mov	r0, r3
 810220c:	4611      	mov	r1, r2
 810220e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8102212:	623b      	str	r3, [r7, #32]
 8102214:	2300      	movs	r3, #0
 8102216:	627b      	str	r3, [r7, #36]	@ 0x24
 8102218:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 810221c:	4642      	mov	r2, r8
 810221e:	464b      	mov	r3, r9
 8102220:	f04f 0000 	mov.w	r0, #0
 8102224:	f04f 0100 	mov.w	r1, #0
 8102228:	0159      	lsls	r1, r3, #5
 810222a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 810222e:	0150      	lsls	r0, r2, #5
 8102230:	4602      	mov	r2, r0
 8102232:	460b      	mov	r3, r1
 8102234:	4641      	mov	r1, r8
 8102236:	ebb2 0a01 	subs.w	sl, r2, r1
 810223a:	4649      	mov	r1, r9
 810223c:	eb63 0b01 	sbc.w	fp, r3, r1
 8102240:	f04f 0200 	mov.w	r2, #0
 8102244:	f04f 0300 	mov.w	r3, #0
 8102248:	ea4f 138b 	mov.w	r3, fp, lsl #6
 810224c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8102250:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8102254:	ebb2 040a 	subs.w	r4, r2, sl
 8102258:	eb63 050b 	sbc.w	r5, r3, fp
 810225c:	f04f 0200 	mov.w	r2, #0
 8102260:	f04f 0300 	mov.w	r3, #0
 8102264:	00eb      	lsls	r3, r5, #3
 8102266:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 810226a:	00e2      	lsls	r2, r4, #3
 810226c:	4614      	mov	r4, r2
 810226e:	461d      	mov	r5, r3
 8102270:	4643      	mov	r3, r8
 8102272:	18e3      	adds	r3, r4, r3
 8102274:	603b      	str	r3, [r7, #0]
 8102276:	464b      	mov	r3, r9
 8102278:	eb45 0303 	adc.w	r3, r5, r3
 810227c:	607b      	str	r3, [r7, #4]
 810227e:	f04f 0200 	mov.w	r2, #0
 8102282:	f04f 0300 	mov.w	r3, #0
 8102286:	e9d7 4500 	ldrd	r4, r5, [r7]
 810228a:	4629      	mov	r1, r5
 810228c:	028b      	lsls	r3, r1, #10
 810228e:	4621      	mov	r1, r4
 8102290:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8102294:	4621      	mov	r1, r4
 8102296:	028a      	lsls	r2, r1, #10
 8102298:	4610      	mov	r0, r2
 810229a:	4619      	mov	r1, r3
 810229c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810229e:	2200      	movs	r2, #0
 81022a0:	61bb      	str	r3, [r7, #24]
 81022a2:	61fa      	str	r2, [r7, #28]
 81022a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 81022a8:	f7fd ffce 	bl	8100248 <__aeabi_uldivmod>
 81022ac:	4602      	mov	r2, r0
 81022ae:	460b      	mov	r3, r1
 81022b0:	4613      	mov	r3, r2
 81022b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 81022b4:	4b0b      	ldr	r3, [pc, #44]	@ (81022e4 <HAL_RCC_GetSysClockFreq+0x200>)
 81022b6:	685b      	ldr	r3, [r3, #4]
 81022b8:	0c1b      	lsrs	r3, r3, #16
 81022ba:	f003 0303 	and.w	r3, r3, #3
 81022be:	3301      	adds	r3, #1
 81022c0:	005b      	lsls	r3, r3, #1
 81022c2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 81022c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 81022c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81022c8:	fbb2 f3f3 	udiv	r3, r2, r3
 81022cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 81022ce:	e002      	b.n	81022d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 81022d0:	4b05      	ldr	r3, [pc, #20]	@ (81022e8 <HAL_RCC_GetSysClockFreq+0x204>)
 81022d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 81022d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 81022d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 81022d8:	4618      	mov	r0, r3
 81022da:	3750      	adds	r7, #80	@ 0x50
 81022dc:	46bd      	mov	sp, r7
 81022de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81022e2:	bf00      	nop
 81022e4:	40023800 	.word	0x40023800
 81022e8:	00f42400 	.word	0x00f42400
 81022ec:	007a1200 	.word	0x007a1200

081022f0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81022f0:	b480      	push	{r7}
 81022f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 81022f4:	4b03      	ldr	r3, [pc, #12]	@ (8102304 <HAL_RCC_GetHCLKFreq+0x14>)
 81022f6:	681b      	ldr	r3, [r3, #0]
}
 81022f8:	4618      	mov	r0, r3
 81022fa:	46bd      	mov	sp, r7
 81022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102300:	4770      	bx	lr
 8102302:	bf00      	nop
 8102304:	20000008 	.word	0x20000008

08102308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8102308:	b580      	push	{r7, lr}
 810230a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 810230c:	f7ff fff0 	bl	81022f0 <HAL_RCC_GetHCLKFreq>
 8102310:	4602      	mov	r2, r0
 8102312:	4b05      	ldr	r3, [pc, #20]	@ (8102328 <HAL_RCC_GetPCLK1Freq+0x20>)
 8102314:	689b      	ldr	r3, [r3, #8]
 8102316:	0a9b      	lsrs	r3, r3, #10
 8102318:	f003 0307 	and.w	r3, r3, #7
 810231c:	4903      	ldr	r1, [pc, #12]	@ (810232c <HAL_RCC_GetPCLK1Freq+0x24>)
 810231e:	5ccb      	ldrb	r3, [r1, r3]
 8102320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8102324:	4618      	mov	r0, r3
 8102326:	bd80      	pop	{r7, pc}
 8102328:	40023800 	.word	0x40023800
 810232c:	08103750 	.word	0x08103750

08102330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8102330:	b580      	push	{r7, lr}
 8102332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8102334:	f7ff ffdc 	bl	81022f0 <HAL_RCC_GetHCLKFreq>
 8102338:	4602      	mov	r2, r0
 810233a:	4b05      	ldr	r3, [pc, #20]	@ (8102350 <HAL_RCC_GetPCLK2Freq+0x20>)
 810233c:	689b      	ldr	r3, [r3, #8]
 810233e:	0b5b      	lsrs	r3, r3, #13
 8102340:	f003 0307 	and.w	r3, r3, #7
 8102344:	4903      	ldr	r1, [pc, #12]	@ (8102354 <HAL_RCC_GetPCLK2Freq+0x24>)
 8102346:	5ccb      	ldrb	r3, [r1, r3]
 8102348:	fa22 f303 	lsr.w	r3, r2, r3
}
 810234c:	4618      	mov	r0, r3
 810234e:	bd80      	pop	{r7, pc}
 8102350:	40023800 	.word	0x40023800
 8102354:	08103750 	.word	0x08103750

08102358 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8102358:	b580      	push	{r7, lr}
 810235a:	b088      	sub	sp, #32
 810235c:	af00      	add	r7, sp, #0
 810235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8102360:	2300      	movs	r3, #0
 8102362:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8102364:	2300      	movs	r3, #0
 8102366:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8102368:	2300      	movs	r3, #0
 810236a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 810236c:	2300      	movs	r3, #0
 810236e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8102370:	2300      	movs	r3, #0
 8102372:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8102374:	687b      	ldr	r3, [r7, #4]
 8102376:	681b      	ldr	r3, [r3, #0]
 8102378:	f003 0301 	and.w	r3, r3, #1
 810237c:	2b00      	cmp	r3, #0
 810237e:	d012      	beq.n	81023a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8102380:	4b69      	ldr	r3, [pc, #420]	@ (8102528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8102382:	689b      	ldr	r3, [r3, #8]
 8102384:	4a68      	ldr	r2, [pc, #416]	@ (8102528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8102386:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 810238a:	6093      	str	r3, [r2, #8]
 810238c:	4b66      	ldr	r3, [pc, #408]	@ (8102528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 810238e:	689a      	ldr	r2, [r3, #8]
 8102390:	687b      	ldr	r3, [r7, #4]
 8102392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8102394:	4964      	ldr	r1, [pc, #400]	@ (8102528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8102396:	4313      	orrs	r3, r2
 8102398:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 810239a:	687b      	ldr	r3, [r7, #4]
 810239c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810239e:	2b00      	cmp	r3, #0
 81023a0:	d101      	bne.n	81023a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 81023a2:	2301      	movs	r3, #1
 81023a4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 81023a6:	687b      	ldr	r3, [r7, #4]
 81023a8:	681b      	ldr	r3, [r3, #0]
 81023aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 81023ae:	2b00      	cmp	r3, #0
 81023b0:	d017      	beq.n	81023e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81023b2:	4b5d      	ldr	r3, [pc, #372]	@ (8102528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 81023b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81023b8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 81023bc:	687b      	ldr	r3, [r7, #4]
 81023be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81023c0:	4959      	ldr	r1, [pc, #356]	@ (8102528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 81023c2:	4313      	orrs	r3, r2
 81023c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 81023c8:	687b      	ldr	r3, [r7, #4]
 81023ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81023cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81023d0:	d101      	bne.n	81023d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 81023d2:	2301      	movs	r3, #1
 81023d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 81023d6:	687b      	ldr	r3, [r7, #4]
 81023d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81023da:	2b00      	cmp	r3, #0
 81023dc:	d101      	bne.n	81023e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 81023de:	2301      	movs	r3, #1
 81023e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 81023e2:	687b      	ldr	r3, [r7, #4]
 81023e4:	681b      	ldr	r3, [r3, #0]
 81023e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81023ea:	2b00      	cmp	r3, #0
 81023ec:	d017      	beq.n	810241e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 81023ee:	4b4e      	ldr	r3, [pc, #312]	@ (8102528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 81023f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81023f4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 81023f8:	687b      	ldr	r3, [r7, #4]
 81023fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81023fc:	494a      	ldr	r1, [pc, #296]	@ (8102528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 81023fe:	4313      	orrs	r3, r2
 8102400:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8102404:	687b      	ldr	r3, [r7, #4]
 8102406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102408:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810240c:	d101      	bne.n	8102412 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 810240e:	2301      	movs	r3, #1
 8102410:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8102412:	687b      	ldr	r3, [r7, #4]
 8102414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102416:	2b00      	cmp	r3, #0
 8102418:	d101      	bne.n	810241e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 810241a:	2301      	movs	r3, #1
 810241c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 810241e:	687b      	ldr	r3, [r7, #4]
 8102420:	681b      	ldr	r3, [r3, #0]
 8102422:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8102426:	2b00      	cmp	r3, #0
 8102428:	d001      	beq.n	810242e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 810242a:	2301      	movs	r3, #1
 810242c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 810242e:	687b      	ldr	r3, [r7, #4]
 8102430:	681b      	ldr	r3, [r3, #0]
 8102432:	f003 0320 	and.w	r3, r3, #32
 8102436:	2b00      	cmp	r3, #0
 8102438:	f000 808b 	beq.w	8102552 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 810243c:	4b3a      	ldr	r3, [pc, #232]	@ (8102528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 810243e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102440:	4a39      	ldr	r2, [pc, #228]	@ (8102528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8102442:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8102446:	6413      	str	r3, [r2, #64]	@ 0x40
 8102448:	4b37      	ldr	r3, [pc, #220]	@ (8102528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 810244a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810244c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8102450:	60bb      	str	r3, [r7, #8]
 8102452:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8102454:	4b35      	ldr	r3, [pc, #212]	@ (810252c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8102456:	681b      	ldr	r3, [r3, #0]
 8102458:	4a34      	ldr	r2, [pc, #208]	@ (810252c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 810245a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810245e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102460:	f7fe fcb4 	bl	8100dcc <HAL_GetTick>
 8102464:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8102466:	e008      	b.n	810247a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8102468:	f7fe fcb0 	bl	8100dcc <HAL_GetTick>
 810246c:	4602      	mov	r2, r0
 810246e:	697b      	ldr	r3, [r7, #20]
 8102470:	1ad3      	subs	r3, r2, r3
 8102472:	2b64      	cmp	r3, #100	@ 0x64
 8102474:	d901      	bls.n	810247a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8102476:	2303      	movs	r3, #3
 8102478:	e38f      	b.n	8102b9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 810247a:	4b2c      	ldr	r3, [pc, #176]	@ (810252c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 810247c:	681b      	ldr	r3, [r3, #0]
 810247e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8102482:	2b00      	cmp	r3, #0
 8102484:	d0f0      	beq.n	8102468 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8102486:	4b28      	ldr	r3, [pc, #160]	@ (8102528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8102488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810248a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810248e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8102490:	693b      	ldr	r3, [r7, #16]
 8102492:	2b00      	cmp	r3, #0
 8102494:	d035      	beq.n	8102502 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8102496:	687b      	ldr	r3, [r7, #4]
 8102498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810249a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810249e:	693a      	ldr	r2, [r7, #16]
 81024a0:	429a      	cmp	r2, r3
 81024a2:	d02e      	beq.n	8102502 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81024a4:	4b20      	ldr	r3, [pc, #128]	@ (8102528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 81024a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81024a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 81024ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 81024ae:	4b1e      	ldr	r3, [pc, #120]	@ (8102528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 81024b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81024b2:	4a1d      	ldr	r2, [pc, #116]	@ (8102528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 81024b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 81024b8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 81024ba:	4b1b      	ldr	r3, [pc, #108]	@ (8102528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 81024bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81024be:	4a1a      	ldr	r2, [pc, #104]	@ (8102528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 81024c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 81024c4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 81024c6:	4a18      	ldr	r2, [pc, #96]	@ (8102528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 81024c8:	693b      	ldr	r3, [r7, #16]
 81024ca:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 81024cc:	4b16      	ldr	r3, [pc, #88]	@ (8102528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 81024ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81024d0:	f003 0301 	and.w	r3, r3, #1
 81024d4:	2b01      	cmp	r3, #1
 81024d6:	d114      	bne.n	8102502 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81024d8:	f7fe fc78 	bl	8100dcc <HAL_GetTick>
 81024dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 81024de:	e00a      	b.n	81024f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 81024e0:	f7fe fc74 	bl	8100dcc <HAL_GetTick>
 81024e4:	4602      	mov	r2, r0
 81024e6:	697b      	ldr	r3, [r7, #20]
 81024e8:	1ad3      	subs	r3, r2, r3
 81024ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 81024ee:	4293      	cmp	r3, r2
 81024f0:	d901      	bls.n	81024f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 81024f2:	2303      	movs	r3, #3
 81024f4:	e351      	b.n	8102b9a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 81024f6:	4b0c      	ldr	r3, [pc, #48]	@ (8102528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 81024f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81024fa:	f003 0302 	and.w	r3, r3, #2
 81024fe:	2b00      	cmp	r3, #0
 8102500:	d0ee      	beq.n	81024e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8102502:	687b      	ldr	r3, [r7, #4]
 8102504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102506:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810250a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810250e:	d111      	bne.n	8102534 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8102510:	4b05      	ldr	r3, [pc, #20]	@ (8102528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8102512:	689b      	ldr	r3, [r3, #8]
 8102514:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8102518:	687b      	ldr	r3, [r7, #4]
 810251a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 810251c:	4b04      	ldr	r3, [pc, #16]	@ (8102530 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 810251e:	400b      	ands	r3, r1
 8102520:	4901      	ldr	r1, [pc, #4]	@ (8102528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8102522:	4313      	orrs	r3, r2
 8102524:	608b      	str	r3, [r1, #8]
 8102526:	e00b      	b.n	8102540 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8102528:	40023800 	.word	0x40023800
 810252c:	40007000 	.word	0x40007000
 8102530:	0ffffcff 	.word	0x0ffffcff
 8102534:	4bac      	ldr	r3, [pc, #688]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8102536:	689b      	ldr	r3, [r3, #8]
 8102538:	4aab      	ldr	r2, [pc, #684]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 810253a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 810253e:	6093      	str	r3, [r2, #8]
 8102540:	4ba9      	ldr	r3, [pc, #676]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8102542:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8102544:	687b      	ldr	r3, [r7, #4]
 8102546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810254c:	49a6      	ldr	r1, [pc, #664]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 810254e:	4313      	orrs	r3, r2
 8102550:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8102552:	687b      	ldr	r3, [r7, #4]
 8102554:	681b      	ldr	r3, [r3, #0]
 8102556:	f003 0310 	and.w	r3, r3, #16
 810255a:	2b00      	cmp	r3, #0
 810255c:	d010      	beq.n	8102580 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810255e:	4ba2      	ldr	r3, [pc, #648]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8102560:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8102564:	4aa0      	ldr	r2, [pc, #640]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8102566:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810256a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 810256e:	4b9e      	ldr	r3, [pc, #632]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8102570:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8102574:	687b      	ldr	r3, [r7, #4]
 8102576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102578:	499b      	ldr	r1, [pc, #620]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 810257a:	4313      	orrs	r3, r2
 810257c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8102580:	687b      	ldr	r3, [r7, #4]
 8102582:	681b      	ldr	r3, [r3, #0]
 8102584:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8102588:	2b00      	cmp	r3, #0
 810258a:	d00a      	beq.n	81025a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 810258c:	4b96      	ldr	r3, [pc, #600]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 810258e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8102592:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8102596:	687b      	ldr	r3, [r7, #4]
 8102598:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810259a:	4993      	ldr	r1, [pc, #588]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 810259c:	4313      	orrs	r3, r2
 810259e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 81025a2:	687b      	ldr	r3, [r7, #4]
 81025a4:	681b      	ldr	r3, [r3, #0]
 81025a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81025aa:	2b00      	cmp	r3, #0
 81025ac:	d00a      	beq.n	81025c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 81025ae:	4b8e      	ldr	r3, [pc, #568]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 81025b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81025b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 81025b8:	687b      	ldr	r3, [r7, #4]
 81025ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81025bc:	498a      	ldr	r1, [pc, #552]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 81025be:	4313      	orrs	r3, r2
 81025c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 81025c4:	687b      	ldr	r3, [r7, #4]
 81025c6:	681b      	ldr	r3, [r3, #0]
 81025c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81025cc:	2b00      	cmp	r3, #0
 81025ce:	d00a      	beq.n	81025e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 81025d0:	4b85      	ldr	r3, [pc, #532]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 81025d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81025d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 81025da:	687b      	ldr	r3, [r7, #4]
 81025dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81025de:	4982      	ldr	r1, [pc, #520]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 81025e0:	4313      	orrs	r3, r2
 81025e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81025e6:	687b      	ldr	r3, [r7, #4]
 81025e8:	681b      	ldr	r3, [r3, #0]
 81025ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81025ee:	2b00      	cmp	r3, #0
 81025f0:	d00a      	beq.n	8102608 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81025f2:	4b7d      	ldr	r3, [pc, #500]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 81025f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81025f8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 81025fc:	687b      	ldr	r3, [r7, #4]
 81025fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102600:	4979      	ldr	r1, [pc, #484]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8102602:	4313      	orrs	r3, r2
 8102604:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8102608:	687b      	ldr	r3, [r7, #4]
 810260a:	681b      	ldr	r3, [r3, #0]
 810260c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8102610:	2b00      	cmp	r3, #0
 8102612:	d00a      	beq.n	810262a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8102614:	4b74      	ldr	r3, [pc, #464]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8102616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810261a:	f023 0203 	bic.w	r2, r3, #3
 810261e:	687b      	ldr	r3, [r7, #4]
 8102620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8102622:	4971      	ldr	r1, [pc, #452]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8102624:	4313      	orrs	r3, r2
 8102626:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 810262a:	687b      	ldr	r3, [r7, #4]
 810262c:	681b      	ldr	r3, [r3, #0]
 810262e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8102632:	2b00      	cmp	r3, #0
 8102634:	d00a      	beq.n	810264c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8102636:	4b6c      	ldr	r3, [pc, #432]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8102638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810263c:	f023 020c 	bic.w	r2, r3, #12
 8102640:	687b      	ldr	r3, [r7, #4]
 8102642:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8102644:	4968      	ldr	r1, [pc, #416]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8102646:	4313      	orrs	r3, r2
 8102648:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 810264c:	687b      	ldr	r3, [r7, #4]
 810264e:	681b      	ldr	r3, [r3, #0]
 8102650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8102654:	2b00      	cmp	r3, #0
 8102656:	d00a      	beq.n	810266e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8102658:	4b63      	ldr	r3, [pc, #396]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 810265a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810265e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8102662:	687b      	ldr	r3, [r7, #4]
 8102664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102666:	4960      	ldr	r1, [pc, #384]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8102668:	4313      	orrs	r3, r2
 810266a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 810266e:	687b      	ldr	r3, [r7, #4]
 8102670:	681b      	ldr	r3, [r3, #0]
 8102672:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8102676:	2b00      	cmp	r3, #0
 8102678:	d00a      	beq.n	8102690 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 810267a:	4b5b      	ldr	r3, [pc, #364]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 810267c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8102680:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8102684:	687b      	ldr	r3, [r7, #4]
 8102686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102688:	4957      	ldr	r1, [pc, #348]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 810268a:	4313      	orrs	r3, r2
 810268c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8102690:	687b      	ldr	r3, [r7, #4]
 8102692:	681b      	ldr	r3, [r3, #0]
 8102694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8102698:	2b00      	cmp	r3, #0
 810269a:	d00a      	beq.n	81026b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 810269c:	4b52      	ldr	r3, [pc, #328]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 810269e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81026a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 81026a6:	687b      	ldr	r3, [r7, #4]
 81026a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81026aa:	494f      	ldr	r1, [pc, #316]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 81026ac:	4313      	orrs	r3, r2
 81026ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 81026b2:	687b      	ldr	r3, [r7, #4]
 81026b4:	681b      	ldr	r3, [r3, #0]
 81026b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 81026ba:	2b00      	cmp	r3, #0
 81026bc:	d00a      	beq.n	81026d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 81026be:	4b4a      	ldr	r3, [pc, #296]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 81026c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81026c4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 81026c8:	687b      	ldr	r3, [r7, #4]
 81026ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81026cc:	4946      	ldr	r1, [pc, #280]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 81026ce:	4313      	orrs	r3, r2
 81026d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 81026d4:	687b      	ldr	r3, [r7, #4]
 81026d6:	681b      	ldr	r3, [r3, #0]
 81026d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 81026dc:	2b00      	cmp	r3, #0
 81026de:	d00a      	beq.n	81026f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 81026e0:	4b41      	ldr	r3, [pc, #260]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 81026e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81026e6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 81026ea:	687b      	ldr	r3, [r7, #4]
 81026ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81026ee:	493e      	ldr	r1, [pc, #248]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 81026f0:	4313      	orrs	r3, r2
 81026f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 81026f6:	687b      	ldr	r3, [r7, #4]
 81026f8:	681b      	ldr	r3, [r3, #0]
 81026fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 81026fe:	2b00      	cmp	r3, #0
 8102700:	d00a      	beq.n	8102718 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8102702:	4b39      	ldr	r3, [pc, #228]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8102704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8102708:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 810270c:	687b      	ldr	r3, [r7, #4]
 810270e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102710:	4935      	ldr	r1, [pc, #212]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8102712:	4313      	orrs	r3, r2
 8102714:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8102718:	687b      	ldr	r3, [r7, #4]
 810271a:	681b      	ldr	r3, [r3, #0]
 810271c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8102720:	2b00      	cmp	r3, #0
 8102722:	d00a      	beq.n	810273a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8102724:	4b30      	ldr	r3, [pc, #192]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8102726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810272a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 810272e:	687b      	ldr	r3, [r7, #4]
 8102730:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8102732:	492d      	ldr	r1, [pc, #180]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8102734:	4313      	orrs	r3, r2
 8102736:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 810273a:	687b      	ldr	r3, [r7, #4]
 810273c:	681b      	ldr	r3, [r3, #0]
 810273e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8102742:	2b00      	cmp	r3, #0
 8102744:	d011      	beq.n	810276a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8102746:	4b28      	ldr	r3, [pc, #160]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8102748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810274c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8102750:	687b      	ldr	r3, [r7, #4]
 8102752:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8102754:	4924      	ldr	r1, [pc, #144]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8102756:	4313      	orrs	r3, r2
 8102758:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 810275c:	687b      	ldr	r3, [r7, #4]
 810275e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8102760:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8102764:	d101      	bne.n	810276a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8102766:	2301      	movs	r3, #1
 8102768:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810276a:	687b      	ldr	r3, [r7, #4]
 810276c:	681b      	ldr	r3, [r3, #0]
 810276e:	f003 0308 	and.w	r3, r3, #8
 8102772:	2b00      	cmp	r3, #0
 8102774:	d001      	beq.n	810277a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8102776:	2301      	movs	r3, #1
 8102778:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810277a:	687b      	ldr	r3, [r7, #4]
 810277c:	681b      	ldr	r3, [r3, #0]
 810277e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8102782:	2b00      	cmp	r3, #0
 8102784:	d00a      	beq.n	810279c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8102786:	4b18      	ldr	r3, [pc, #96]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8102788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810278c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8102790:	687b      	ldr	r3, [r7, #4]
 8102792:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8102794:	4914      	ldr	r1, [pc, #80]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8102796:	4313      	orrs	r3, r2
 8102798:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 810279c:	687b      	ldr	r3, [r7, #4]
 810279e:	681b      	ldr	r3, [r3, #0]
 81027a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 81027a4:	2b00      	cmp	r3, #0
 81027a6:	d00b      	beq.n	81027c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 81027a8:	4b0f      	ldr	r3, [pc, #60]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 81027aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81027ae:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 81027b2:	687b      	ldr	r3, [r7, #4]
 81027b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81027b8:	490b      	ldr	r1, [pc, #44]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 81027ba:	4313      	orrs	r3, r2
 81027bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 81027c0:	687b      	ldr	r3, [r7, #4]
 81027c2:	681b      	ldr	r3, [r3, #0]
 81027c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 81027c8:	2b00      	cmp	r3, #0
 81027ca:	d00f      	beq.n	81027ec <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 81027cc:	4b06      	ldr	r3, [pc, #24]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 81027ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81027d2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 81027d6:	687b      	ldr	r3, [r7, #4]
 81027d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81027dc:	4902      	ldr	r1, [pc, #8]	@ (81027e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 81027de:	4313      	orrs	r3, r2
 81027e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 81027e4:	e002      	b.n	81027ec <HAL_RCCEx_PeriphCLKConfig+0x494>
 81027e6:	bf00      	nop
 81027e8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81027ec:	687b      	ldr	r3, [r7, #4]
 81027ee:	681b      	ldr	r3, [r3, #0]
 81027f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81027f4:	2b00      	cmp	r3, #0
 81027f6:	d00b      	beq.n	8102810 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81027f8:	4b8a      	ldr	r3, [pc, #552]	@ (8102a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 81027fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81027fe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8102802:	687b      	ldr	r3, [r7, #4]
 8102804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102808:	4986      	ldr	r1, [pc, #536]	@ (8102a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 810280a:	4313      	orrs	r3, r2
 810280c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8102810:	687b      	ldr	r3, [r7, #4]
 8102812:	681b      	ldr	r3, [r3, #0]
 8102814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8102818:	2b00      	cmp	r3, #0
 810281a:	d00b      	beq.n	8102834 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 810281c:	4b81      	ldr	r3, [pc, #516]	@ (8102a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 810281e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8102822:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8102826:	687b      	ldr	r3, [r7, #4]
 8102828:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810282c:	497d      	ldr	r1, [pc, #500]	@ (8102a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 810282e:	4313      	orrs	r3, r2
 8102830:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8102834:	69fb      	ldr	r3, [r7, #28]
 8102836:	2b01      	cmp	r3, #1
 8102838:	d006      	beq.n	8102848 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 810283a:	687b      	ldr	r3, [r7, #4]
 810283c:	681b      	ldr	r3, [r3, #0]
 810283e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8102842:	2b00      	cmp	r3, #0
 8102844:	f000 80d6 	beq.w	81029f4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8102848:	4b76      	ldr	r3, [pc, #472]	@ (8102a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 810284a:	681b      	ldr	r3, [r3, #0]
 810284c:	4a75      	ldr	r2, [pc, #468]	@ (8102a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 810284e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8102852:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102854:	f7fe faba 	bl	8100dcc <HAL_GetTick>
 8102858:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 810285a:	e008      	b.n	810286e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 810285c:	f7fe fab6 	bl	8100dcc <HAL_GetTick>
 8102860:	4602      	mov	r2, r0
 8102862:	697b      	ldr	r3, [r7, #20]
 8102864:	1ad3      	subs	r3, r2, r3
 8102866:	2b64      	cmp	r3, #100	@ 0x64
 8102868:	d901      	bls.n	810286e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 810286a:	2303      	movs	r3, #3
 810286c:	e195      	b.n	8102b9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 810286e:	4b6d      	ldr	r3, [pc, #436]	@ (8102a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8102870:	681b      	ldr	r3, [r3, #0]
 8102872:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8102876:	2b00      	cmp	r3, #0
 8102878:	d1f0      	bne.n	810285c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 810287a:	687b      	ldr	r3, [r7, #4]
 810287c:	681b      	ldr	r3, [r3, #0]
 810287e:	f003 0301 	and.w	r3, r3, #1
 8102882:	2b00      	cmp	r3, #0
 8102884:	d021      	beq.n	81028ca <HAL_RCCEx_PeriphCLKConfig+0x572>
 8102886:	687b      	ldr	r3, [r7, #4]
 8102888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810288a:	2b00      	cmp	r3, #0
 810288c:	d11d      	bne.n	81028ca <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 810288e:	4b65      	ldr	r3, [pc, #404]	@ (8102a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8102890:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102894:	0c1b      	lsrs	r3, r3, #16
 8102896:	f003 0303 	and.w	r3, r3, #3
 810289a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 810289c:	4b61      	ldr	r3, [pc, #388]	@ (8102a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 810289e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81028a2:	0e1b      	lsrs	r3, r3, #24
 81028a4:	f003 030f 	and.w	r3, r3, #15
 81028a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 81028aa:	687b      	ldr	r3, [r7, #4]
 81028ac:	685b      	ldr	r3, [r3, #4]
 81028ae:	019a      	lsls	r2, r3, #6
 81028b0:	693b      	ldr	r3, [r7, #16]
 81028b2:	041b      	lsls	r3, r3, #16
 81028b4:	431a      	orrs	r2, r3
 81028b6:	68fb      	ldr	r3, [r7, #12]
 81028b8:	061b      	lsls	r3, r3, #24
 81028ba:	431a      	orrs	r2, r3
 81028bc:	687b      	ldr	r3, [r7, #4]
 81028be:	689b      	ldr	r3, [r3, #8]
 81028c0:	071b      	lsls	r3, r3, #28
 81028c2:	4958      	ldr	r1, [pc, #352]	@ (8102a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 81028c4:	4313      	orrs	r3, r2
 81028c6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 81028ca:	687b      	ldr	r3, [r7, #4]
 81028cc:	681b      	ldr	r3, [r3, #0]
 81028ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 81028d2:	2b00      	cmp	r3, #0
 81028d4:	d004      	beq.n	81028e0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 81028d6:	687b      	ldr	r3, [r7, #4]
 81028d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81028da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81028de:	d00a      	beq.n	81028f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 81028e0:	687b      	ldr	r3, [r7, #4]
 81028e2:	681b      	ldr	r3, [r3, #0]
 81028e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 81028e8:	2b00      	cmp	r3, #0
 81028ea:	d02e      	beq.n	810294a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 81028ec:	687b      	ldr	r3, [r7, #4]
 81028ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81028f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81028f4:	d129      	bne.n	810294a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 81028f6:	4b4b      	ldr	r3, [pc, #300]	@ (8102a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 81028f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81028fc:	0c1b      	lsrs	r3, r3, #16
 81028fe:	f003 0303 	and.w	r3, r3, #3
 8102902:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8102904:	4b47      	ldr	r3, [pc, #284]	@ (8102a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8102906:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810290a:	0f1b      	lsrs	r3, r3, #28
 810290c:	f003 0307 	and.w	r3, r3, #7
 8102910:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8102912:	687b      	ldr	r3, [r7, #4]
 8102914:	685b      	ldr	r3, [r3, #4]
 8102916:	019a      	lsls	r2, r3, #6
 8102918:	693b      	ldr	r3, [r7, #16]
 810291a:	041b      	lsls	r3, r3, #16
 810291c:	431a      	orrs	r2, r3
 810291e:	687b      	ldr	r3, [r7, #4]
 8102920:	68db      	ldr	r3, [r3, #12]
 8102922:	061b      	lsls	r3, r3, #24
 8102924:	431a      	orrs	r2, r3
 8102926:	68fb      	ldr	r3, [r7, #12]
 8102928:	071b      	lsls	r3, r3, #28
 810292a:	493e      	ldr	r1, [pc, #248]	@ (8102a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 810292c:	4313      	orrs	r3, r2
 810292e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8102932:	4b3c      	ldr	r3, [pc, #240]	@ (8102a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8102934:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8102938:	f023 021f 	bic.w	r2, r3, #31
 810293c:	687b      	ldr	r3, [r7, #4]
 810293e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102940:	3b01      	subs	r3, #1
 8102942:	4938      	ldr	r1, [pc, #224]	@ (8102a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8102944:	4313      	orrs	r3, r2
 8102946:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 810294a:	687b      	ldr	r3, [r7, #4]
 810294c:	681b      	ldr	r3, [r3, #0]
 810294e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8102952:	2b00      	cmp	r3, #0
 8102954:	d01d      	beq.n	8102992 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8102956:	4b33      	ldr	r3, [pc, #204]	@ (8102a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8102958:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810295c:	0e1b      	lsrs	r3, r3, #24
 810295e:	f003 030f 	and.w	r3, r3, #15
 8102962:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8102964:	4b2f      	ldr	r3, [pc, #188]	@ (8102a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8102966:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810296a:	0f1b      	lsrs	r3, r3, #28
 810296c:	f003 0307 	and.w	r3, r3, #7
 8102970:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8102972:	687b      	ldr	r3, [r7, #4]
 8102974:	685b      	ldr	r3, [r3, #4]
 8102976:	019a      	lsls	r2, r3, #6
 8102978:	687b      	ldr	r3, [r7, #4]
 810297a:	691b      	ldr	r3, [r3, #16]
 810297c:	041b      	lsls	r3, r3, #16
 810297e:	431a      	orrs	r2, r3
 8102980:	693b      	ldr	r3, [r7, #16]
 8102982:	061b      	lsls	r3, r3, #24
 8102984:	431a      	orrs	r2, r3
 8102986:	68fb      	ldr	r3, [r7, #12]
 8102988:	071b      	lsls	r3, r3, #28
 810298a:	4926      	ldr	r1, [pc, #152]	@ (8102a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 810298c:	4313      	orrs	r3, r2
 810298e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8102992:	687b      	ldr	r3, [r7, #4]
 8102994:	681b      	ldr	r3, [r3, #0]
 8102996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810299a:	2b00      	cmp	r3, #0
 810299c:	d011      	beq.n	81029c2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 810299e:	687b      	ldr	r3, [r7, #4]
 81029a0:	685b      	ldr	r3, [r3, #4]
 81029a2:	019a      	lsls	r2, r3, #6
 81029a4:	687b      	ldr	r3, [r7, #4]
 81029a6:	691b      	ldr	r3, [r3, #16]
 81029a8:	041b      	lsls	r3, r3, #16
 81029aa:	431a      	orrs	r2, r3
 81029ac:	687b      	ldr	r3, [r7, #4]
 81029ae:	68db      	ldr	r3, [r3, #12]
 81029b0:	061b      	lsls	r3, r3, #24
 81029b2:	431a      	orrs	r2, r3
 81029b4:	687b      	ldr	r3, [r7, #4]
 81029b6:	689b      	ldr	r3, [r3, #8]
 81029b8:	071b      	lsls	r3, r3, #28
 81029ba:	491a      	ldr	r1, [pc, #104]	@ (8102a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 81029bc:	4313      	orrs	r3, r2
 81029be:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 81029c2:	4b18      	ldr	r3, [pc, #96]	@ (8102a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 81029c4:	681b      	ldr	r3, [r3, #0]
 81029c6:	4a17      	ldr	r2, [pc, #92]	@ (8102a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 81029c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 81029cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81029ce:	f7fe f9fd 	bl	8100dcc <HAL_GetTick>
 81029d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 81029d4:	e008      	b.n	81029e8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 81029d6:	f7fe f9f9 	bl	8100dcc <HAL_GetTick>
 81029da:	4602      	mov	r2, r0
 81029dc:	697b      	ldr	r3, [r7, #20]
 81029de:	1ad3      	subs	r3, r2, r3
 81029e0:	2b64      	cmp	r3, #100	@ 0x64
 81029e2:	d901      	bls.n	81029e8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 81029e4:	2303      	movs	r3, #3
 81029e6:	e0d8      	b.n	8102b9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 81029e8:	4b0e      	ldr	r3, [pc, #56]	@ (8102a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 81029ea:	681b      	ldr	r3, [r3, #0]
 81029ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81029f0:	2b00      	cmp	r3, #0
 81029f2:	d0f0      	beq.n	81029d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 81029f4:	69bb      	ldr	r3, [r7, #24]
 81029f6:	2b01      	cmp	r3, #1
 81029f8:	f040 80ce 	bne.w	8102b98 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 81029fc:	4b09      	ldr	r3, [pc, #36]	@ (8102a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 81029fe:	681b      	ldr	r3, [r3, #0]
 8102a00:	4a08      	ldr	r2, [pc, #32]	@ (8102a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8102a02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8102a06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102a08:	f7fe f9e0 	bl	8100dcc <HAL_GetTick>
 8102a0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8102a0e:	e00b      	b.n	8102a28 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8102a10:	f7fe f9dc 	bl	8100dcc <HAL_GetTick>
 8102a14:	4602      	mov	r2, r0
 8102a16:	697b      	ldr	r3, [r7, #20]
 8102a18:	1ad3      	subs	r3, r2, r3
 8102a1a:	2b64      	cmp	r3, #100	@ 0x64
 8102a1c:	d904      	bls.n	8102a28 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8102a1e:	2303      	movs	r3, #3
 8102a20:	e0bb      	b.n	8102b9a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8102a22:	bf00      	nop
 8102a24:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8102a28:	4b5e      	ldr	r3, [pc, #376]	@ (8102ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8102a2a:	681b      	ldr	r3, [r3, #0]
 8102a2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8102a30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102a34:	d0ec      	beq.n	8102a10 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8102a36:	687b      	ldr	r3, [r7, #4]
 8102a38:	681b      	ldr	r3, [r3, #0]
 8102a3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8102a3e:	2b00      	cmp	r3, #0
 8102a40:	d003      	beq.n	8102a4a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8102a42:	687b      	ldr	r3, [r7, #4]
 8102a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102a46:	2b00      	cmp	r3, #0
 8102a48:	d009      	beq.n	8102a5e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8102a4a:	687b      	ldr	r3, [r7, #4]
 8102a4c:	681b      	ldr	r3, [r3, #0]
 8102a4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8102a52:	2b00      	cmp	r3, #0
 8102a54:	d02e      	beq.n	8102ab4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8102a56:	687b      	ldr	r3, [r7, #4]
 8102a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102a5a:	2b00      	cmp	r3, #0
 8102a5c:	d12a      	bne.n	8102ab4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8102a5e:	4b51      	ldr	r3, [pc, #324]	@ (8102ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8102a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102a64:	0c1b      	lsrs	r3, r3, #16
 8102a66:	f003 0303 	and.w	r3, r3, #3
 8102a6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8102a6c:	4b4d      	ldr	r3, [pc, #308]	@ (8102ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8102a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102a72:	0f1b      	lsrs	r3, r3, #28
 8102a74:	f003 0307 	and.w	r3, r3, #7
 8102a78:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8102a7a:	687b      	ldr	r3, [r7, #4]
 8102a7c:	695b      	ldr	r3, [r3, #20]
 8102a7e:	019a      	lsls	r2, r3, #6
 8102a80:	693b      	ldr	r3, [r7, #16]
 8102a82:	041b      	lsls	r3, r3, #16
 8102a84:	431a      	orrs	r2, r3
 8102a86:	687b      	ldr	r3, [r7, #4]
 8102a88:	699b      	ldr	r3, [r3, #24]
 8102a8a:	061b      	lsls	r3, r3, #24
 8102a8c:	431a      	orrs	r2, r3
 8102a8e:	68fb      	ldr	r3, [r7, #12]
 8102a90:	071b      	lsls	r3, r3, #28
 8102a92:	4944      	ldr	r1, [pc, #272]	@ (8102ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8102a94:	4313      	orrs	r3, r2
 8102a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8102a9a:	4b42      	ldr	r3, [pc, #264]	@ (8102ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8102a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8102aa0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8102aa4:	687b      	ldr	r3, [r7, #4]
 8102aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102aa8:	3b01      	subs	r3, #1
 8102aaa:	021b      	lsls	r3, r3, #8
 8102aac:	493d      	ldr	r1, [pc, #244]	@ (8102ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8102aae:	4313      	orrs	r3, r2
 8102ab0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8102ab4:	687b      	ldr	r3, [r7, #4]
 8102ab6:	681b      	ldr	r3, [r3, #0]
 8102ab8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8102abc:	2b00      	cmp	r3, #0
 8102abe:	d022      	beq.n	8102b06 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8102ac0:	687b      	ldr	r3, [r7, #4]
 8102ac2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8102ac4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8102ac8:	d11d      	bne.n	8102b06 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8102aca:	4b36      	ldr	r3, [pc, #216]	@ (8102ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8102acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102ad0:	0e1b      	lsrs	r3, r3, #24
 8102ad2:	f003 030f 	and.w	r3, r3, #15
 8102ad6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8102ad8:	4b32      	ldr	r3, [pc, #200]	@ (8102ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8102ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102ade:	0f1b      	lsrs	r3, r3, #28
 8102ae0:	f003 0307 	and.w	r3, r3, #7
 8102ae4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8102ae6:	687b      	ldr	r3, [r7, #4]
 8102ae8:	695b      	ldr	r3, [r3, #20]
 8102aea:	019a      	lsls	r2, r3, #6
 8102aec:	687b      	ldr	r3, [r7, #4]
 8102aee:	6a1b      	ldr	r3, [r3, #32]
 8102af0:	041b      	lsls	r3, r3, #16
 8102af2:	431a      	orrs	r2, r3
 8102af4:	693b      	ldr	r3, [r7, #16]
 8102af6:	061b      	lsls	r3, r3, #24
 8102af8:	431a      	orrs	r2, r3
 8102afa:	68fb      	ldr	r3, [r7, #12]
 8102afc:	071b      	lsls	r3, r3, #28
 8102afe:	4929      	ldr	r1, [pc, #164]	@ (8102ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8102b00:	4313      	orrs	r3, r2
 8102b02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8102b06:	687b      	ldr	r3, [r7, #4]
 8102b08:	681b      	ldr	r3, [r3, #0]
 8102b0a:	f003 0308 	and.w	r3, r3, #8
 8102b0e:	2b00      	cmp	r3, #0
 8102b10:	d028      	beq.n	8102b64 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8102b12:	4b24      	ldr	r3, [pc, #144]	@ (8102ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8102b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102b18:	0e1b      	lsrs	r3, r3, #24
 8102b1a:	f003 030f 	and.w	r3, r3, #15
 8102b1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8102b20:	4b20      	ldr	r3, [pc, #128]	@ (8102ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8102b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102b26:	0c1b      	lsrs	r3, r3, #16
 8102b28:	f003 0303 	and.w	r3, r3, #3
 8102b2c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8102b2e:	687b      	ldr	r3, [r7, #4]
 8102b30:	695b      	ldr	r3, [r3, #20]
 8102b32:	019a      	lsls	r2, r3, #6
 8102b34:	68fb      	ldr	r3, [r7, #12]
 8102b36:	041b      	lsls	r3, r3, #16
 8102b38:	431a      	orrs	r2, r3
 8102b3a:	693b      	ldr	r3, [r7, #16]
 8102b3c:	061b      	lsls	r3, r3, #24
 8102b3e:	431a      	orrs	r2, r3
 8102b40:	687b      	ldr	r3, [r7, #4]
 8102b42:	69db      	ldr	r3, [r3, #28]
 8102b44:	071b      	lsls	r3, r3, #28
 8102b46:	4917      	ldr	r1, [pc, #92]	@ (8102ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8102b48:	4313      	orrs	r3, r2
 8102b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8102b4e:	4b15      	ldr	r3, [pc, #84]	@ (8102ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8102b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8102b54:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8102b58:	687b      	ldr	r3, [r7, #4]
 8102b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102b5c:	4911      	ldr	r1, [pc, #68]	@ (8102ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8102b5e:	4313      	orrs	r3, r2
 8102b60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8102b64:	4b0f      	ldr	r3, [pc, #60]	@ (8102ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8102b66:	681b      	ldr	r3, [r3, #0]
 8102b68:	4a0e      	ldr	r2, [pc, #56]	@ (8102ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8102b6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8102b6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102b70:	f7fe f92c 	bl	8100dcc <HAL_GetTick>
 8102b74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8102b76:	e008      	b.n	8102b8a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8102b78:	f7fe f928 	bl	8100dcc <HAL_GetTick>
 8102b7c:	4602      	mov	r2, r0
 8102b7e:	697b      	ldr	r3, [r7, #20]
 8102b80:	1ad3      	subs	r3, r2, r3
 8102b82:	2b64      	cmp	r3, #100	@ 0x64
 8102b84:	d901      	bls.n	8102b8a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8102b86:	2303      	movs	r3, #3
 8102b88:	e007      	b.n	8102b9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8102b8a:	4b06      	ldr	r3, [pc, #24]	@ (8102ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8102b8c:	681b      	ldr	r3, [r3, #0]
 8102b8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8102b92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102b96:	d1ef      	bne.n	8102b78 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8102b98:	2300      	movs	r3, #0
}
 8102b9a:	4618      	mov	r0, r3
 8102b9c:	3720      	adds	r7, #32
 8102b9e:	46bd      	mov	sp, r7
 8102ba0:	bd80      	pop	{r7, pc}
 8102ba2:	bf00      	nop
 8102ba4:	40023800 	.word	0x40023800

08102ba8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8102ba8:	b580      	push	{r7, lr}
 8102baa:	b082      	sub	sp, #8
 8102bac:	af00      	add	r7, sp, #0
 8102bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8102bb0:	687b      	ldr	r3, [r7, #4]
 8102bb2:	2b00      	cmp	r3, #0
 8102bb4:	d101      	bne.n	8102bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8102bb6:	2301      	movs	r3, #1
 8102bb8:	e040      	b.n	8102c3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8102bba:	687b      	ldr	r3, [r7, #4]
 8102bbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8102bbe:	2b00      	cmp	r3, #0
 8102bc0:	d106      	bne.n	8102bd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8102bc2:	687b      	ldr	r3, [r7, #4]
 8102bc4:	2200      	movs	r2, #0
 8102bc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8102bca:	6878      	ldr	r0, [r7, #4]
 8102bcc:	f7fd ffe2 	bl	8100b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8102bd0:	687b      	ldr	r3, [r7, #4]
 8102bd2:	2224      	movs	r2, #36	@ 0x24
 8102bd4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8102bd6:	687b      	ldr	r3, [r7, #4]
 8102bd8:	681b      	ldr	r3, [r3, #0]
 8102bda:	681a      	ldr	r2, [r3, #0]
 8102bdc:	687b      	ldr	r3, [r7, #4]
 8102bde:	681b      	ldr	r3, [r3, #0]
 8102be0:	f022 0201 	bic.w	r2, r2, #1
 8102be4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8102be6:	687b      	ldr	r3, [r7, #4]
 8102be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102bea:	2b00      	cmp	r3, #0
 8102bec:	d002      	beq.n	8102bf4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8102bee:	6878      	ldr	r0, [r7, #4]
 8102bf0:	f000 fb16 	bl	8103220 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8102bf4:	6878      	ldr	r0, [r7, #4]
 8102bf6:	f000 f8af 	bl	8102d58 <UART_SetConfig>
 8102bfa:	4603      	mov	r3, r0
 8102bfc:	2b01      	cmp	r3, #1
 8102bfe:	d101      	bne.n	8102c04 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8102c00:	2301      	movs	r3, #1
 8102c02:	e01b      	b.n	8102c3c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8102c04:	687b      	ldr	r3, [r7, #4]
 8102c06:	681b      	ldr	r3, [r3, #0]
 8102c08:	685a      	ldr	r2, [r3, #4]
 8102c0a:	687b      	ldr	r3, [r7, #4]
 8102c0c:	681b      	ldr	r3, [r3, #0]
 8102c0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8102c12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8102c14:	687b      	ldr	r3, [r7, #4]
 8102c16:	681b      	ldr	r3, [r3, #0]
 8102c18:	689a      	ldr	r2, [r3, #8]
 8102c1a:	687b      	ldr	r3, [r7, #4]
 8102c1c:	681b      	ldr	r3, [r3, #0]
 8102c1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8102c22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8102c24:	687b      	ldr	r3, [r7, #4]
 8102c26:	681b      	ldr	r3, [r3, #0]
 8102c28:	681a      	ldr	r2, [r3, #0]
 8102c2a:	687b      	ldr	r3, [r7, #4]
 8102c2c:	681b      	ldr	r3, [r3, #0]
 8102c2e:	f042 0201 	orr.w	r2, r2, #1
 8102c32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8102c34:	6878      	ldr	r0, [r7, #4]
 8102c36:	f000 fb95 	bl	8103364 <UART_CheckIdleState>
 8102c3a:	4603      	mov	r3, r0
}
 8102c3c:	4618      	mov	r0, r3
 8102c3e:	3708      	adds	r7, #8
 8102c40:	46bd      	mov	sp, r7
 8102c42:	bd80      	pop	{r7, pc}

08102c44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8102c44:	b580      	push	{r7, lr}
 8102c46:	b08a      	sub	sp, #40	@ 0x28
 8102c48:	af02      	add	r7, sp, #8
 8102c4a:	60f8      	str	r0, [r7, #12]
 8102c4c:	60b9      	str	r1, [r7, #8]
 8102c4e:	603b      	str	r3, [r7, #0]
 8102c50:	4613      	mov	r3, r2
 8102c52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8102c54:	68fb      	ldr	r3, [r7, #12]
 8102c56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8102c58:	2b20      	cmp	r3, #32
 8102c5a:	d177      	bne.n	8102d4c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8102c5c:	68bb      	ldr	r3, [r7, #8]
 8102c5e:	2b00      	cmp	r3, #0
 8102c60:	d002      	beq.n	8102c68 <HAL_UART_Transmit+0x24>
 8102c62:	88fb      	ldrh	r3, [r7, #6]
 8102c64:	2b00      	cmp	r3, #0
 8102c66:	d101      	bne.n	8102c6c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8102c68:	2301      	movs	r3, #1
 8102c6a:	e070      	b.n	8102d4e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8102c6c:	68fb      	ldr	r3, [r7, #12]
 8102c6e:	2200      	movs	r2, #0
 8102c70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8102c74:	68fb      	ldr	r3, [r7, #12]
 8102c76:	2221      	movs	r2, #33	@ 0x21
 8102c78:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8102c7a:	f7fe f8a7 	bl	8100dcc <HAL_GetTick>
 8102c7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8102c80:	68fb      	ldr	r3, [r7, #12]
 8102c82:	88fa      	ldrh	r2, [r7, #6]
 8102c84:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8102c88:	68fb      	ldr	r3, [r7, #12]
 8102c8a:	88fa      	ldrh	r2, [r7, #6]
 8102c8c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8102c90:	68fb      	ldr	r3, [r7, #12]
 8102c92:	689b      	ldr	r3, [r3, #8]
 8102c94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102c98:	d108      	bne.n	8102cac <HAL_UART_Transmit+0x68>
 8102c9a:	68fb      	ldr	r3, [r7, #12]
 8102c9c:	691b      	ldr	r3, [r3, #16]
 8102c9e:	2b00      	cmp	r3, #0
 8102ca0:	d104      	bne.n	8102cac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8102ca2:	2300      	movs	r3, #0
 8102ca4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8102ca6:	68bb      	ldr	r3, [r7, #8]
 8102ca8:	61bb      	str	r3, [r7, #24]
 8102caa:	e003      	b.n	8102cb4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8102cac:	68bb      	ldr	r3, [r7, #8]
 8102cae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8102cb0:	2300      	movs	r3, #0
 8102cb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8102cb4:	e02f      	b.n	8102d16 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8102cb6:	683b      	ldr	r3, [r7, #0]
 8102cb8:	9300      	str	r3, [sp, #0]
 8102cba:	697b      	ldr	r3, [r7, #20]
 8102cbc:	2200      	movs	r2, #0
 8102cbe:	2180      	movs	r1, #128	@ 0x80
 8102cc0:	68f8      	ldr	r0, [r7, #12]
 8102cc2:	f000 fbf7 	bl	81034b4 <UART_WaitOnFlagUntilTimeout>
 8102cc6:	4603      	mov	r3, r0
 8102cc8:	2b00      	cmp	r3, #0
 8102cca:	d004      	beq.n	8102cd6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8102ccc:	68fb      	ldr	r3, [r7, #12]
 8102cce:	2220      	movs	r2, #32
 8102cd0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8102cd2:	2303      	movs	r3, #3
 8102cd4:	e03b      	b.n	8102d4e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8102cd6:	69fb      	ldr	r3, [r7, #28]
 8102cd8:	2b00      	cmp	r3, #0
 8102cda:	d10b      	bne.n	8102cf4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8102cdc:	69bb      	ldr	r3, [r7, #24]
 8102cde:	881b      	ldrh	r3, [r3, #0]
 8102ce0:	461a      	mov	r2, r3
 8102ce2:	68fb      	ldr	r3, [r7, #12]
 8102ce4:	681b      	ldr	r3, [r3, #0]
 8102ce6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8102cea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8102cec:	69bb      	ldr	r3, [r7, #24]
 8102cee:	3302      	adds	r3, #2
 8102cf0:	61bb      	str	r3, [r7, #24]
 8102cf2:	e007      	b.n	8102d04 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8102cf4:	69fb      	ldr	r3, [r7, #28]
 8102cf6:	781a      	ldrb	r2, [r3, #0]
 8102cf8:	68fb      	ldr	r3, [r7, #12]
 8102cfa:	681b      	ldr	r3, [r3, #0]
 8102cfc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8102cfe:	69fb      	ldr	r3, [r7, #28]
 8102d00:	3301      	adds	r3, #1
 8102d02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8102d04:	68fb      	ldr	r3, [r7, #12]
 8102d06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8102d0a:	b29b      	uxth	r3, r3
 8102d0c:	3b01      	subs	r3, #1
 8102d0e:	b29a      	uxth	r2, r3
 8102d10:	68fb      	ldr	r3, [r7, #12]
 8102d12:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8102d16:	68fb      	ldr	r3, [r7, #12]
 8102d18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8102d1c:	b29b      	uxth	r3, r3
 8102d1e:	2b00      	cmp	r3, #0
 8102d20:	d1c9      	bne.n	8102cb6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8102d22:	683b      	ldr	r3, [r7, #0]
 8102d24:	9300      	str	r3, [sp, #0]
 8102d26:	697b      	ldr	r3, [r7, #20]
 8102d28:	2200      	movs	r2, #0
 8102d2a:	2140      	movs	r1, #64	@ 0x40
 8102d2c:	68f8      	ldr	r0, [r7, #12]
 8102d2e:	f000 fbc1 	bl	81034b4 <UART_WaitOnFlagUntilTimeout>
 8102d32:	4603      	mov	r3, r0
 8102d34:	2b00      	cmp	r3, #0
 8102d36:	d004      	beq.n	8102d42 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8102d38:	68fb      	ldr	r3, [r7, #12]
 8102d3a:	2220      	movs	r2, #32
 8102d3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8102d3e:	2303      	movs	r3, #3
 8102d40:	e005      	b.n	8102d4e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8102d42:	68fb      	ldr	r3, [r7, #12]
 8102d44:	2220      	movs	r2, #32
 8102d46:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8102d48:	2300      	movs	r3, #0
 8102d4a:	e000      	b.n	8102d4e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8102d4c:	2302      	movs	r3, #2
  }
}
 8102d4e:	4618      	mov	r0, r3
 8102d50:	3720      	adds	r7, #32
 8102d52:	46bd      	mov	sp, r7
 8102d54:	bd80      	pop	{r7, pc}
	...

08102d58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8102d58:	b580      	push	{r7, lr}
 8102d5a:	b088      	sub	sp, #32
 8102d5c:	af00      	add	r7, sp, #0
 8102d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8102d60:	2300      	movs	r3, #0
 8102d62:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8102d64:	687b      	ldr	r3, [r7, #4]
 8102d66:	689a      	ldr	r2, [r3, #8]
 8102d68:	687b      	ldr	r3, [r7, #4]
 8102d6a:	691b      	ldr	r3, [r3, #16]
 8102d6c:	431a      	orrs	r2, r3
 8102d6e:	687b      	ldr	r3, [r7, #4]
 8102d70:	695b      	ldr	r3, [r3, #20]
 8102d72:	431a      	orrs	r2, r3
 8102d74:	687b      	ldr	r3, [r7, #4]
 8102d76:	69db      	ldr	r3, [r3, #28]
 8102d78:	4313      	orrs	r3, r2
 8102d7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8102d7c:	687b      	ldr	r3, [r7, #4]
 8102d7e:	681b      	ldr	r3, [r3, #0]
 8102d80:	681a      	ldr	r2, [r3, #0]
 8102d82:	4ba6      	ldr	r3, [pc, #664]	@ (810301c <UART_SetConfig+0x2c4>)
 8102d84:	4013      	ands	r3, r2
 8102d86:	687a      	ldr	r2, [r7, #4]
 8102d88:	6812      	ldr	r2, [r2, #0]
 8102d8a:	6979      	ldr	r1, [r7, #20]
 8102d8c:	430b      	orrs	r3, r1
 8102d8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8102d90:	687b      	ldr	r3, [r7, #4]
 8102d92:	681b      	ldr	r3, [r3, #0]
 8102d94:	685b      	ldr	r3, [r3, #4]
 8102d96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8102d9a:	687b      	ldr	r3, [r7, #4]
 8102d9c:	68da      	ldr	r2, [r3, #12]
 8102d9e:	687b      	ldr	r3, [r7, #4]
 8102da0:	681b      	ldr	r3, [r3, #0]
 8102da2:	430a      	orrs	r2, r1
 8102da4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8102da6:	687b      	ldr	r3, [r7, #4]
 8102da8:	699b      	ldr	r3, [r3, #24]
 8102daa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8102dac:	687b      	ldr	r3, [r7, #4]
 8102dae:	6a1b      	ldr	r3, [r3, #32]
 8102db0:	697a      	ldr	r2, [r7, #20]
 8102db2:	4313      	orrs	r3, r2
 8102db4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8102db6:	687b      	ldr	r3, [r7, #4]
 8102db8:	681b      	ldr	r3, [r3, #0]
 8102dba:	689b      	ldr	r3, [r3, #8]
 8102dbc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8102dc0:	687b      	ldr	r3, [r7, #4]
 8102dc2:	681b      	ldr	r3, [r3, #0]
 8102dc4:	697a      	ldr	r2, [r7, #20]
 8102dc6:	430a      	orrs	r2, r1
 8102dc8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8102dca:	687b      	ldr	r3, [r7, #4]
 8102dcc:	681b      	ldr	r3, [r3, #0]
 8102dce:	4a94      	ldr	r2, [pc, #592]	@ (8103020 <UART_SetConfig+0x2c8>)
 8102dd0:	4293      	cmp	r3, r2
 8102dd2:	d120      	bne.n	8102e16 <UART_SetConfig+0xbe>
 8102dd4:	4b93      	ldr	r3, [pc, #588]	@ (8103024 <UART_SetConfig+0x2cc>)
 8102dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8102dda:	f003 0303 	and.w	r3, r3, #3
 8102dde:	2b03      	cmp	r3, #3
 8102de0:	d816      	bhi.n	8102e10 <UART_SetConfig+0xb8>
 8102de2:	a201      	add	r2, pc, #4	@ (adr r2, 8102de8 <UART_SetConfig+0x90>)
 8102de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102de8:	08102df9 	.word	0x08102df9
 8102dec:	08102e05 	.word	0x08102e05
 8102df0:	08102dff 	.word	0x08102dff
 8102df4:	08102e0b 	.word	0x08102e0b
 8102df8:	2301      	movs	r3, #1
 8102dfa:	77fb      	strb	r3, [r7, #31]
 8102dfc:	e150      	b.n	81030a0 <UART_SetConfig+0x348>
 8102dfe:	2302      	movs	r3, #2
 8102e00:	77fb      	strb	r3, [r7, #31]
 8102e02:	e14d      	b.n	81030a0 <UART_SetConfig+0x348>
 8102e04:	2304      	movs	r3, #4
 8102e06:	77fb      	strb	r3, [r7, #31]
 8102e08:	e14a      	b.n	81030a0 <UART_SetConfig+0x348>
 8102e0a:	2308      	movs	r3, #8
 8102e0c:	77fb      	strb	r3, [r7, #31]
 8102e0e:	e147      	b.n	81030a0 <UART_SetConfig+0x348>
 8102e10:	2310      	movs	r3, #16
 8102e12:	77fb      	strb	r3, [r7, #31]
 8102e14:	e144      	b.n	81030a0 <UART_SetConfig+0x348>
 8102e16:	687b      	ldr	r3, [r7, #4]
 8102e18:	681b      	ldr	r3, [r3, #0]
 8102e1a:	4a83      	ldr	r2, [pc, #524]	@ (8103028 <UART_SetConfig+0x2d0>)
 8102e1c:	4293      	cmp	r3, r2
 8102e1e:	d132      	bne.n	8102e86 <UART_SetConfig+0x12e>
 8102e20:	4b80      	ldr	r3, [pc, #512]	@ (8103024 <UART_SetConfig+0x2cc>)
 8102e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8102e26:	f003 030c 	and.w	r3, r3, #12
 8102e2a:	2b0c      	cmp	r3, #12
 8102e2c:	d828      	bhi.n	8102e80 <UART_SetConfig+0x128>
 8102e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8102e34 <UART_SetConfig+0xdc>)
 8102e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102e34:	08102e69 	.word	0x08102e69
 8102e38:	08102e81 	.word	0x08102e81
 8102e3c:	08102e81 	.word	0x08102e81
 8102e40:	08102e81 	.word	0x08102e81
 8102e44:	08102e75 	.word	0x08102e75
 8102e48:	08102e81 	.word	0x08102e81
 8102e4c:	08102e81 	.word	0x08102e81
 8102e50:	08102e81 	.word	0x08102e81
 8102e54:	08102e6f 	.word	0x08102e6f
 8102e58:	08102e81 	.word	0x08102e81
 8102e5c:	08102e81 	.word	0x08102e81
 8102e60:	08102e81 	.word	0x08102e81
 8102e64:	08102e7b 	.word	0x08102e7b
 8102e68:	2300      	movs	r3, #0
 8102e6a:	77fb      	strb	r3, [r7, #31]
 8102e6c:	e118      	b.n	81030a0 <UART_SetConfig+0x348>
 8102e6e:	2302      	movs	r3, #2
 8102e70:	77fb      	strb	r3, [r7, #31]
 8102e72:	e115      	b.n	81030a0 <UART_SetConfig+0x348>
 8102e74:	2304      	movs	r3, #4
 8102e76:	77fb      	strb	r3, [r7, #31]
 8102e78:	e112      	b.n	81030a0 <UART_SetConfig+0x348>
 8102e7a:	2308      	movs	r3, #8
 8102e7c:	77fb      	strb	r3, [r7, #31]
 8102e7e:	e10f      	b.n	81030a0 <UART_SetConfig+0x348>
 8102e80:	2310      	movs	r3, #16
 8102e82:	77fb      	strb	r3, [r7, #31]
 8102e84:	e10c      	b.n	81030a0 <UART_SetConfig+0x348>
 8102e86:	687b      	ldr	r3, [r7, #4]
 8102e88:	681b      	ldr	r3, [r3, #0]
 8102e8a:	4a68      	ldr	r2, [pc, #416]	@ (810302c <UART_SetConfig+0x2d4>)
 8102e8c:	4293      	cmp	r3, r2
 8102e8e:	d120      	bne.n	8102ed2 <UART_SetConfig+0x17a>
 8102e90:	4b64      	ldr	r3, [pc, #400]	@ (8103024 <UART_SetConfig+0x2cc>)
 8102e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8102e96:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8102e9a:	2b30      	cmp	r3, #48	@ 0x30
 8102e9c:	d013      	beq.n	8102ec6 <UART_SetConfig+0x16e>
 8102e9e:	2b30      	cmp	r3, #48	@ 0x30
 8102ea0:	d814      	bhi.n	8102ecc <UART_SetConfig+0x174>
 8102ea2:	2b20      	cmp	r3, #32
 8102ea4:	d009      	beq.n	8102eba <UART_SetConfig+0x162>
 8102ea6:	2b20      	cmp	r3, #32
 8102ea8:	d810      	bhi.n	8102ecc <UART_SetConfig+0x174>
 8102eaa:	2b00      	cmp	r3, #0
 8102eac:	d002      	beq.n	8102eb4 <UART_SetConfig+0x15c>
 8102eae:	2b10      	cmp	r3, #16
 8102eb0:	d006      	beq.n	8102ec0 <UART_SetConfig+0x168>
 8102eb2:	e00b      	b.n	8102ecc <UART_SetConfig+0x174>
 8102eb4:	2300      	movs	r3, #0
 8102eb6:	77fb      	strb	r3, [r7, #31]
 8102eb8:	e0f2      	b.n	81030a0 <UART_SetConfig+0x348>
 8102eba:	2302      	movs	r3, #2
 8102ebc:	77fb      	strb	r3, [r7, #31]
 8102ebe:	e0ef      	b.n	81030a0 <UART_SetConfig+0x348>
 8102ec0:	2304      	movs	r3, #4
 8102ec2:	77fb      	strb	r3, [r7, #31]
 8102ec4:	e0ec      	b.n	81030a0 <UART_SetConfig+0x348>
 8102ec6:	2308      	movs	r3, #8
 8102ec8:	77fb      	strb	r3, [r7, #31]
 8102eca:	e0e9      	b.n	81030a0 <UART_SetConfig+0x348>
 8102ecc:	2310      	movs	r3, #16
 8102ece:	77fb      	strb	r3, [r7, #31]
 8102ed0:	e0e6      	b.n	81030a0 <UART_SetConfig+0x348>
 8102ed2:	687b      	ldr	r3, [r7, #4]
 8102ed4:	681b      	ldr	r3, [r3, #0]
 8102ed6:	4a56      	ldr	r2, [pc, #344]	@ (8103030 <UART_SetConfig+0x2d8>)
 8102ed8:	4293      	cmp	r3, r2
 8102eda:	d120      	bne.n	8102f1e <UART_SetConfig+0x1c6>
 8102edc:	4b51      	ldr	r3, [pc, #324]	@ (8103024 <UART_SetConfig+0x2cc>)
 8102ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8102ee2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8102ee6:	2bc0      	cmp	r3, #192	@ 0xc0
 8102ee8:	d013      	beq.n	8102f12 <UART_SetConfig+0x1ba>
 8102eea:	2bc0      	cmp	r3, #192	@ 0xc0
 8102eec:	d814      	bhi.n	8102f18 <UART_SetConfig+0x1c0>
 8102eee:	2b80      	cmp	r3, #128	@ 0x80
 8102ef0:	d009      	beq.n	8102f06 <UART_SetConfig+0x1ae>
 8102ef2:	2b80      	cmp	r3, #128	@ 0x80
 8102ef4:	d810      	bhi.n	8102f18 <UART_SetConfig+0x1c0>
 8102ef6:	2b00      	cmp	r3, #0
 8102ef8:	d002      	beq.n	8102f00 <UART_SetConfig+0x1a8>
 8102efa:	2b40      	cmp	r3, #64	@ 0x40
 8102efc:	d006      	beq.n	8102f0c <UART_SetConfig+0x1b4>
 8102efe:	e00b      	b.n	8102f18 <UART_SetConfig+0x1c0>
 8102f00:	2300      	movs	r3, #0
 8102f02:	77fb      	strb	r3, [r7, #31]
 8102f04:	e0cc      	b.n	81030a0 <UART_SetConfig+0x348>
 8102f06:	2302      	movs	r3, #2
 8102f08:	77fb      	strb	r3, [r7, #31]
 8102f0a:	e0c9      	b.n	81030a0 <UART_SetConfig+0x348>
 8102f0c:	2304      	movs	r3, #4
 8102f0e:	77fb      	strb	r3, [r7, #31]
 8102f10:	e0c6      	b.n	81030a0 <UART_SetConfig+0x348>
 8102f12:	2308      	movs	r3, #8
 8102f14:	77fb      	strb	r3, [r7, #31]
 8102f16:	e0c3      	b.n	81030a0 <UART_SetConfig+0x348>
 8102f18:	2310      	movs	r3, #16
 8102f1a:	77fb      	strb	r3, [r7, #31]
 8102f1c:	e0c0      	b.n	81030a0 <UART_SetConfig+0x348>
 8102f1e:	687b      	ldr	r3, [r7, #4]
 8102f20:	681b      	ldr	r3, [r3, #0]
 8102f22:	4a44      	ldr	r2, [pc, #272]	@ (8103034 <UART_SetConfig+0x2dc>)
 8102f24:	4293      	cmp	r3, r2
 8102f26:	d125      	bne.n	8102f74 <UART_SetConfig+0x21c>
 8102f28:	4b3e      	ldr	r3, [pc, #248]	@ (8103024 <UART_SetConfig+0x2cc>)
 8102f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8102f2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8102f32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8102f36:	d017      	beq.n	8102f68 <UART_SetConfig+0x210>
 8102f38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8102f3c:	d817      	bhi.n	8102f6e <UART_SetConfig+0x216>
 8102f3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8102f42:	d00b      	beq.n	8102f5c <UART_SetConfig+0x204>
 8102f44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8102f48:	d811      	bhi.n	8102f6e <UART_SetConfig+0x216>
 8102f4a:	2b00      	cmp	r3, #0
 8102f4c:	d003      	beq.n	8102f56 <UART_SetConfig+0x1fe>
 8102f4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102f52:	d006      	beq.n	8102f62 <UART_SetConfig+0x20a>
 8102f54:	e00b      	b.n	8102f6e <UART_SetConfig+0x216>
 8102f56:	2300      	movs	r3, #0
 8102f58:	77fb      	strb	r3, [r7, #31]
 8102f5a:	e0a1      	b.n	81030a0 <UART_SetConfig+0x348>
 8102f5c:	2302      	movs	r3, #2
 8102f5e:	77fb      	strb	r3, [r7, #31]
 8102f60:	e09e      	b.n	81030a0 <UART_SetConfig+0x348>
 8102f62:	2304      	movs	r3, #4
 8102f64:	77fb      	strb	r3, [r7, #31]
 8102f66:	e09b      	b.n	81030a0 <UART_SetConfig+0x348>
 8102f68:	2308      	movs	r3, #8
 8102f6a:	77fb      	strb	r3, [r7, #31]
 8102f6c:	e098      	b.n	81030a0 <UART_SetConfig+0x348>
 8102f6e:	2310      	movs	r3, #16
 8102f70:	77fb      	strb	r3, [r7, #31]
 8102f72:	e095      	b.n	81030a0 <UART_SetConfig+0x348>
 8102f74:	687b      	ldr	r3, [r7, #4]
 8102f76:	681b      	ldr	r3, [r3, #0]
 8102f78:	4a2f      	ldr	r2, [pc, #188]	@ (8103038 <UART_SetConfig+0x2e0>)
 8102f7a:	4293      	cmp	r3, r2
 8102f7c:	d125      	bne.n	8102fca <UART_SetConfig+0x272>
 8102f7e:	4b29      	ldr	r3, [pc, #164]	@ (8103024 <UART_SetConfig+0x2cc>)
 8102f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8102f84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8102f88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8102f8c:	d017      	beq.n	8102fbe <UART_SetConfig+0x266>
 8102f8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8102f92:	d817      	bhi.n	8102fc4 <UART_SetConfig+0x26c>
 8102f94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8102f98:	d00b      	beq.n	8102fb2 <UART_SetConfig+0x25a>
 8102f9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8102f9e:	d811      	bhi.n	8102fc4 <UART_SetConfig+0x26c>
 8102fa0:	2b00      	cmp	r3, #0
 8102fa2:	d003      	beq.n	8102fac <UART_SetConfig+0x254>
 8102fa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8102fa8:	d006      	beq.n	8102fb8 <UART_SetConfig+0x260>
 8102faa:	e00b      	b.n	8102fc4 <UART_SetConfig+0x26c>
 8102fac:	2301      	movs	r3, #1
 8102fae:	77fb      	strb	r3, [r7, #31]
 8102fb0:	e076      	b.n	81030a0 <UART_SetConfig+0x348>
 8102fb2:	2302      	movs	r3, #2
 8102fb4:	77fb      	strb	r3, [r7, #31]
 8102fb6:	e073      	b.n	81030a0 <UART_SetConfig+0x348>
 8102fb8:	2304      	movs	r3, #4
 8102fba:	77fb      	strb	r3, [r7, #31]
 8102fbc:	e070      	b.n	81030a0 <UART_SetConfig+0x348>
 8102fbe:	2308      	movs	r3, #8
 8102fc0:	77fb      	strb	r3, [r7, #31]
 8102fc2:	e06d      	b.n	81030a0 <UART_SetConfig+0x348>
 8102fc4:	2310      	movs	r3, #16
 8102fc6:	77fb      	strb	r3, [r7, #31]
 8102fc8:	e06a      	b.n	81030a0 <UART_SetConfig+0x348>
 8102fca:	687b      	ldr	r3, [r7, #4]
 8102fcc:	681b      	ldr	r3, [r3, #0]
 8102fce:	4a1b      	ldr	r2, [pc, #108]	@ (810303c <UART_SetConfig+0x2e4>)
 8102fd0:	4293      	cmp	r3, r2
 8102fd2:	d138      	bne.n	8103046 <UART_SetConfig+0x2ee>
 8102fd4:	4b13      	ldr	r3, [pc, #76]	@ (8103024 <UART_SetConfig+0x2cc>)
 8102fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8102fda:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8102fde:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8102fe2:	d017      	beq.n	8103014 <UART_SetConfig+0x2bc>
 8102fe4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8102fe8:	d82a      	bhi.n	8103040 <UART_SetConfig+0x2e8>
 8102fea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8102fee:	d00b      	beq.n	8103008 <UART_SetConfig+0x2b0>
 8102ff0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8102ff4:	d824      	bhi.n	8103040 <UART_SetConfig+0x2e8>
 8102ff6:	2b00      	cmp	r3, #0
 8102ff8:	d003      	beq.n	8103002 <UART_SetConfig+0x2aa>
 8102ffa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102ffe:	d006      	beq.n	810300e <UART_SetConfig+0x2b6>
 8103000:	e01e      	b.n	8103040 <UART_SetConfig+0x2e8>
 8103002:	2300      	movs	r3, #0
 8103004:	77fb      	strb	r3, [r7, #31]
 8103006:	e04b      	b.n	81030a0 <UART_SetConfig+0x348>
 8103008:	2302      	movs	r3, #2
 810300a:	77fb      	strb	r3, [r7, #31]
 810300c:	e048      	b.n	81030a0 <UART_SetConfig+0x348>
 810300e:	2304      	movs	r3, #4
 8103010:	77fb      	strb	r3, [r7, #31]
 8103012:	e045      	b.n	81030a0 <UART_SetConfig+0x348>
 8103014:	2308      	movs	r3, #8
 8103016:	77fb      	strb	r3, [r7, #31]
 8103018:	e042      	b.n	81030a0 <UART_SetConfig+0x348>
 810301a:	bf00      	nop
 810301c:	efff69f3 	.word	0xefff69f3
 8103020:	40011000 	.word	0x40011000
 8103024:	40023800 	.word	0x40023800
 8103028:	40004400 	.word	0x40004400
 810302c:	40004800 	.word	0x40004800
 8103030:	40004c00 	.word	0x40004c00
 8103034:	40005000 	.word	0x40005000
 8103038:	40011400 	.word	0x40011400
 810303c:	40007800 	.word	0x40007800
 8103040:	2310      	movs	r3, #16
 8103042:	77fb      	strb	r3, [r7, #31]
 8103044:	e02c      	b.n	81030a0 <UART_SetConfig+0x348>
 8103046:	687b      	ldr	r3, [r7, #4]
 8103048:	681b      	ldr	r3, [r3, #0]
 810304a:	4a72      	ldr	r2, [pc, #456]	@ (8103214 <UART_SetConfig+0x4bc>)
 810304c:	4293      	cmp	r3, r2
 810304e:	d125      	bne.n	810309c <UART_SetConfig+0x344>
 8103050:	4b71      	ldr	r3, [pc, #452]	@ (8103218 <UART_SetConfig+0x4c0>)
 8103052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8103056:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 810305a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 810305e:	d017      	beq.n	8103090 <UART_SetConfig+0x338>
 8103060:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8103064:	d817      	bhi.n	8103096 <UART_SetConfig+0x33e>
 8103066:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810306a:	d00b      	beq.n	8103084 <UART_SetConfig+0x32c>
 810306c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8103070:	d811      	bhi.n	8103096 <UART_SetConfig+0x33e>
 8103072:	2b00      	cmp	r3, #0
 8103074:	d003      	beq.n	810307e <UART_SetConfig+0x326>
 8103076:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810307a:	d006      	beq.n	810308a <UART_SetConfig+0x332>
 810307c:	e00b      	b.n	8103096 <UART_SetConfig+0x33e>
 810307e:	2300      	movs	r3, #0
 8103080:	77fb      	strb	r3, [r7, #31]
 8103082:	e00d      	b.n	81030a0 <UART_SetConfig+0x348>
 8103084:	2302      	movs	r3, #2
 8103086:	77fb      	strb	r3, [r7, #31]
 8103088:	e00a      	b.n	81030a0 <UART_SetConfig+0x348>
 810308a:	2304      	movs	r3, #4
 810308c:	77fb      	strb	r3, [r7, #31]
 810308e:	e007      	b.n	81030a0 <UART_SetConfig+0x348>
 8103090:	2308      	movs	r3, #8
 8103092:	77fb      	strb	r3, [r7, #31]
 8103094:	e004      	b.n	81030a0 <UART_SetConfig+0x348>
 8103096:	2310      	movs	r3, #16
 8103098:	77fb      	strb	r3, [r7, #31]
 810309a:	e001      	b.n	81030a0 <UART_SetConfig+0x348>
 810309c:	2310      	movs	r3, #16
 810309e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 81030a0:	687b      	ldr	r3, [r7, #4]
 81030a2:	69db      	ldr	r3, [r3, #28]
 81030a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81030a8:	d15b      	bne.n	8103162 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 81030aa:	7ffb      	ldrb	r3, [r7, #31]
 81030ac:	2b08      	cmp	r3, #8
 81030ae:	d828      	bhi.n	8103102 <UART_SetConfig+0x3aa>
 81030b0:	a201      	add	r2, pc, #4	@ (adr r2, 81030b8 <UART_SetConfig+0x360>)
 81030b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81030b6:	bf00      	nop
 81030b8:	081030dd 	.word	0x081030dd
 81030bc:	081030e5 	.word	0x081030e5
 81030c0:	081030ed 	.word	0x081030ed
 81030c4:	08103103 	.word	0x08103103
 81030c8:	081030f3 	.word	0x081030f3
 81030cc:	08103103 	.word	0x08103103
 81030d0:	08103103 	.word	0x08103103
 81030d4:	08103103 	.word	0x08103103
 81030d8:	081030fb 	.word	0x081030fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81030dc:	f7ff f914 	bl	8102308 <HAL_RCC_GetPCLK1Freq>
 81030e0:	61b8      	str	r0, [r7, #24]
        break;
 81030e2:	e013      	b.n	810310c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81030e4:	f7ff f924 	bl	8102330 <HAL_RCC_GetPCLK2Freq>
 81030e8:	61b8      	str	r0, [r7, #24]
        break;
 81030ea:	e00f      	b.n	810310c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 81030ec:	4b4b      	ldr	r3, [pc, #300]	@ (810321c <UART_SetConfig+0x4c4>)
 81030ee:	61bb      	str	r3, [r7, #24]
        break;
 81030f0:	e00c      	b.n	810310c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 81030f2:	f7fe fff7 	bl	81020e4 <HAL_RCC_GetSysClockFreq>
 81030f6:	61b8      	str	r0, [r7, #24]
        break;
 81030f8:	e008      	b.n	810310c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81030fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81030fe:	61bb      	str	r3, [r7, #24]
        break;
 8103100:	e004      	b.n	810310c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8103102:	2300      	movs	r3, #0
 8103104:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8103106:	2301      	movs	r3, #1
 8103108:	77bb      	strb	r3, [r7, #30]
        break;
 810310a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810310c:	69bb      	ldr	r3, [r7, #24]
 810310e:	2b00      	cmp	r3, #0
 8103110:	d074      	beq.n	81031fc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8103112:	69bb      	ldr	r3, [r7, #24]
 8103114:	005a      	lsls	r2, r3, #1
 8103116:	687b      	ldr	r3, [r7, #4]
 8103118:	685b      	ldr	r3, [r3, #4]
 810311a:	085b      	lsrs	r3, r3, #1
 810311c:	441a      	add	r2, r3
 810311e:	687b      	ldr	r3, [r7, #4]
 8103120:	685b      	ldr	r3, [r3, #4]
 8103122:	fbb2 f3f3 	udiv	r3, r2, r3
 8103126:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8103128:	693b      	ldr	r3, [r7, #16]
 810312a:	2b0f      	cmp	r3, #15
 810312c:	d916      	bls.n	810315c <UART_SetConfig+0x404>
 810312e:	693b      	ldr	r3, [r7, #16]
 8103130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103134:	d212      	bcs.n	810315c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8103136:	693b      	ldr	r3, [r7, #16]
 8103138:	b29b      	uxth	r3, r3
 810313a:	f023 030f 	bic.w	r3, r3, #15
 810313e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8103140:	693b      	ldr	r3, [r7, #16]
 8103142:	085b      	lsrs	r3, r3, #1
 8103144:	b29b      	uxth	r3, r3
 8103146:	f003 0307 	and.w	r3, r3, #7
 810314a:	b29a      	uxth	r2, r3
 810314c:	89fb      	ldrh	r3, [r7, #14]
 810314e:	4313      	orrs	r3, r2
 8103150:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8103152:	687b      	ldr	r3, [r7, #4]
 8103154:	681b      	ldr	r3, [r3, #0]
 8103156:	89fa      	ldrh	r2, [r7, #14]
 8103158:	60da      	str	r2, [r3, #12]
 810315a:	e04f      	b.n	81031fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 810315c:	2301      	movs	r3, #1
 810315e:	77bb      	strb	r3, [r7, #30]
 8103160:	e04c      	b.n	81031fc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8103162:	7ffb      	ldrb	r3, [r7, #31]
 8103164:	2b08      	cmp	r3, #8
 8103166:	d828      	bhi.n	81031ba <UART_SetConfig+0x462>
 8103168:	a201      	add	r2, pc, #4	@ (adr r2, 8103170 <UART_SetConfig+0x418>)
 810316a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810316e:	bf00      	nop
 8103170:	08103195 	.word	0x08103195
 8103174:	0810319d 	.word	0x0810319d
 8103178:	081031a5 	.word	0x081031a5
 810317c:	081031bb 	.word	0x081031bb
 8103180:	081031ab 	.word	0x081031ab
 8103184:	081031bb 	.word	0x081031bb
 8103188:	081031bb 	.word	0x081031bb
 810318c:	081031bb 	.word	0x081031bb
 8103190:	081031b3 	.word	0x081031b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8103194:	f7ff f8b8 	bl	8102308 <HAL_RCC_GetPCLK1Freq>
 8103198:	61b8      	str	r0, [r7, #24]
        break;
 810319a:	e013      	b.n	81031c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810319c:	f7ff f8c8 	bl	8102330 <HAL_RCC_GetPCLK2Freq>
 81031a0:	61b8      	str	r0, [r7, #24]
        break;
 81031a2:	e00f      	b.n	81031c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 81031a4:	4b1d      	ldr	r3, [pc, #116]	@ (810321c <UART_SetConfig+0x4c4>)
 81031a6:	61bb      	str	r3, [r7, #24]
        break;
 81031a8:	e00c      	b.n	81031c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 81031aa:	f7fe ff9b 	bl	81020e4 <HAL_RCC_GetSysClockFreq>
 81031ae:	61b8      	str	r0, [r7, #24]
        break;
 81031b0:	e008      	b.n	81031c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81031b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81031b6:	61bb      	str	r3, [r7, #24]
        break;
 81031b8:	e004      	b.n	81031c4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 81031ba:	2300      	movs	r3, #0
 81031bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 81031be:	2301      	movs	r3, #1
 81031c0:	77bb      	strb	r3, [r7, #30]
        break;
 81031c2:	bf00      	nop
    }

    if (pclk != 0U)
 81031c4:	69bb      	ldr	r3, [r7, #24]
 81031c6:	2b00      	cmp	r3, #0
 81031c8:	d018      	beq.n	81031fc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 81031ca:	687b      	ldr	r3, [r7, #4]
 81031cc:	685b      	ldr	r3, [r3, #4]
 81031ce:	085a      	lsrs	r2, r3, #1
 81031d0:	69bb      	ldr	r3, [r7, #24]
 81031d2:	441a      	add	r2, r3
 81031d4:	687b      	ldr	r3, [r7, #4]
 81031d6:	685b      	ldr	r3, [r3, #4]
 81031d8:	fbb2 f3f3 	udiv	r3, r2, r3
 81031dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81031de:	693b      	ldr	r3, [r7, #16]
 81031e0:	2b0f      	cmp	r3, #15
 81031e2:	d909      	bls.n	81031f8 <UART_SetConfig+0x4a0>
 81031e4:	693b      	ldr	r3, [r7, #16]
 81031e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81031ea:	d205      	bcs.n	81031f8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 81031ec:	693b      	ldr	r3, [r7, #16]
 81031ee:	b29a      	uxth	r2, r3
 81031f0:	687b      	ldr	r3, [r7, #4]
 81031f2:	681b      	ldr	r3, [r3, #0]
 81031f4:	60da      	str	r2, [r3, #12]
 81031f6:	e001      	b.n	81031fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 81031f8:	2301      	movs	r3, #1
 81031fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 81031fc:	687b      	ldr	r3, [r7, #4]
 81031fe:	2200      	movs	r2, #0
 8103200:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8103202:	687b      	ldr	r3, [r7, #4]
 8103204:	2200      	movs	r2, #0
 8103206:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8103208:	7fbb      	ldrb	r3, [r7, #30]
}
 810320a:	4618      	mov	r0, r3
 810320c:	3720      	adds	r7, #32
 810320e:	46bd      	mov	sp, r7
 8103210:	bd80      	pop	{r7, pc}
 8103212:	bf00      	nop
 8103214:	40007c00 	.word	0x40007c00
 8103218:	40023800 	.word	0x40023800
 810321c:	00f42400 	.word	0x00f42400

08103220 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8103220:	b480      	push	{r7}
 8103222:	b083      	sub	sp, #12
 8103224:	af00      	add	r7, sp, #0
 8103226:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8103228:	687b      	ldr	r3, [r7, #4]
 810322a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810322c:	f003 0308 	and.w	r3, r3, #8
 8103230:	2b00      	cmp	r3, #0
 8103232:	d00a      	beq.n	810324a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8103234:	687b      	ldr	r3, [r7, #4]
 8103236:	681b      	ldr	r3, [r3, #0]
 8103238:	685b      	ldr	r3, [r3, #4]
 810323a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 810323e:	687b      	ldr	r3, [r7, #4]
 8103240:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103242:	687b      	ldr	r3, [r7, #4]
 8103244:	681b      	ldr	r3, [r3, #0]
 8103246:	430a      	orrs	r2, r1
 8103248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810324a:	687b      	ldr	r3, [r7, #4]
 810324c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810324e:	f003 0301 	and.w	r3, r3, #1
 8103252:	2b00      	cmp	r3, #0
 8103254:	d00a      	beq.n	810326c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8103256:	687b      	ldr	r3, [r7, #4]
 8103258:	681b      	ldr	r3, [r3, #0]
 810325a:	685b      	ldr	r3, [r3, #4]
 810325c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8103260:	687b      	ldr	r3, [r7, #4]
 8103262:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8103264:	687b      	ldr	r3, [r7, #4]
 8103266:	681b      	ldr	r3, [r3, #0]
 8103268:	430a      	orrs	r2, r1
 810326a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810326c:	687b      	ldr	r3, [r7, #4]
 810326e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103270:	f003 0302 	and.w	r3, r3, #2
 8103274:	2b00      	cmp	r3, #0
 8103276:	d00a      	beq.n	810328e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8103278:	687b      	ldr	r3, [r7, #4]
 810327a:	681b      	ldr	r3, [r3, #0]
 810327c:	685b      	ldr	r3, [r3, #4]
 810327e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8103282:	687b      	ldr	r3, [r7, #4]
 8103284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8103286:	687b      	ldr	r3, [r7, #4]
 8103288:	681b      	ldr	r3, [r3, #0]
 810328a:	430a      	orrs	r2, r1
 810328c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810328e:	687b      	ldr	r3, [r7, #4]
 8103290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103292:	f003 0304 	and.w	r3, r3, #4
 8103296:	2b00      	cmp	r3, #0
 8103298:	d00a      	beq.n	81032b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810329a:	687b      	ldr	r3, [r7, #4]
 810329c:	681b      	ldr	r3, [r3, #0]
 810329e:	685b      	ldr	r3, [r3, #4]
 81032a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 81032a4:	687b      	ldr	r3, [r7, #4]
 81032a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 81032a8:	687b      	ldr	r3, [r7, #4]
 81032aa:	681b      	ldr	r3, [r3, #0]
 81032ac:	430a      	orrs	r2, r1
 81032ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 81032b0:	687b      	ldr	r3, [r7, #4]
 81032b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81032b4:	f003 0310 	and.w	r3, r3, #16
 81032b8:	2b00      	cmp	r3, #0
 81032ba:	d00a      	beq.n	81032d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 81032bc:	687b      	ldr	r3, [r7, #4]
 81032be:	681b      	ldr	r3, [r3, #0]
 81032c0:	689b      	ldr	r3, [r3, #8]
 81032c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 81032c6:	687b      	ldr	r3, [r7, #4]
 81032c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 81032ca:	687b      	ldr	r3, [r7, #4]
 81032cc:	681b      	ldr	r3, [r3, #0]
 81032ce:	430a      	orrs	r2, r1
 81032d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 81032d2:	687b      	ldr	r3, [r7, #4]
 81032d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81032d6:	f003 0320 	and.w	r3, r3, #32
 81032da:	2b00      	cmp	r3, #0
 81032dc:	d00a      	beq.n	81032f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 81032de:	687b      	ldr	r3, [r7, #4]
 81032e0:	681b      	ldr	r3, [r3, #0]
 81032e2:	689b      	ldr	r3, [r3, #8]
 81032e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 81032e8:	687b      	ldr	r3, [r7, #4]
 81032ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 81032ec:	687b      	ldr	r3, [r7, #4]
 81032ee:	681b      	ldr	r3, [r3, #0]
 81032f0:	430a      	orrs	r2, r1
 81032f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 81032f4:	687b      	ldr	r3, [r7, #4]
 81032f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81032f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81032fc:	2b00      	cmp	r3, #0
 81032fe:	d01a      	beq.n	8103336 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8103300:	687b      	ldr	r3, [r7, #4]
 8103302:	681b      	ldr	r3, [r3, #0]
 8103304:	685b      	ldr	r3, [r3, #4]
 8103306:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 810330a:	687b      	ldr	r3, [r7, #4]
 810330c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 810330e:	687b      	ldr	r3, [r7, #4]
 8103310:	681b      	ldr	r3, [r3, #0]
 8103312:	430a      	orrs	r2, r1
 8103314:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8103316:	687b      	ldr	r3, [r7, #4]
 8103318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810331a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810331e:	d10a      	bne.n	8103336 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8103320:	687b      	ldr	r3, [r7, #4]
 8103322:	681b      	ldr	r3, [r3, #0]
 8103324:	685b      	ldr	r3, [r3, #4]
 8103326:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 810332a:	687b      	ldr	r3, [r7, #4]
 810332c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810332e:	687b      	ldr	r3, [r7, #4]
 8103330:	681b      	ldr	r3, [r3, #0]
 8103332:	430a      	orrs	r2, r1
 8103334:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8103336:	687b      	ldr	r3, [r7, #4]
 8103338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810333a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810333e:	2b00      	cmp	r3, #0
 8103340:	d00a      	beq.n	8103358 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8103342:	687b      	ldr	r3, [r7, #4]
 8103344:	681b      	ldr	r3, [r3, #0]
 8103346:	685b      	ldr	r3, [r3, #4]
 8103348:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 810334c:	687b      	ldr	r3, [r7, #4]
 810334e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8103350:	687b      	ldr	r3, [r7, #4]
 8103352:	681b      	ldr	r3, [r3, #0]
 8103354:	430a      	orrs	r2, r1
 8103356:	605a      	str	r2, [r3, #4]
  }
}
 8103358:	bf00      	nop
 810335a:	370c      	adds	r7, #12
 810335c:	46bd      	mov	sp, r7
 810335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103362:	4770      	bx	lr

08103364 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8103364:	b580      	push	{r7, lr}
 8103366:	b098      	sub	sp, #96	@ 0x60
 8103368:	af02      	add	r7, sp, #8
 810336a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810336c:	687b      	ldr	r3, [r7, #4]
 810336e:	2200      	movs	r2, #0
 8103370:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8103374:	f7fd fd2a 	bl	8100dcc <HAL_GetTick>
 8103378:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810337a:	687b      	ldr	r3, [r7, #4]
 810337c:	681b      	ldr	r3, [r3, #0]
 810337e:	681b      	ldr	r3, [r3, #0]
 8103380:	f003 0308 	and.w	r3, r3, #8
 8103384:	2b08      	cmp	r3, #8
 8103386:	d12e      	bne.n	81033e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8103388:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810338c:	9300      	str	r3, [sp, #0]
 810338e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8103390:	2200      	movs	r2, #0
 8103392:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8103396:	6878      	ldr	r0, [r7, #4]
 8103398:	f000 f88c 	bl	81034b4 <UART_WaitOnFlagUntilTimeout>
 810339c:	4603      	mov	r3, r0
 810339e:	2b00      	cmp	r3, #0
 81033a0:	d021      	beq.n	81033e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 81033a2:	687b      	ldr	r3, [r7, #4]
 81033a4:	681b      	ldr	r3, [r3, #0]
 81033a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81033a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81033aa:	e853 3f00 	ldrex	r3, [r3]
 81033ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 81033b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81033b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 81033b6:	653b      	str	r3, [r7, #80]	@ 0x50
 81033b8:	687b      	ldr	r3, [r7, #4]
 81033ba:	681b      	ldr	r3, [r3, #0]
 81033bc:	461a      	mov	r2, r3
 81033be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81033c0:	647b      	str	r3, [r7, #68]	@ 0x44
 81033c2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81033c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 81033c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 81033c8:	e841 2300 	strex	r3, r2, [r1]
 81033cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 81033ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81033d0:	2b00      	cmp	r3, #0
 81033d2:	d1e6      	bne.n	81033a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 81033d4:	687b      	ldr	r3, [r7, #4]
 81033d6:	2220      	movs	r2, #32
 81033d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 81033da:	687b      	ldr	r3, [r7, #4]
 81033dc:	2200      	movs	r2, #0
 81033de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 81033e2:	2303      	movs	r3, #3
 81033e4:	e062      	b.n	81034ac <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 81033e6:	687b      	ldr	r3, [r7, #4]
 81033e8:	681b      	ldr	r3, [r3, #0]
 81033ea:	681b      	ldr	r3, [r3, #0]
 81033ec:	f003 0304 	and.w	r3, r3, #4
 81033f0:	2b04      	cmp	r3, #4
 81033f2:	d149      	bne.n	8103488 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81033f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 81033f8:	9300      	str	r3, [sp, #0]
 81033fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81033fc:	2200      	movs	r2, #0
 81033fe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8103402:	6878      	ldr	r0, [r7, #4]
 8103404:	f000 f856 	bl	81034b4 <UART_WaitOnFlagUntilTimeout>
 8103408:	4603      	mov	r3, r0
 810340a:	2b00      	cmp	r3, #0
 810340c:	d03c      	beq.n	8103488 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 810340e:	687b      	ldr	r3, [r7, #4]
 8103410:	681b      	ldr	r3, [r3, #0]
 8103412:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8103414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103416:	e853 3f00 	ldrex	r3, [r3]
 810341a:	623b      	str	r3, [r7, #32]
   return(result);
 810341c:	6a3b      	ldr	r3, [r7, #32]
 810341e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8103422:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8103424:	687b      	ldr	r3, [r7, #4]
 8103426:	681b      	ldr	r3, [r3, #0]
 8103428:	461a      	mov	r2, r3
 810342a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810342c:	633b      	str	r3, [r7, #48]	@ 0x30
 810342e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8103430:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8103432:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8103434:	e841 2300 	strex	r3, r2, [r1]
 8103438:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810343a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810343c:	2b00      	cmp	r3, #0
 810343e:	d1e6      	bne.n	810340e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8103440:	687b      	ldr	r3, [r7, #4]
 8103442:	681b      	ldr	r3, [r3, #0]
 8103444:	3308      	adds	r3, #8
 8103446:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8103448:	693b      	ldr	r3, [r7, #16]
 810344a:	e853 3f00 	ldrex	r3, [r3]
 810344e:	60fb      	str	r3, [r7, #12]
   return(result);
 8103450:	68fb      	ldr	r3, [r7, #12]
 8103452:	f023 0301 	bic.w	r3, r3, #1
 8103456:	64bb      	str	r3, [r7, #72]	@ 0x48
 8103458:	687b      	ldr	r3, [r7, #4]
 810345a:	681b      	ldr	r3, [r3, #0]
 810345c:	3308      	adds	r3, #8
 810345e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8103460:	61fa      	str	r2, [r7, #28]
 8103462:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8103464:	69b9      	ldr	r1, [r7, #24]
 8103466:	69fa      	ldr	r2, [r7, #28]
 8103468:	e841 2300 	strex	r3, r2, [r1]
 810346c:	617b      	str	r3, [r7, #20]
   return(result);
 810346e:	697b      	ldr	r3, [r7, #20]
 8103470:	2b00      	cmp	r3, #0
 8103472:	d1e5      	bne.n	8103440 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8103474:	687b      	ldr	r3, [r7, #4]
 8103476:	2220      	movs	r2, #32
 8103478:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 810347c:	687b      	ldr	r3, [r7, #4]
 810347e:	2200      	movs	r2, #0
 8103480:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8103484:	2303      	movs	r3, #3
 8103486:	e011      	b.n	81034ac <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8103488:	687b      	ldr	r3, [r7, #4]
 810348a:	2220      	movs	r2, #32
 810348c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 810348e:	687b      	ldr	r3, [r7, #4]
 8103490:	2220      	movs	r2, #32
 8103492:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8103496:	687b      	ldr	r3, [r7, #4]
 8103498:	2200      	movs	r2, #0
 810349a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 810349c:	687b      	ldr	r3, [r7, #4]
 810349e:	2200      	movs	r2, #0
 81034a0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 81034a2:	687b      	ldr	r3, [r7, #4]
 81034a4:	2200      	movs	r2, #0
 81034a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 81034aa:	2300      	movs	r3, #0
}
 81034ac:	4618      	mov	r0, r3
 81034ae:	3758      	adds	r7, #88	@ 0x58
 81034b0:	46bd      	mov	sp, r7
 81034b2:	bd80      	pop	{r7, pc}

081034b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 81034b4:	b580      	push	{r7, lr}
 81034b6:	b084      	sub	sp, #16
 81034b8:	af00      	add	r7, sp, #0
 81034ba:	60f8      	str	r0, [r7, #12]
 81034bc:	60b9      	str	r1, [r7, #8]
 81034be:	603b      	str	r3, [r7, #0]
 81034c0:	4613      	mov	r3, r2
 81034c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81034c4:	e04f      	b.n	8103566 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81034c6:	69bb      	ldr	r3, [r7, #24]
 81034c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81034cc:	d04b      	beq.n	8103566 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81034ce:	f7fd fc7d 	bl	8100dcc <HAL_GetTick>
 81034d2:	4602      	mov	r2, r0
 81034d4:	683b      	ldr	r3, [r7, #0]
 81034d6:	1ad3      	subs	r3, r2, r3
 81034d8:	69ba      	ldr	r2, [r7, #24]
 81034da:	429a      	cmp	r2, r3
 81034dc:	d302      	bcc.n	81034e4 <UART_WaitOnFlagUntilTimeout+0x30>
 81034de:	69bb      	ldr	r3, [r7, #24]
 81034e0:	2b00      	cmp	r3, #0
 81034e2:	d101      	bne.n	81034e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 81034e4:	2303      	movs	r3, #3
 81034e6:	e04e      	b.n	8103586 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 81034e8:	68fb      	ldr	r3, [r7, #12]
 81034ea:	681b      	ldr	r3, [r3, #0]
 81034ec:	681b      	ldr	r3, [r3, #0]
 81034ee:	f003 0304 	and.w	r3, r3, #4
 81034f2:	2b00      	cmp	r3, #0
 81034f4:	d037      	beq.n	8103566 <UART_WaitOnFlagUntilTimeout+0xb2>
 81034f6:	68bb      	ldr	r3, [r7, #8]
 81034f8:	2b80      	cmp	r3, #128	@ 0x80
 81034fa:	d034      	beq.n	8103566 <UART_WaitOnFlagUntilTimeout+0xb2>
 81034fc:	68bb      	ldr	r3, [r7, #8]
 81034fe:	2b40      	cmp	r3, #64	@ 0x40
 8103500:	d031      	beq.n	8103566 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8103502:	68fb      	ldr	r3, [r7, #12]
 8103504:	681b      	ldr	r3, [r3, #0]
 8103506:	69db      	ldr	r3, [r3, #28]
 8103508:	f003 0308 	and.w	r3, r3, #8
 810350c:	2b08      	cmp	r3, #8
 810350e:	d110      	bne.n	8103532 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8103510:	68fb      	ldr	r3, [r7, #12]
 8103512:	681b      	ldr	r3, [r3, #0]
 8103514:	2208      	movs	r2, #8
 8103516:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8103518:	68f8      	ldr	r0, [r7, #12]
 810351a:	f000 f838 	bl	810358e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 810351e:	68fb      	ldr	r3, [r7, #12]
 8103520:	2208      	movs	r2, #8
 8103522:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8103526:	68fb      	ldr	r3, [r7, #12]
 8103528:	2200      	movs	r2, #0
 810352a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 810352e:	2301      	movs	r3, #1
 8103530:	e029      	b.n	8103586 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8103532:	68fb      	ldr	r3, [r7, #12]
 8103534:	681b      	ldr	r3, [r3, #0]
 8103536:	69db      	ldr	r3, [r3, #28]
 8103538:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810353c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8103540:	d111      	bne.n	8103566 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8103542:	68fb      	ldr	r3, [r7, #12]
 8103544:	681b      	ldr	r3, [r3, #0]
 8103546:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810354a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810354c:	68f8      	ldr	r0, [r7, #12]
 810354e:	f000 f81e 	bl	810358e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8103552:	68fb      	ldr	r3, [r7, #12]
 8103554:	2220      	movs	r2, #32
 8103556:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810355a:	68fb      	ldr	r3, [r7, #12]
 810355c:	2200      	movs	r2, #0
 810355e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8103562:	2303      	movs	r3, #3
 8103564:	e00f      	b.n	8103586 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8103566:	68fb      	ldr	r3, [r7, #12]
 8103568:	681b      	ldr	r3, [r3, #0]
 810356a:	69da      	ldr	r2, [r3, #28]
 810356c:	68bb      	ldr	r3, [r7, #8]
 810356e:	4013      	ands	r3, r2
 8103570:	68ba      	ldr	r2, [r7, #8]
 8103572:	429a      	cmp	r2, r3
 8103574:	bf0c      	ite	eq
 8103576:	2301      	moveq	r3, #1
 8103578:	2300      	movne	r3, #0
 810357a:	b2db      	uxtb	r3, r3
 810357c:	461a      	mov	r2, r3
 810357e:	79fb      	ldrb	r3, [r7, #7]
 8103580:	429a      	cmp	r2, r3
 8103582:	d0a0      	beq.n	81034c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8103584:	2300      	movs	r3, #0
}
 8103586:	4618      	mov	r0, r3
 8103588:	3710      	adds	r7, #16
 810358a:	46bd      	mov	sp, r7
 810358c:	bd80      	pop	{r7, pc}

0810358e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810358e:	b480      	push	{r7}
 8103590:	b095      	sub	sp, #84	@ 0x54
 8103592:	af00      	add	r7, sp, #0
 8103594:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8103596:	687b      	ldr	r3, [r7, #4]
 8103598:	681b      	ldr	r3, [r3, #0]
 810359a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810359c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810359e:	e853 3f00 	ldrex	r3, [r3]
 81035a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 81035a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81035a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 81035aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81035ac:	687b      	ldr	r3, [r7, #4]
 81035ae:	681b      	ldr	r3, [r3, #0]
 81035b0:	461a      	mov	r2, r3
 81035b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81035b4:	643b      	str	r3, [r7, #64]	@ 0x40
 81035b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81035b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 81035ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 81035bc:	e841 2300 	strex	r3, r2, [r1]
 81035c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 81035c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81035c4:	2b00      	cmp	r3, #0
 81035c6:	d1e6      	bne.n	8103596 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81035c8:	687b      	ldr	r3, [r7, #4]
 81035ca:	681b      	ldr	r3, [r3, #0]
 81035cc:	3308      	adds	r3, #8
 81035ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81035d0:	6a3b      	ldr	r3, [r7, #32]
 81035d2:	e853 3f00 	ldrex	r3, [r3]
 81035d6:	61fb      	str	r3, [r7, #28]
   return(result);
 81035d8:	69fb      	ldr	r3, [r7, #28]
 81035da:	f023 0301 	bic.w	r3, r3, #1
 81035de:	64bb      	str	r3, [r7, #72]	@ 0x48
 81035e0:	687b      	ldr	r3, [r7, #4]
 81035e2:	681b      	ldr	r3, [r3, #0]
 81035e4:	3308      	adds	r3, #8
 81035e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 81035e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 81035ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81035ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 81035ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81035f0:	e841 2300 	strex	r3, r2, [r1]
 81035f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 81035f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81035f8:	2b00      	cmp	r3, #0
 81035fa:	d1e5      	bne.n	81035c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 81035fc:	687b      	ldr	r3, [r7, #4]
 81035fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103600:	2b01      	cmp	r3, #1
 8103602:	d118      	bne.n	8103636 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8103604:	687b      	ldr	r3, [r7, #4]
 8103606:	681b      	ldr	r3, [r3, #0]
 8103608:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810360a:	68fb      	ldr	r3, [r7, #12]
 810360c:	e853 3f00 	ldrex	r3, [r3]
 8103610:	60bb      	str	r3, [r7, #8]
   return(result);
 8103612:	68bb      	ldr	r3, [r7, #8]
 8103614:	f023 0310 	bic.w	r3, r3, #16
 8103618:	647b      	str	r3, [r7, #68]	@ 0x44
 810361a:	687b      	ldr	r3, [r7, #4]
 810361c:	681b      	ldr	r3, [r3, #0]
 810361e:	461a      	mov	r2, r3
 8103620:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8103622:	61bb      	str	r3, [r7, #24]
 8103624:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8103626:	6979      	ldr	r1, [r7, #20]
 8103628:	69ba      	ldr	r2, [r7, #24]
 810362a:	e841 2300 	strex	r3, r2, [r1]
 810362e:	613b      	str	r3, [r7, #16]
   return(result);
 8103630:	693b      	ldr	r3, [r7, #16]
 8103632:	2b00      	cmp	r3, #0
 8103634:	d1e6      	bne.n	8103604 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8103636:	687b      	ldr	r3, [r7, #4]
 8103638:	2220      	movs	r2, #32
 810363a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810363e:	687b      	ldr	r3, [r7, #4]
 8103640:	2200      	movs	r2, #0
 8103642:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8103644:	687b      	ldr	r3, [r7, #4]
 8103646:	2200      	movs	r2, #0
 8103648:	669a      	str	r2, [r3, #104]	@ 0x68
}
 810364a:	bf00      	nop
 810364c:	3754      	adds	r7, #84	@ 0x54
 810364e:	46bd      	mov	sp, r7
 8103650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103654:	4770      	bx	lr

08103656 <memset>:
 8103656:	4402      	add	r2, r0
 8103658:	4603      	mov	r3, r0
 810365a:	4293      	cmp	r3, r2
 810365c:	d100      	bne.n	8103660 <memset+0xa>
 810365e:	4770      	bx	lr
 8103660:	f803 1b01 	strb.w	r1, [r3], #1
 8103664:	e7f9      	b.n	810365a <memset+0x4>
	...

08103668 <__libc_init_array>:
 8103668:	b570      	push	{r4, r5, r6, lr}
 810366a:	4d0d      	ldr	r5, [pc, #52]	@ (81036a0 <__libc_init_array+0x38>)
 810366c:	4c0d      	ldr	r4, [pc, #52]	@ (81036a4 <__libc_init_array+0x3c>)
 810366e:	1b64      	subs	r4, r4, r5
 8103670:	10a4      	asrs	r4, r4, #2
 8103672:	2600      	movs	r6, #0
 8103674:	42a6      	cmp	r6, r4
 8103676:	d109      	bne.n	810368c <__libc_init_array+0x24>
 8103678:	4d0b      	ldr	r5, [pc, #44]	@ (81036a8 <__libc_init_array+0x40>)
 810367a:	4c0c      	ldr	r4, [pc, #48]	@ (81036ac <__libc_init_array+0x44>)
 810367c:	f000 f818 	bl	81036b0 <_init>
 8103680:	1b64      	subs	r4, r4, r5
 8103682:	10a4      	asrs	r4, r4, #2
 8103684:	2600      	movs	r6, #0
 8103686:	42a6      	cmp	r6, r4
 8103688:	d105      	bne.n	8103696 <__libc_init_array+0x2e>
 810368a:	bd70      	pop	{r4, r5, r6, pc}
 810368c:	f855 3b04 	ldr.w	r3, [r5], #4
 8103690:	4798      	blx	r3
 8103692:	3601      	adds	r6, #1
 8103694:	e7ee      	b.n	8103674 <__libc_init_array+0xc>
 8103696:	f855 3b04 	ldr.w	r3, [r5], #4
 810369a:	4798      	blx	r3
 810369c:	3601      	adds	r6, #1
 810369e:	e7f2      	b.n	8103686 <__libc_init_array+0x1e>
 81036a0:	08103760 	.word	0x08103760
 81036a4:	08103760 	.word	0x08103760
 81036a8:	08103760 	.word	0x08103760
 81036ac:	08103764 	.word	0x08103764

081036b0 <_init>:
 81036b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81036b2:	bf00      	nop
 81036b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81036b6:	bc08      	pop	{r3}
 81036b8:	469e      	mov	lr, r3
 81036ba:	4770      	bx	lr

081036bc <_fini>:
 81036bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81036be:	bf00      	nop
 81036c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81036c2:	bc08      	pop	{r3}
 81036c4:	469e      	mov	lr, r3
 81036c6:	4770      	bx	lr
