
BOOTLOADER_F767ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004304  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080044fc  080044fc  000054fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045cc  080045cc  00006014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080045cc  080045cc  000055cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045d4  080045d4  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045d4  080045d4  000055d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045d8  080045d8  000055d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080045dc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000014  080045f0  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  080045f0  000061e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd91  00000000  00000000  00006042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe3  00000000  00000000  00011dd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  00013db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000072d  00000000  00000000  00014720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026d37  00000000  00000000  00014e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c3f5  00000000  00000000  0003bb84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1033  00000000  00000000  00047f79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00138fac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000251c  00000000  00000000  00138ff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0013b50c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000014 	.word	0x20000014
 8000214:	00000000 	.word	0x00000000
 8000218:	080044e4 	.word	0x080044e4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000018 	.word	0x20000018
 8000234:	080044e4 	.word	0x080044e4

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b988 	b.w	8000570 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	468e      	mov	lr, r1
 8000280:	4604      	mov	r4, r0
 8000282:	4688      	mov	r8, r1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d14a      	bne.n	800031e <__udivmoddi4+0xa6>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d962      	bls.n	8000354 <__udivmoddi4+0xdc>
 800028e:	fab2 f682 	clz	r6, r2
 8000292:	b14e      	cbz	r6, 80002a8 <__udivmoddi4+0x30>
 8000294:	f1c6 0320 	rsb	r3, r6, #32
 8000298:	fa01 f806 	lsl.w	r8, r1, r6
 800029c:	fa20 f303 	lsr.w	r3, r0, r3
 80002a0:	40b7      	lsls	r7, r6
 80002a2:	ea43 0808 	orr.w	r8, r3, r8
 80002a6:	40b4      	lsls	r4, r6
 80002a8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ac:	fa1f fc87 	uxth.w	ip, r7
 80002b0:	fbb8 f1fe 	udiv	r1, r8, lr
 80002b4:	0c23      	lsrs	r3, r4, #16
 80002b6:	fb0e 8811 	mls	r8, lr, r1, r8
 80002ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002be:	fb01 f20c 	mul.w	r2, r1, ip
 80002c2:	429a      	cmp	r2, r3
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0x62>
 80002c6:	18fb      	adds	r3, r7, r3
 80002c8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002cc:	f080 80ea 	bcs.w	80004a4 <__udivmoddi4+0x22c>
 80002d0:	429a      	cmp	r2, r3
 80002d2:	f240 80e7 	bls.w	80004a4 <__udivmoddi4+0x22c>
 80002d6:	3902      	subs	r1, #2
 80002d8:	443b      	add	r3, r7
 80002da:	1a9a      	subs	r2, r3, r2
 80002dc:	b2a3      	uxth	r3, r4
 80002de:	fbb2 f0fe 	udiv	r0, r2, lr
 80002e2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ea:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ee:	459c      	cmp	ip, r3
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0x8e>
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f8:	f080 80d6 	bcs.w	80004a8 <__udivmoddi4+0x230>
 80002fc:	459c      	cmp	ip, r3
 80002fe:	f240 80d3 	bls.w	80004a8 <__udivmoddi4+0x230>
 8000302:	443b      	add	r3, r7
 8000304:	3802      	subs	r0, #2
 8000306:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800030a:	eba3 030c 	sub.w	r3, r3, ip
 800030e:	2100      	movs	r1, #0
 8000310:	b11d      	cbz	r5, 800031a <__udivmoddi4+0xa2>
 8000312:	40f3      	lsrs	r3, r6
 8000314:	2200      	movs	r2, #0
 8000316:	e9c5 3200 	strd	r3, r2, [r5]
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d905      	bls.n	800032e <__udivmoddi4+0xb6>
 8000322:	b10d      	cbz	r5, 8000328 <__udivmoddi4+0xb0>
 8000324:	e9c5 0100 	strd	r0, r1, [r5]
 8000328:	2100      	movs	r1, #0
 800032a:	4608      	mov	r0, r1
 800032c:	e7f5      	b.n	800031a <__udivmoddi4+0xa2>
 800032e:	fab3 f183 	clz	r1, r3
 8000332:	2900      	cmp	r1, #0
 8000334:	d146      	bne.n	80003c4 <__udivmoddi4+0x14c>
 8000336:	4573      	cmp	r3, lr
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xc8>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 8105 	bhi.w	800054a <__udivmoddi4+0x2d2>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb6e 0203 	sbc.w	r2, lr, r3
 8000346:	2001      	movs	r0, #1
 8000348:	4690      	mov	r8, r2
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0e5      	beq.n	800031a <__udivmoddi4+0xa2>
 800034e:	e9c5 4800 	strd	r4, r8, [r5]
 8000352:	e7e2      	b.n	800031a <__udivmoddi4+0xa2>
 8000354:	2a00      	cmp	r2, #0
 8000356:	f000 8090 	beq.w	800047a <__udivmoddi4+0x202>
 800035a:	fab2 f682 	clz	r6, r2
 800035e:	2e00      	cmp	r6, #0
 8000360:	f040 80a4 	bne.w	80004ac <__udivmoddi4+0x234>
 8000364:	1a8a      	subs	r2, r1, r2
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036c:	b280      	uxth	r0, r0
 800036e:	b2bc      	uxth	r4, r7
 8000370:	2101      	movs	r1, #1
 8000372:	fbb2 fcfe 	udiv	ip, r2, lr
 8000376:	fb0e 221c 	mls	r2, lr, ip, r2
 800037a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037e:	fb04 f20c 	mul.w	r2, r4, ip
 8000382:	429a      	cmp	r2, r3
 8000384:	d907      	bls.n	8000396 <__udivmoddi4+0x11e>
 8000386:	18fb      	adds	r3, r7, r3
 8000388:	f10c 38ff 	add.w	r8, ip, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x11c>
 800038e:	429a      	cmp	r2, r3
 8000390:	f200 80e0 	bhi.w	8000554 <__udivmoddi4+0x2dc>
 8000394:	46c4      	mov	ip, r8
 8000396:	1a9b      	subs	r3, r3, r2
 8000398:	fbb3 f2fe 	udiv	r2, r3, lr
 800039c:	fb0e 3312 	mls	r3, lr, r2, r3
 80003a0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003a4:	fb02 f404 	mul.w	r4, r2, r4
 80003a8:	429c      	cmp	r4, r3
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x144>
 80003ac:	18fb      	adds	r3, r7, r3
 80003ae:	f102 30ff 	add.w	r0, r2, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x142>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f200 80ca 	bhi.w	800054e <__udivmoddi4+0x2d6>
 80003ba:	4602      	mov	r2, r0
 80003bc:	1b1b      	subs	r3, r3, r4
 80003be:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003c2:	e7a5      	b.n	8000310 <__udivmoddi4+0x98>
 80003c4:	f1c1 0620 	rsb	r6, r1, #32
 80003c8:	408b      	lsls	r3, r1
 80003ca:	fa22 f706 	lsr.w	r7, r2, r6
 80003ce:	431f      	orrs	r7, r3
 80003d0:	fa0e f401 	lsl.w	r4, lr, r1
 80003d4:	fa20 f306 	lsr.w	r3, r0, r6
 80003d8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003dc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003e0:	4323      	orrs	r3, r4
 80003e2:	fa00 f801 	lsl.w	r8, r0, r1
 80003e6:	fa1f fc87 	uxth.w	ip, r7
 80003ea:	fbbe f0f9 	udiv	r0, lr, r9
 80003ee:	0c1c      	lsrs	r4, r3, #16
 80003f0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003f4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003f8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	d909      	bls.n	8000418 <__udivmoddi4+0x1a0>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 3aff 	add.w	sl, r0, #4294967295
 800040a:	f080 809c 	bcs.w	8000546 <__udivmoddi4+0x2ce>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f240 8099 	bls.w	8000546 <__udivmoddi4+0x2ce>
 8000414:	3802      	subs	r0, #2
 8000416:	443c      	add	r4, r7
 8000418:	eba4 040e 	sub.w	r4, r4, lr
 800041c:	fa1f fe83 	uxth.w	lr, r3
 8000420:	fbb4 f3f9 	udiv	r3, r4, r9
 8000424:	fb09 4413 	mls	r4, r9, r3, r4
 8000428:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800042c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000430:	45a4      	cmp	ip, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x1ce>
 8000434:	193c      	adds	r4, r7, r4
 8000436:	f103 3eff 	add.w	lr, r3, #4294967295
 800043a:	f080 8082 	bcs.w	8000542 <__udivmoddi4+0x2ca>
 800043e:	45a4      	cmp	ip, r4
 8000440:	d97f      	bls.n	8000542 <__udivmoddi4+0x2ca>
 8000442:	3b02      	subs	r3, #2
 8000444:	443c      	add	r4, r7
 8000446:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800044a:	eba4 040c 	sub.w	r4, r4, ip
 800044e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000452:	4564      	cmp	r4, ip
 8000454:	4673      	mov	r3, lr
 8000456:	46e1      	mov	r9, ip
 8000458:	d362      	bcc.n	8000520 <__udivmoddi4+0x2a8>
 800045a:	d05f      	beq.n	800051c <__udivmoddi4+0x2a4>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x1fe>
 800045e:	ebb8 0203 	subs.w	r2, r8, r3
 8000462:	eb64 0409 	sbc.w	r4, r4, r9
 8000466:	fa04 f606 	lsl.w	r6, r4, r6
 800046a:	fa22 f301 	lsr.w	r3, r2, r1
 800046e:	431e      	orrs	r6, r3
 8000470:	40cc      	lsrs	r4, r1
 8000472:	e9c5 6400 	strd	r6, r4, [r5]
 8000476:	2100      	movs	r1, #0
 8000478:	e74f      	b.n	800031a <__udivmoddi4+0xa2>
 800047a:	fbb1 fcf2 	udiv	ip, r1, r2
 800047e:	0c01      	lsrs	r1, r0, #16
 8000480:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000484:	b280      	uxth	r0, r0
 8000486:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800048a:	463b      	mov	r3, r7
 800048c:	4638      	mov	r0, r7
 800048e:	463c      	mov	r4, r7
 8000490:	46b8      	mov	r8, r7
 8000492:	46be      	mov	lr, r7
 8000494:	2620      	movs	r6, #32
 8000496:	fbb1 f1f7 	udiv	r1, r1, r7
 800049a:	eba2 0208 	sub.w	r2, r2, r8
 800049e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004a2:	e766      	b.n	8000372 <__udivmoddi4+0xfa>
 80004a4:	4601      	mov	r1, r0
 80004a6:	e718      	b.n	80002da <__udivmoddi4+0x62>
 80004a8:	4610      	mov	r0, r2
 80004aa:	e72c      	b.n	8000306 <__udivmoddi4+0x8e>
 80004ac:	f1c6 0220 	rsb	r2, r6, #32
 80004b0:	fa2e f302 	lsr.w	r3, lr, r2
 80004b4:	40b7      	lsls	r7, r6
 80004b6:	40b1      	lsls	r1, r6
 80004b8:	fa20 f202 	lsr.w	r2, r0, r2
 80004bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004c0:	430a      	orrs	r2, r1
 80004c2:	fbb3 f8fe 	udiv	r8, r3, lr
 80004c6:	b2bc      	uxth	r4, r7
 80004c8:	fb0e 3318 	mls	r3, lr, r8, r3
 80004cc:	0c11      	lsrs	r1, r2, #16
 80004ce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d2:	fb08 f904 	mul.w	r9, r8, r4
 80004d6:	40b0      	lsls	r0, r6
 80004d8:	4589      	cmp	r9, r1
 80004da:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004de:	b280      	uxth	r0, r0
 80004e0:	d93e      	bls.n	8000560 <__udivmoddi4+0x2e8>
 80004e2:	1879      	adds	r1, r7, r1
 80004e4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004e8:	d201      	bcs.n	80004ee <__udivmoddi4+0x276>
 80004ea:	4589      	cmp	r9, r1
 80004ec:	d81f      	bhi.n	800052e <__udivmoddi4+0x2b6>
 80004ee:	eba1 0109 	sub.w	r1, r1, r9
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80004fe:	b292      	uxth	r2, r2
 8000500:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000504:	4542      	cmp	r2, r8
 8000506:	d229      	bcs.n	800055c <__udivmoddi4+0x2e4>
 8000508:	18ba      	adds	r2, r7, r2
 800050a:	f109 31ff 	add.w	r1, r9, #4294967295
 800050e:	d2c4      	bcs.n	800049a <__udivmoddi4+0x222>
 8000510:	4542      	cmp	r2, r8
 8000512:	d2c2      	bcs.n	800049a <__udivmoddi4+0x222>
 8000514:	f1a9 0102 	sub.w	r1, r9, #2
 8000518:	443a      	add	r2, r7
 800051a:	e7be      	b.n	800049a <__udivmoddi4+0x222>
 800051c:	45f0      	cmp	r8, lr
 800051e:	d29d      	bcs.n	800045c <__udivmoddi4+0x1e4>
 8000520:	ebbe 0302 	subs.w	r3, lr, r2
 8000524:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000528:	3801      	subs	r0, #1
 800052a:	46e1      	mov	r9, ip
 800052c:	e796      	b.n	800045c <__udivmoddi4+0x1e4>
 800052e:	eba7 0909 	sub.w	r9, r7, r9
 8000532:	4449      	add	r1, r9
 8000534:	f1a8 0c02 	sub.w	ip, r8, #2
 8000538:	fbb1 f9fe 	udiv	r9, r1, lr
 800053c:	fb09 f804 	mul.w	r8, r9, r4
 8000540:	e7db      	b.n	80004fa <__udivmoddi4+0x282>
 8000542:	4673      	mov	r3, lr
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1ce>
 8000546:	4650      	mov	r0, sl
 8000548:	e766      	b.n	8000418 <__udivmoddi4+0x1a0>
 800054a:	4608      	mov	r0, r1
 800054c:	e6fd      	b.n	800034a <__udivmoddi4+0xd2>
 800054e:	443b      	add	r3, r7
 8000550:	3a02      	subs	r2, #2
 8000552:	e733      	b.n	80003bc <__udivmoddi4+0x144>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	443b      	add	r3, r7
 800055a:	e71c      	b.n	8000396 <__udivmoddi4+0x11e>
 800055c:	4649      	mov	r1, r9
 800055e:	e79c      	b.n	800049a <__udivmoddi4+0x222>
 8000560:	eba1 0109 	sub.w	r1, r1, r9
 8000564:	46c4      	mov	ip, r8
 8000566:	fbb1 f9fe 	udiv	r9, r1, lr
 800056a:	fb09 f804 	mul.w	r8, r9, r4
 800056e:	e7c4      	b.n	80004fa <__udivmoddi4+0x282>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000578:	f3bf 8f4f 	dsb	sy
}
 800057c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800057e:	4b06      	ldr	r3, [pc, #24]	@ (8000598 <__NVIC_SystemReset+0x24>)
 8000580:	68db      	ldr	r3, [r3, #12]
 8000582:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000586:	4904      	ldr	r1, [pc, #16]	@ (8000598 <__NVIC_SystemReset+0x24>)
 8000588:	4b04      	ldr	r3, [pc, #16]	@ (800059c <__NVIC_SystemReset+0x28>)
 800058a:	4313      	orrs	r3, r2
 800058c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800058e:	f3bf 8f4f 	dsb	sy
}
 8000592:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000594:	bf00      	nop
 8000596:	e7fd      	b.n	8000594 <__NVIC_SystemReset+0x20>
 8000598:	e000ed00 	.word	0xe000ed00
 800059c:	05fa0004 	.word	0x05fa0004

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 fc10 	bl	8000dca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f8b9 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 f987 	bl	80008c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b2:	f000 f925 	bl	8000800 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005b6:	f000 f953 	bl	8000860 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  write("\nStarting bootloader");
 80005ba:	484d      	ldr	r0, [pc, #308]	@ (80006f0 <main+0x150>)
 80005bc:	f000 f9e8 	bl	8000990 <write>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	2101      	movs	r1, #1
 80005c4:	484b      	ldr	r0, [pc, #300]	@ (80006f4 <main+0x154>)
 80005c6:	f001 fa89 	bl	8001adc <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	494a      	ldr	r1, [pc, #296]	@ (80006f8 <main+0x158>)
 80005ce:	484b      	ldr	r0, [pc, #300]	@ (80006fc <main+0x15c>)
 80005d0:	f002 fcc1 	bl	8002f56 <HAL_UART_Receive_IT>

  write("\nWaiting for data (5s)...\r\n");
 80005d4:	484a      	ldr	r0, [pc, #296]	@ (8000700 <main+0x160>)
 80005d6:	f000 f9db 	bl	8000990 <write>
  uint32_t t0 = HAL_GetTick();
 80005da:	f000 fc47 	bl	8000e6c <HAL_GetTick>
 80005de:	60b8      	str	r0, [r7, #8]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	if ((HAL_GetTick() - t0) < 5000 && !rx_line_ready) {
 80005e0:	f000 fc44 	bl	8000e6c <HAL_GetTick>
 80005e4:	4602      	mov	r2, r0
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	f241 3287 	movw	r2, #4999	@ 0x1387
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d80a      	bhi.n	8000608 <main+0x68>
 80005f2:	4b44      	ldr	r3, [pc, #272]	@ (8000704 <main+0x164>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d105      	bne.n	8000608 <main+0x68>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000602:	483c      	ldr	r0, [pc, #240]	@ (80006f4 <main+0x154>)
 8000604:	f001 fa6a 	bl	8001adc <HAL_GPIO_WritePin>

	}

	if((HAL_GetTick() - t0) >= 5000 && !rx_line_ready){
 8000608:	f000 fc30 	bl	8000e6c <HAL_GetTick>
 800060c:	4602      	mov	r2, r0
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000616:	4293      	cmp	r3, r2
 8000618:	d914      	bls.n	8000644 <main+0xa4>
 800061a:	4b3a      	ldr	r3, [pc, #232]	@ (8000704 <main+0x164>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	b2db      	uxtb	r3, r3
 8000620:	2b00      	cmp	r3, #0
 8000622:	d10f      	bne.n	8000644 <main+0xa4>
	  write("No message received!\r\n");
 8000624:	4838      	ldr	r0, [pc, #224]	@ (8000708 <main+0x168>)
 8000626:	f000 f9b3 	bl	8000990 <write>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000630:	4830      	ldr	r0, [pc, #192]	@ (80006f4 <main+0x154>)
 8000632:	f001 fa53 	bl	8001adc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2101      	movs	r1, #1
 800063a:	482e      	ldr	r0, [pc, #184]	@ (80006f4 <main+0x154>)
 800063c:	f001 fa4e 	bl	8001adc <HAL_GPIO_WritePin>
	  goto_application();
 8000640:	f000 f9ca 	bl	80009d8 <goto_application>

	}

	if((HAL_GetTick() - t0) < 5000 && rx_line_ready) {
 8000644:	f000 fc12 	bl	8000e6c <HAL_GetTick>
 8000648:	4602      	mov	r2, r0
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000652:	4293      	cmp	r3, r2
 8000654:	d8c4      	bhi.n	80005e0 <main+0x40>
 8000656:	4b2b      	ldr	r3, [pc, #172]	@ (8000704 <main+0x164>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	b2db      	uxtb	r3, r3
 800065c:	2b00      	cmp	r3, #0
 800065e:	d0bf      	beq.n	80005e0 <main+0x40>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000666:	4823      	ldr	r0, [pc, #140]	@ (80006f4 <main+0x154>)
 8000668:	f001 fa38 	bl	8001adc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	2101      	movs	r1, #1
 8000670:	4820      	ldr	r0, [pc, #128]	@ (80006f4 <main+0x154>)
 8000672:	f001 fa33 	bl	8001adc <HAL_GPIO_WritePin>
	  write("Data received. Writing to flash...\r\n");
 8000676:	4825      	ldr	r0, [pc, #148]	@ (800070c <main+0x16c>)
 8000678:	f000 f98a 	bl	8000990 <write>
	  HAL_Delay(1000);
 800067c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000680:	f000 fc00 	bl	8000e84 <HAL_Delay>

	  uint8_t count = read_flash(LED_State_Address);
 8000684:	4b22      	ldr	r3, [pc, #136]	@ (8000710 <main+0x170>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	f000 f9ec 	bl	8000a66 <read_flash>
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
	  erase_flash();
 8000692:	f000 f9b5 	bl	8000a00 <erase_flash>

	  program_flash(count, LED_State_Address);
 8000696:	4b1e      	ldr	r3, [pc, #120]	@ (8000710 <main+0x170>)
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	4611      	mov	r1, r2
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f9c9 	bl	8000a36 <program_flash>

	  for (size_t i=0; i<strlen(rx_buffer); i++) {
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	e00e      	b.n	80006c8 <main+0x128>
		  program_flash((uint8_t)rx_buffer[i], Address++);
 80006aa:	4a1a      	ldr	r2, [pc, #104]	@ (8000714 <main+0x174>)
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	4413      	add	r3, r2
 80006b0:	7818      	ldrb	r0, [r3, #0]
 80006b2:	4b19      	ldr	r3, [pc, #100]	@ (8000718 <main+0x178>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	1c5a      	adds	r2, r3, #1
 80006b8:	4917      	ldr	r1, [pc, #92]	@ (8000718 <main+0x178>)
 80006ba:	600a      	str	r2, [r1, #0]
 80006bc:	4619      	mov	r1, r3
 80006be:	f000 f9ba 	bl	8000a36 <program_flash>
	  for (size_t i=0; i<strlen(rx_buffer); i++) {
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	3301      	adds	r3, #1
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	4812      	ldr	r0, [pc, #72]	@ (8000714 <main+0x174>)
 80006ca:	f7ff fdb5 	bl	8000238 <strlen>
 80006ce:	4602      	mov	r2, r0
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d3e9      	bcc.n	80006aa <main+0x10a>
	  }
	  program_flash(0x00, Address);
 80006d6:	4b10      	ldr	r3, [pc, #64]	@ (8000718 <main+0x178>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4619      	mov	r1, r3
 80006dc:	2000      	movs	r0, #0
 80006de:	f000 f9aa 	bl	8000a36 <program_flash>

	  write("Flash write done.\r\n");
 80006e2:	480e      	ldr	r0, [pc, #56]	@ (800071c <main+0x17c>)
 80006e4:	f000 f954 	bl	8000990 <write>

	  reset_bootloader();
 80006e8:	f000 f96c 	bl	80009c4 <reset_bootloader>
	if ((HAL_GetTick() - t0) < 5000 && !rx_line_ready) {
 80006ec:	e778      	b.n	80005e0 <main+0x40>
 80006ee:	bf00      	nop
 80006f0:	080044fc 	.word	0x080044fc
 80006f4:	40020400 	.word	0x40020400
 80006f8:	20000140 	.word	0x20000140
 80006fc:	20000030 	.word	0x20000030
 8000700:	08004514 	.word	0x08004514
 8000704:	200001c5 	.word	0x200001c5
 8000708:	08004530 	.word	0x08004530
 800070c:	08004548 	.word	0x08004548
 8000710:	20000004 	.word	0x20000004
 8000714:	20000144 	.word	0x20000144
 8000718:	20000000 	.word	0x20000000
 800071c:	08004570 	.word	0x08004570

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b094      	sub	sp, #80	@ 0x50
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	2234      	movs	r2, #52	@ 0x34
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f003 feac 	bl	800448c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	f107 0308 	add.w	r3, r7, #8
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000744:	4b2c      	ldr	r3, [pc, #176]	@ (80007f8 <SystemClock_Config+0xd8>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000748:	4a2b      	ldr	r2, [pc, #172]	@ (80007f8 <SystemClock_Config+0xd8>)
 800074a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800074e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000750:	4b29      	ldr	r3, [pc, #164]	@ (80007f8 <SystemClock_Config+0xd8>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800075c:	4b27      	ldr	r3, [pc, #156]	@ (80007fc <SystemClock_Config+0xdc>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000764:	4a25      	ldr	r2, [pc, #148]	@ (80007fc <SystemClock_Config+0xdc>)
 8000766:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	4b23      	ldr	r3, [pc, #140]	@ (80007fc <SystemClock_Config+0xdc>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000778:	2302      	movs	r3, #2
 800077a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800077c:	2301      	movs	r3, #1
 800077e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000780:	2310      	movs	r3, #16
 8000782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000784:	2302      	movs	r3, #2
 8000786:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000788:	2300      	movs	r3, #0
 800078a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800078c:	2308      	movs	r3, #8
 800078e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000790:	2360      	movs	r3, #96	@ 0x60
 8000792:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000794:	2302      	movs	r3, #2
 8000796:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000798:	2304      	movs	r3, #4
 800079a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800079c:	2302      	movs	r3, #2
 800079e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4618      	mov	r0, r3
 80007a6:	f001 fa03 	bl	8001bb0 <HAL_RCC_OscConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007b0:	f000 f9ae 	bl	8000b10 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007b4:	f001 f9ac 	bl	8001b10 <HAL_PWREx_EnableOverDrive>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80007be:	f000 f9a7 	bl	8000b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c2:	230f      	movs	r3, #15
 80007c4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c6:	2302      	movs	r3, #2
 80007c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007d8:	f107 0308 	add.w	r3, r7, #8
 80007dc:	2103      	movs	r1, #3
 80007de:	4618      	mov	r0, r3
 80007e0:	f001 fc94 	bl	800210c <HAL_RCC_ClockConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0xce>
  {
    Error_Handler();
 80007ea:	f000 f991 	bl	8000b10 <Error_Handler>
  }
}
 80007ee:	bf00      	nop
 80007f0:	3750      	adds	r7, #80	@ 0x50
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40007000 	.word	0x40007000

08000800 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000804:	4b14      	ldr	r3, [pc, #80]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 8000806:	4a15      	ldr	r2, [pc, #84]	@ (800085c <MX_USART2_UART_Init+0x5c>)
 8000808:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1200;
 800080a:	4b13      	ldr	r3, [pc, #76]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 800080c:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8000810:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000812:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000818:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000824:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 8000826:	220c      	movs	r2, #12
 8000828:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000830:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000836:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 8000844:	f002 fab0 	bl	8002da8 <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800084e:	f000 f95f 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000030 	.word	0x20000030
 800085c:	40004400 	.word	0x40004400

08000860 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000864:	4b14      	ldr	r3, [pc, #80]	@ (80008b8 <MX_USART3_UART_Init+0x58>)
 8000866:	4a15      	ldr	r2, [pc, #84]	@ (80008bc <MX_USART3_UART_Init+0x5c>)
 8000868:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800086a:	4b13      	ldr	r3, [pc, #76]	@ (80008b8 <MX_USART3_UART_Init+0x58>)
 800086c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000870:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000872:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <MX_USART3_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000878:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <MX_USART3_UART_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800087e:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <MX_USART3_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000884:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <MX_USART3_UART_Init+0x58>)
 8000886:	220c      	movs	r2, #12
 8000888:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <MX_USART3_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000890:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <MX_USART3_UART_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000896:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <MX_USART3_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800089c:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <MX_USART3_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	@ (80008b8 <MX_USART3_UART_Init+0x58>)
 80008a4:	f002 fa80 	bl	8002da8 <HAL_UART_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008ae:	f000 f92f 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200000b8 	.word	0x200000b8
 80008bc:	40004800 	.word	0x40004800

080008c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	@ 0x28
 80008c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	4b2b      	ldr	r3, [pc, #172]	@ (8000984 <MX_GPIO_Init+0xc4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a2a      	ldr	r2, [pc, #168]	@ (8000984 <MX_GPIO_Init+0xc4>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b28      	ldr	r3, [pc, #160]	@ (8000984 <MX_GPIO_Init+0xc4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	4b25      	ldr	r3, [pc, #148]	@ (8000984 <MX_GPIO_Init+0xc4>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a24      	ldr	r2, [pc, #144]	@ (8000984 <MX_GPIO_Init+0xc4>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b22      	ldr	r3, [pc, #136]	@ (8000984 <MX_GPIO_Init+0xc4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	4b1f      	ldr	r3, [pc, #124]	@ (8000984 <MX_GPIO_Init+0xc4>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	4a1e      	ldr	r2, [pc, #120]	@ (8000984 <MX_GPIO_Init+0xc4>)
 800090c:	f043 0302 	orr.w	r3, r3, #2
 8000910:	6313      	str	r3, [r2, #48]	@ 0x30
 8000912:	4b1c      	ldr	r3, [pc, #112]	@ (8000984 <MX_GPIO_Init+0xc4>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091e:	4b19      	ldr	r3, [pc, #100]	@ (8000984 <MX_GPIO_Init+0xc4>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a18      	ldr	r2, [pc, #96]	@ (8000984 <MX_GPIO_Init+0xc4>)
 8000924:	f043 0308 	orr.w	r3, r3, #8
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b16      	ldr	r3, [pc, #88]	@ (8000984 <MX_GPIO_Init+0xc4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0308 	and.w	r3, r3, #8
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	f244 0181 	movw	r1, #16513	@ 0x4081
 800093c:	4812      	ldr	r0, [pc, #72]	@ (8000988 <MX_GPIO_Init+0xc8>)
 800093e:	f001 f8cd 	bl	8001adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000942:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000948:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800094c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	480c      	ldr	r0, [pc, #48]	@ (800098c <MX_GPIO_Init+0xcc>)
 800095a:	f000 ff13 	bl	8001784 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800095e:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4619      	mov	r1, r3
 8000976:	4804      	ldr	r0, [pc, #16]	@ (8000988 <MX_GPIO_Init+0xc8>)
 8000978:	f000 ff04 	bl	8001784 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800097c:	bf00      	nop
 800097e:	3728      	adds	r7, #40	@ 0x28
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40023800 	.word	0x40023800
 8000988:	40020400 	.word	0x40020400
 800098c:	40020800 	.word	0x40020800

08000990 <write>:

/* USER CODE BEGIN 4 */

int write(char *ptr){
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)ptr, strlen(ptr), HAL_MAX_DELAY);
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f7ff fc4d 	bl	8000238 <strlen>
 800099e:	4603      	mov	r3, r0
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	f04f 33ff 	mov.w	r3, #4294967295
 80009a6:	6879      	ldr	r1, [r7, #4]
 80009a8:	4805      	ldr	r0, [pc, #20]	@ (80009c0 <write+0x30>)
 80009aa:	f002 fa4b 	bl	8002e44 <HAL_UART_Transmit>
	return strlen(ptr);
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f7ff fc42 	bl	8000238 <strlen>
 80009b4:	4603      	mov	r3, r0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200000b8 	.word	0x200000b8

080009c4 <reset_bootloader>:
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, strlen(ptr), HAL_MAX_DELAY);
	return strlen(ptr);
}

static void reset_bootloader(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	write("\nJumping to Bootloader");
 80009c8:	4802      	ldr	r0, [pc, #8]	@ (80009d4 <reset_bootloader+0x10>)
 80009ca:	f7ff ffe1 	bl	8000990 <write>
	NVIC_SystemReset();
 80009ce:	f7ff fdd1 	bl	8000574 <__NVIC_SystemReset>
 80009d2:	bf00      	nop
 80009d4:	08004584 	.word	0x08004584

080009d8 <goto_application>:
}

static void goto_application(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
	write("\nJumping to application");
 80009de:	4806      	ldr	r0, [pc, #24]	@ (80009f8 <goto_application+0x20>)
 80009e0:	f7ff ffd6 	bl	8000990 <write>
	void (*app_reset_handler) (void) = (void*) (*(volatile uint32_t *) (0x8100000 + 4));
 80009e4:	4b05      	ldr	r3, [pc, #20]	@ (80009fc <goto_application+0x24>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	607b      	str	r3, [r7, #4]
	app_reset_handler();
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4798      	blx	r3
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	0800459c 	.word	0x0800459c
 80009fc:	08100004 	.word	0x08100004

08000a00 <erase_flash>:

void erase_flash(void){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef ERASE_STRUCT;
	ERASE_STRUCT.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
	ERASE_STRUCT.Banks = FLASH_BANK_1;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	60bb      	str	r3, [r7, #8]
	ERASE_STRUCT.Sector = FLASH_SECTOR_11;
 8000a0e:	230b      	movs	r3, #11
 8000a10:	60fb      	str	r3, [r7, #12]
	ERASE_STRUCT.NbSectors = 1;
 8000a12:	2301      	movs	r3, #1
 8000a14:	613b      	str	r3, [r7, #16]
	ERASE_STRUCT.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000a16:	2302      	movs	r3, #2
 8000a18:	617b      	str	r3, [r7, #20]

	uint32_t Sector_error;

	HAL_FLASH_Unlock();
 8000a1a:	f000 fc55 	bl	80012c8 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&ERASE_STRUCT, &Sector_error);
 8000a1e:	463a      	mov	r2, r7
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	4611      	mov	r1, r2
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 fdb1 	bl	800158c <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8000a2a:	f000 fc6f 	bl	800130c <HAL_FLASH_Lock>

}
 8000a2e:	bf00      	nop
 8000a30:	3718      	adds	r7, #24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <program_flash>:

void program_flash(uint8_t data, uint32_t address) {
 8000a36:	b5b0      	push	{r4, r5, r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	6039      	str	r1, [r7, #0]
 8000a40:	71fb      	strb	r3, [r7, #7]
    HAL_FLASH_Unlock();
 8000a42:	f000 fc41 	bl	80012c8 <HAL_FLASH_Unlock>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address, data);
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	461c      	mov	r4, r3
 8000a4c:	4615      	mov	r5, r2
 8000a4e:	4622      	mov	r2, r4
 8000a50:	462b      	mov	r3, r5
 8000a52:	6839      	ldr	r1, [r7, #0]
 8000a54:	2000      	movs	r0, #0
 8000a56:	f000 fbdd 	bl	8001214 <HAL_FLASH_Program>
    HAL_FLASH_Lock();
 8000a5a:	f000 fc57 	bl	800130c <HAL_FLASH_Lock>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bdb0      	pop	{r4, r5, r7, pc}

08000a66 <read_flash>:

uint8_t read_flash(uint32_t address){
 8000a66:	b480      	push	{r7}
 8000a68:	b085      	sub	sp, #20
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]

	uint8_t data = (uint8_t) (* ((volatile uint32_t*) address));
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	73fb      	strb	r3, [r7, #15]

	if((data == 0) || (data == 1)){
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d002      	beq.n	8000a80 <read_flash+0x1a>
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d101      	bne.n	8000a84 <read_flash+0x1e>
		return data;
 8000a80:	7bfb      	ldrb	r3, [r7, #15]
 8000a82:	e000      	b.n	8000a86 <read_flash+0x20>
	}
	else{
		return 0;
 8000a84:	2300      	movs	r3, #0
	}

}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3714      	adds	r7, #20
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
	...

08000a94 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a15      	ldr	r2, [pc, #84]	@ (8000af8 <HAL_UART_RxCpltCallback+0x64>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d124      	bne.n	8000af0 <HAL_UART_RxCpltCallback+0x5c>
    {
        if (rx_byte == '\n') {
 8000aa6:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <HAL_UART_RxCpltCallback+0x68>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b0a      	cmp	r3, #10
 8000aac:	d10c      	bne.n	8000ac8 <HAL_UART_RxCpltCallback+0x34>
            rx_buffer[rx_index] = '\0';
 8000aae:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <HAL_UART_RxCpltCallback+0x6c>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4b13      	ldr	r3, [pc, #76]	@ (8000b04 <HAL_UART_RxCpltCallback+0x70>)
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	5499      	strb	r1, [r3, r2]
            rx_line_ready = 1;
 8000aba:	4b13      	ldr	r3, [pc, #76]	@ (8000b08 <HAL_UART_RxCpltCallback+0x74>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	701a      	strb	r2, [r3, #0]
            rx_index = 0;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <HAL_UART_RxCpltCallback+0x6c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
 8000ac6:	e00e      	b.n	8000ae6 <HAL_UART_RxCpltCallback+0x52>
        } else {
            if (rx_index < sizeof(rx_buffer)-1) {
 8000ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b00 <HAL_UART_RxCpltCallback+0x6c>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b7e      	cmp	r3, #126	@ 0x7e
 8000ace:	d80a      	bhi.n	8000ae6 <HAL_UART_RxCpltCallback+0x52>
                rx_buffer[rx_index++] = rx_byte;
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <HAL_UART_RxCpltCallback+0x6c>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	1c5a      	adds	r2, r3, #1
 8000ad6:	b2d1      	uxtb	r1, r2
 8000ad8:	4a09      	ldr	r2, [pc, #36]	@ (8000b00 <HAL_UART_RxCpltCallback+0x6c>)
 8000ada:	7011      	strb	r1, [r2, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b07      	ldr	r3, [pc, #28]	@ (8000afc <HAL_UART_RxCpltCallback+0x68>)
 8000ae0:	7819      	ldrb	r1, [r3, #0]
 8000ae2:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <HAL_UART_RxCpltCallback+0x70>)
 8000ae4:	5499      	strb	r1, [r3, r2]
            }
        }
        HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	4904      	ldr	r1, [pc, #16]	@ (8000afc <HAL_UART_RxCpltCallback+0x68>)
 8000aea:	4808      	ldr	r0, [pc, #32]	@ (8000b0c <HAL_UART_RxCpltCallback+0x78>)
 8000aec:	f002 fa33 	bl	8002f56 <HAL_UART_Receive_IT>
    }
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40004400 	.word	0x40004400
 8000afc:	20000140 	.word	0x20000140
 8000b00:	200001c4 	.word	0x200001c4
 8000b04:	20000144 	.word	0x20000144
 8000b08:	200001c5 	.word	0x200001c5
 8000b0c:	20000030 	.word	0x20000030

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <Error_Handler+0x8>

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b22:	4b0f      	ldr	r3, [pc, #60]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b26:	4a0e      	ldr	r2, [pc, #56]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3a:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b3e:	4a08      	ldr	r2, [pc, #32]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40023800 	.word	0x40023800

08000b64 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b0b0      	sub	sp, #192	@ 0xc0
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b7c:	f107 031c 	add.w	r3, r7, #28
 8000b80:	2290      	movs	r2, #144	@ 0x90
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f003 fc81 	bl	800448c <memset>
  if(huart->Instance==USART2)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a4a      	ldr	r2, [pc, #296]	@ (8000cb8 <HAL_UART_MspInit+0x154>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d143      	bne.n	8000c1c <HAL_UART_MspInit+0xb8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b94:	2380      	movs	r3, #128	@ 0x80
 8000b96:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f001 fcd9 	bl	8002558 <HAL_RCCEx_PeriphCLKConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bac:	f7ff ffb0 	bl	8000b10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bb0:	4b42      	ldr	r3, [pc, #264]	@ (8000cbc <HAL_UART_MspInit+0x158>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb4:	4a41      	ldr	r2, [pc, #260]	@ (8000cbc <HAL_UART_MspInit+0x158>)
 8000bb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bbc:	4b3f      	ldr	r3, [pc, #252]	@ (8000cbc <HAL_UART_MspInit+0x158>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bc4:	61bb      	str	r3, [r7, #24]
 8000bc6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	4b3c      	ldr	r3, [pc, #240]	@ (8000cbc <HAL_UART_MspInit+0x158>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bcc:	4a3b      	ldr	r2, [pc, #236]	@ (8000cbc <HAL_UART_MspInit+0x158>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd4:	4b39      	ldr	r3, [pc, #228]	@ (8000cbc <HAL_UART_MspInit+0x158>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	617b      	str	r3, [r7, #20]
 8000bde:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000be0:	230c      	movs	r3, #12
 8000be2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bf8:	2307      	movs	r3, #7
 8000bfa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000c02:	4619      	mov	r1, r3
 8000c04:	482e      	ldr	r0, [pc, #184]	@ (8000cc0 <HAL_UART_MspInit+0x15c>)
 8000c06:	f000 fdbd 	bl	8001784 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2026      	movs	r0, #38	@ 0x26
 8000c10:	f000 fa37 	bl	8001082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c14:	2026      	movs	r0, #38	@ 0x26
 8000c16:	f000 fa50 	bl	80010ba <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c1a:	e049      	b.n	8000cb0 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART3)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a28      	ldr	r2, [pc, #160]	@ (8000cc4 <HAL_UART_MspInit+0x160>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d144      	bne.n	8000cb0 <HAL_UART_MspInit+0x14c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c2a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c30:	f107 031c 	add.w	r3, r7, #28
 8000c34:	4618      	mov	r0, r3
 8000c36:	f001 fc8f 	bl	8002558 <HAL_RCCEx_PeriphCLKConfig>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8000c40:	f7ff ff66 	bl	8000b10 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c44:	4b1d      	ldr	r3, [pc, #116]	@ (8000cbc <HAL_UART_MspInit+0x158>)
 8000c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c48:	4a1c      	ldr	r2, [pc, #112]	@ (8000cbc <HAL_UART_MspInit+0x158>)
 8000c4a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c50:	4b1a      	ldr	r3, [pc, #104]	@ (8000cbc <HAL_UART_MspInit+0x158>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c5c:	4b17      	ldr	r3, [pc, #92]	@ (8000cbc <HAL_UART_MspInit+0x158>)
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c60:	4a16      	ldr	r2, [pc, #88]	@ (8000cbc <HAL_UART_MspInit+0x158>)
 8000c62:	f043 0308 	orr.w	r3, r3, #8
 8000c66:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c68:	4b14      	ldr	r3, [pc, #80]	@ (8000cbc <HAL_UART_MspInit+0x158>)
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6c:	f003 0308 	and.w	r3, r3, #8
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c74:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c8e:	2307      	movs	r3, #7
 8000c90:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c94:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000c98:	4619      	mov	r1, r3
 8000c9a:	480b      	ldr	r0, [pc, #44]	@ (8000cc8 <HAL_UART_MspInit+0x164>)
 8000c9c:	f000 fd72 	bl	8001784 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	2027      	movs	r0, #39	@ 0x27
 8000ca6:	f000 f9ec 	bl	8001082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000caa:	2027      	movs	r0, #39	@ 0x27
 8000cac:	f000 fa05 	bl	80010ba <HAL_NVIC_EnableIRQ>
}
 8000cb0:	bf00      	nop
 8000cb2:	37c0      	adds	r7, #192	@ 0xc0
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40004400 	.word	0x40004400
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020000 	.word	0x40020000
 8000cc4:	40004800 	.word	0x40004800
 8000cc8:	40020c00 	.word	0x40020c00

08000ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <NMI_Handler+0x4>

08000cd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <HardFault_Handler+0x4>

08000cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <MemManage_Handler+0x4>

08000ce4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <BusFault_Handler+0x4>

08000cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <UsageFault_Handler+0x4>

08000cf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d22:	f000 f88f 	bl	8000e44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d30:	4802      	ldr	r0, [pc, #8]	@ (8000d3c <USART2_IRQHandler+0x10>)
 8000d32:	f002 f955 	bl	8002fe0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000030 	.word	0x20000030

08000d40 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d44:	4802      	ldr	r0, [pc, #8]	@ (8000d50 <USART3_IRQHandler+0x10>)
 8000d46:	f002 f94b 	bl	8002fe0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200000b8 	.word	0x200000b8

08000d54 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <SystemInit+0x20>)
 8000d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d5e:	4a05      	ldr	r2, [pc, #20]	@ (8000d74 <SystemInit+0x20>)
 8000d60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000db0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d7c:	f7ff ffea 	bl	8000d54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d80:	480c      	ldr	r0, [pc, #48]	@ (8000db4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d82:	490d      	ldr	r1, [pc, #52]	@ (8000db8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d84:	4a0d      	ldr	r2, [pc, #52]	@ (8000dbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d98:	4c0a      	ldr	r4, [pc, #40]	@ (8000dc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000da6:	f003 fb79 	bl	800449c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000daa:	f7ff fbf9 	bl	80005a0 <main>
  bx  lr    
 8000dae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000db0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000dbc:	080045dc 	.word	0x080045dc
  ldr r2, =_sbss
 8000dc0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000dc4:	200001e8 	.word	0x200001e8

08000dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <ADC_IRQHandler>

08000dca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dce:	2003      	movs	r0, #3
 8000dd0:	f000 f94c 	bl	800106c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f000 f805 	bl	8000de4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dda:	f7ff fe9f 	bl	8000b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dde:	2300      	movs	r3, #0
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dec:	4b12      	ldr	r3, [pc, #72]	@ (8000e38 <HAL_InitTick+0x54>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b12      	ldr	r3, [pc, #72]	@ (8000e3c <HAL_InitTick+0x58>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	4619      	mov	r1, r3
 8000df6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 f967 	bl	80010d6 <HAL_SYSTICK_Config>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e00e      	b.n	8000e30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2b0f      	cmp	r3, #15
 8000e16:	d80a      	bhi.n	8000e2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e20:	f000 f92f 	bl	8001082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e24:	4a06      	ldr	r2, [pc, #24]	@ (8000e40 <HAL_InitTick+0x5c>)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	e000      	b.n	8000e30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	20000010 	.word	0x20000010
 8000e40:	2000000c 	.word	0x2000000c

08000e44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e48:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <HAL_IncTick+0x20>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <HAL_IncTick+0x24>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4413      	add	r3, r2
 8000e54:	4a04      	ldr	r2, [pc, #16]	@ (8000e68 <HAL_IncTick+0x24>)
 8000e56:	6013      	str	r3, [r2, #0]
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000010 	.word	0x20000010
 8000e68:	200001c8 	.word	0x200001c8

08000e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e70:	4b03      	ldr	r3, [pc, #12]	@ (8000e80 <HAL_GetTick+0x14>)
 8000e72:	681b      	ldr	r3, [r3, #0]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	200001c8 	.word	0x200001c8

08000e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e8c:	f7ff ffee 	bl	8000e6c <HAL_GetTick>
 8000e90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e9c:	d005      	beq.n	8000eaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec8 <HAL_Delay+0x44>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eaa:	bf00      	nop
 8000eac:	f7ff ffde 	bl	8000e6c <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d8f7      	bhi.n	8000eac <HAL_Delay+0x28>
  {
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	bf00      	nop
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000010 	.word	0x20000010

08000ecc <__NVIC_SetPriorityGrouping>:
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000edc:	4b0b      	ldr	r3, [pc, #44]	@ (8000f0c <__NVIC_SetPriorityGrouping+0x40>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ef4:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efa:	4a04      	ldr	r2, [pc, #16]	@ (8000f0c <__NVIC_SetPriorityGrouping+0x40>)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	60d3      	str	r3, [r2, #12]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00
 8000f10:	05fa0000 	.word	0x05fa0000

08000f14 <__NVIC_GetPriorityGrouping>:
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f18:	4b04      	ldr	r3, [pc, #16]	@ (8000f2c <__NVIC_GetPriorityGrouping+0x18>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	0a1b      	lsrs	r3, r3, #8
 8000f1e:	f003 0307 	and.w	r3, r3, #7
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <__NVIC_EnableIRQ>:
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	db0b      	blt.n	8000f5a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	f003 021f 	and.w	r2, r3, #31
 8000f48:	4907      	ldr	r1, [pc, #28]	@ (8000f68 <__NVIC_EnableIRQ+0x38>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	095b      	lsrs	r3, r3, #5
 8000f50:	2001      	movs	r0, #1
 8000f52:	fa00 f202 	lsl.w	r2, r0, r2
 8000f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000e100 	.word	0xe000e100

08000f6c <__NVIC_SetPriority>:
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	6039      	str	r1, [r7, #0]
 8000f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	db0a      	blt.n	8000f96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	490c      	ldr	r1, [pc, #48]	@ (8000fb8 <__NVIC_SetPriority+0x4c>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	0112      	lsls	r2, r2, #4
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	440b      	add	r3, r1
 8000f90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000f94:	e00a      	b.n	8000fac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4908      	ldr	r1, [pc, #32]	@ (8000fbc <__NVIC_SetPriority+0x50>)
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	f003 030f 	and.w	r3, r3, #15
 8000fa2:	3b04      	subs	r3, #4
 8000fa4:	0112      	lsls	r2, r2, #4
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	440b      	add	r3, r1
 8000faa:	761a      	strb	r2, [r3, #24]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000e100 	.word	0xe000e100
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <NVIC_EncodePriority>:
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b089      	sub	sp, #36	@ 0x24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f1c3 0307 	rsb	r3, r3, #7
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	bf28      	it	cs
 8000fde:	2304      	movcs	r3, #4
 8000fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	2b06      	cmp	r3, #6
 8000fe8:	d902      	bls.n	8000ff0 <NVIC_EncodePriority+0x30>
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3b03      	subs	r3, #3
 8000fee:	e000      	b.n	8000ff2 <NVIC_EncodePriority+0x32>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43da      	mvns	r2, r3
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	401a      	ands	r2, r3
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001008:	f04f 31ff 	mov.w	r1, #4294967295
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	fa01 f303 	lsl.w	r3, r1, r3
 8001012:	43d9      	mvns	r1, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	4313      	orrs	r3, r2
}
 800101a:	4618      	mov	r0, r3
 800101c:	3724      	adds	r7, #36	@ 0x24
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
	...

08001028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001038:	d301      	bcc.n	800103e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800103a:	2301      	movs	r3, #1
 800103c:	e00f      	b.n	800105e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103e:	4a0a      	ldr	r2, [pc, #40]	@ (8001068 <SysTick_Config+0x40>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001046:	210f      	movs	r1, #15
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	f7ff ff8e 	bl	8000f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001050:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <SysTick_Config+0x40>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001056:	4b04      	ldr	r3, [pc, #16]	@ (8001068 <SysTick_Config+0x40>)
 8001058:	2207      	movs	r2, #7
 800105a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	e000e010 	.word	0xe000e010

0800106c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ff29 	bl	8000ecc <__NVIC_SetPriorityGrouping>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001082:	b580      	push	{r7, lr}
 8001084:	b086      	sub	sp, #24
 8001086:	af00      	add	r7, sp, #0
 8001088:	4603      	mov	r3, r0
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
 800108e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001094:	f7ff ff3e 	bl	8000f14 <__NVIC_GetPriorityGrouping>
 8001098:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	68b9      	ldr	r1, [r7, #8]
 800109e:	6978      	ldr	r0, [r7, #20]
 80010a0:	f7ff ff8e 	bl	8000fc0 <NVIC_EncodePriority>
 80010a4:	4602      	mov	r2, r0
 80010a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff5d 	bl	8000f6c <__NVIC_SetPriority>
}
 80010b2:	bf00      	nop
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff31 	bl	8000f30 <__NVIC_EnableIRQ>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ffa2 	bl	8001028 <SysTick_Config>
 80010e4:	4603      	mov	r3, r0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b084      	sub	sp, #16
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010fc:	f7ff feb6 	bl	8000e6c <HAL_GetTick>
 8001100:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d008      	beq.n	8001120 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2280      	movs	r2, #128	@ 0x80
 8001112:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e052      	b.n	80011c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 0216 	bic.w	r2, r2, #22
 800112e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	695a      	ldr	r2, [r3, #20]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800113e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001144:	2b00      	cmp	r3, #0
 8001146:	d103      	bne.n	8001150 <HAL_DMA_Abort+0x62>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800114c:	2b00      	cmp	r3, #0
 800114e:	d007      	beq.n	8001160 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 0208 	bic.w	r2, r2, #8
 800115e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f022 0201 	bic.w	r2, r2, #1
 800116e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001170:	e013      	b.n	800119a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001172:	f7ff fe7b 	bl	8000e6c <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b05      	cmp	r3, #5
 800117e:	d90c      	bls.n	800119a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2220      	movs	r2, #32
 8001184:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2203      	movs	r2, #3
 800118a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e015      	b.n	80011c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1e4      	bne.n	8001172 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011ac:	223f      	movs	r2, #63	@ 0x3f
 80011ae:	409a      	lsls	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2201      	movs	r2, #1
 80011b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d004      	beq.n	80011ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2280      	movs	r2, #128	@ 0x80
 80011e6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e00c      	b.n	8001206 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2205      	movs	r2, #5
 80011f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 0201 	bic.w	r2, r2, #1
 8001202:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001222:	4b27      	ldr	r3, [pc, #156]	@ (80012c0 <HAL_FLASH_Program+0xac>)
 8001224:	7d1b      	ldrb	r3, [r3, #20]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d101      	bne.n	800122e <HAL_FLASH_Program+0x1a>
 800122a:	2302      	movs	r3, #2
 800122c:	e043      	b.n	80012b6 <HAL_FLASH_Program+0xa2>
 800122e:	4b24      	ldr	r3, [pc, #144]	@ (80012c0 <HAL_FLASH_Program+0xac>)
 8001230:	2201      	movs	r2, #1
 8001232:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001234:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001238:	f000 f878 	bl	800132c <FLASH_WaitForLastOperation>
 800123c:	4603      	mov	r3, r0
 800123e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001240:	7dfb      	ldrb	r3, [r7, #23]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d133      	bne.n	80012ae <HAL_FLASH_Program+0x9a>
  {
    switch(TypeProgram)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2b03      	cmp	r3, #3
 800124a:	d823      	bhi.n	8001294 <HAL_FLASH_Program+0x80>
 800124c:	a201      	add	r2, pc, #4	@ (adr r2, 8001254 <HAL_FLASH_Program+0x40>)
 800124e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001252:	bf00      	nop
 8001254:	08001265 	.word	0x08001265
 8001258:	08001271 	.word	0x08001271
 800125c:	0800127d 	.word	0x0800127d
 8001260:	08001289 	.word	0x08001289
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8001264:	783b      	ldrb	r3, [r7, #0]
 8001266:	4619      	mov	r1, r3
 8001268:	68b8      	ldr	r0, [r7, #8]
 800126a:	f000 f921 	bl	80014b0 <FLASH_Program_Byte>
        break;
 800126e:	e012      	b.n	8001296 <HAL_FLASH_Program+0x82>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001270:	883b      	ldrh	r3, [r7, #0]
 8001272:	4619      	mov	r1, r3
 8001274:	68b8      	ldr	r0, [r7, #8]
 8001276:	f000 f8f5 	bl	8001464 <FLASH_Program_HalfWord>
        break;
 800127a:	e00c      	b.n	8001296 <HAL_FLASH_Program+0x82>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	4619      	mov	r1, r3
 8001280:	68b8      	ldr	r0, [r7, #8]
 8001282:	f000 f8c9 	bl	8001418 <FLASH_Program_Word>
        break;
 8001286:	e006      	b.n	8001296 <HAL_FLASH_Program+0x82>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8001288:	e9d7 2300 	ldrd	r2, r3, [r7]
 800128c:	68b8      	ldr	r0, [r7, #8]
 800128e:	f000 f88d 	bl	80013ac <FLASH_Program_DoubleWord>
        break;
 8001292:	e000      	b.n	8001296 <HAL_FLASH_Program+0x82>
      }
      default :
        break;
 8001294:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001296:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800129a:	f000 f847 	bl	800132c <FLASH_WaitForLastOperation>
 800129e:	4603      	mov	r3, r0
 80012a0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80012a2:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <HAL_FLASH_Program+0xb0>)
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	4a07      	ldr	r2, [pc, #28]	@ (80012c4 <HAL_FLASH_Program+0xb0>)
 80012a8:	f023 0301 	bic.w	r3, r3, #1
 80012ac:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80012ae:	4b04      	ldr	r3, [pc, #16]	@ (80012c0 <HAL_FLASH_Program+0xac>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	751a      	strb	r2, [r3, #20]

  return status;
 80012b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200001cc 	.word	0x200001cc
 80012c4:	40023c00 	.word	0x40023c00

080012c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80012d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001300 <HAL_FLASH_Unlock+0x38>)
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	da0b      	bge.n	80012f2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80012da:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <HAL_FLASH_Unlock+0x38>)
 80012dc:	4a09      	ldr	r2, [pc, #36]	@ (8001304 <HAL_FLASH_Unlock+0x3c>)
 80012de:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80012e0:	4b07      	ldr	r3, [pc, #28]	@ (8001300 <HAL_FLASH_Unlock+0x38>)
 80012e2:	4a09      	ldr	r2, [pc, #36]	@ (8001308 <HAL_FLASH_Unlock+0x40>)
 80012e4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80012e6:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <HAL_FLASH_Unlock+0x38>)
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	da01      	bge.n	80012f2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80012f2:	79fb      	ldrb	r3, [r7, #7]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	40023c00 	.word	0x40023c00
 8001304:	45670123 	.word	0x45670123
 8001308:	cdef89ab 	.word	0xcdef89ab

0800130c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001310:	4b05      	ldr	r3, [pc, #20]	@ (8001328 <HAL_FLASH_Lock+0x1c>)
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	4a04      	ldr	r2, [pc, #16]	@ (8001328 <HAL_FLASH_Lock+0x1c>)
 8001316:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800131a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	40023c00 	.word	0x40023c00

0800132c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001338:	4b1a      	ldr	r3, [pc, #104]	@ (80013a4 <FLASH_WaitForLastOperation+0x78>)
 800133a:	2200      	movs	r2, #0
 800133c:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800133e:	f7ff fd95 	bl	8000e6c <HAL_GetTick>
 8001342:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001344:	e010      	b.n	8001368 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800134c:	d00c      	beq.n	8001368 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d007      	beq.n	8001364 <FLASH_WaitForLastOperation+0x38>
 8001354:	f7ff fd8a 	bl	8000e6c <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	429a      	cmp	r2, r3
 8001362:	d201      	bcs.n	8001368 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e019      	b.n	800139c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001368:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <FLASH_WaitForLastOperation+0x7c>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1e8      	bne.n	8001346 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8001374:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <FLASH_WaitForLastOperation+0x7c>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001380:	f000 f8ba 	bl	80014f8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e009      	b.n	800139c <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001388:	4b07      	ldr	r3, [pc, #28]	@ (80013a8 <FLASH_WaitForLastOperation+0x7c>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	2b00      	cmp	r3, #0
 8001392:	d002      	beq.n	800139a <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001394:	4b04      	ldr	r3, [pc, #16]	@ (80013a8 <FLASH_WaitForLastOperation+0x7c>)
 8001396:	2201      	movs	r2, #1
 8001398:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800139a:	2300      	movs	r3, #0
  
}  
 800139c:	4618      	mov	r0, r3
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200001cc 	.word	0x200001cc
 80013a8:	40023c00 	.word	0x40023c00

080013ac <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80013b8:	4b16      	ldr	r3, [pc, #88]	@ (8001414 <FLASH_Program_DoubleWord+0x68>)
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	4a15      	ldr	r2, [pc, #84]	@ (8001414 <FLASH_Program_DoubleWord+0x68>)
 80013be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80013c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80013c4:	4b13      	ldr	r3, [pc, #76]	@ (8001414 <FLASH_Program_DoubleWord+0x68>)
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	4a12      	ldr	r2, [pc, #72]	@ (8001414 <FLASH_Program_DoubleWord+0x68>)
 80013ca:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80013ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80013d0:	4b10      	ldr	r3, [pc, #64]	@ (8001414 <FLASH_Program_DoubleWord+0x68>)
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001414 <FLASH_Program_DoubleWord+0x68>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80013e2:	f3bf 8f6f 	isb	sy
}
 80013e6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80013e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	f04f 0300 	mov.w	r3, #0
 80013f4:	000a      	movs	r2, r1
 80013f6:	2300      	movs	r3, #0
 80013f8:	68f9      	ldr	r1, [r7, #12]
 80013fa:	3104      	adds	r1, #4
 80013fc:	4613      	mov	r3, r2
 80013fe:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001400:	f3bf 8f4f 	dsb	sy
}
 8001404:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001406:	bf00      	nop
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	40023c00 	.word	0x40023c00

08001418 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001422:	4b0f      	ldr	r3, [pc, #60]	@ (8001460 <FLASH_Program_Word+0x48>)
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	4a0e      	ldr	r2, [pc, #56]	@ (8001460 <FLASH_Program_Word+0x48>)
 8001428:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800142c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800142e:	4b0c      	ldr	r3, [pc, #48]	@ (8001460 <FLASH_Program_Word+0x48>)
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	4a0b      	ldr	r2, [pc, #44]	@ (8001460 <FLASH_Program_Word+0x48>)
 8001434:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001438:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800143a:	4b09      	ldr	r3, [pc, #36]	@ (8001460 <FLASH_Program_Word+0x48>)
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	4a08      	ldr	r2, [pc, #32]	@ (8001460 <FLASH_Program_Word+0x48>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800144c:	f3bf 8f4f 	dsb	sy
}
 8001450:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40023c00 	.word	0x40023c00

08001464 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001470:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <FLASH_Program_HalfWord+0x48>)
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	4a0d      	ldr	r2, [pc, #52]	@ (80014ac <FLASH_Program_HalfWord+0x48>)
 8001476:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800147a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800147c:	4b0b      	ldr	r3, [pc, #44]	@ (80014ac <FLASH_Program_HalfWord+0x48>)
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	4a0a      	ldr	r2, [pc, #40]	@ (80014ac <FLASH_Program_HalfWord+0x48>)
 8001482:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001486:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001488:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <FLASH_Program_HalfWord+0x48>)
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	4a07      	ldr	r2, [pc, #28]	@ (80014ac <FLASH_Program_HalfWord+0x48>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	887a      	ldrh	r2, [r7, #2]
 8001498:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800149a:	f3bf 8f4f 	dsb	sy
}
 800149e:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	40023c00 	.word	0x40023c00

080014b0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80014bc:	4b0d      	ldr	r3, [pc, #52]	@ (80014f4 <FLASH_Program_Byte+0x44>)
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	4a0c      	ldr	r2, [pc, #48]	@ (80014f4 <FLASH_Program_Byte+0x44>)
 80014c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80014c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80014c8:	4b0a      	ldr	r3, [pc, #40]	@ (80014f4 <FLASH_Program_Byte+0x44>)
 80014ca:	4a0a      	ldr	r2, [pc, #40]	@ (80014f4 <FLASH_Program_Byte+0x44>)
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80014d0:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <FLASH_Program_Byte+0x44>)
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	4a07      	ldr	r2, [pc, #28]	@ (80014f4 <FLASH_Program_Byte+0x44>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	78fa      	ldrb	r2, [r7, #3]
 80014e0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80014e2:	f3bf 8f4f 	dsb	sy
}
 80014e6:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	40023c00 	.word	0x40023c00

080014f8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80014fc:	4b21      	ldr	r3, [pc, #132]	@ (8001584 <FLASH_SetErrorCode+0x8c>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d005      	beq.n	8001514 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001508:	4b1f      	ldr	r3, [pc, #124]	@ (8001588 <FLASH_SetErrorCode+0x90>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f043 0320 	orr.w	r3, r3, #32
 8001510:	4a1d      	ldr	r2, [pc, #116]	@ (8001588 <FLASH_SetErrorCode+0x90>)
 8001512:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001514:	4b1b      	ldr	r3, [pc, #108]	@ (8001584 <FLASH_SetErrorCode+0x8c>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	f003 0310 	and.w	r3, r3, #16
 800151c:	2b00      	cmp	r3, #0
 800151e:	d005      	beq.n	800152c <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001520:	4b19      	ldr	r3, [pc, #100]	@ (8001588 <FLASH_SetErrorCode+0x90>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	f043 0310 	orr.w	r3, r3, #16
 8001528:	4a17      	ldr	r2, [pc, #92]	@ (8001588 <FLASH_SetErrorCode+0x90>)
 800152a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800152c:	4b15      	ldr	r3, [pc, #84]	@ (8001584 <FLASH_SetErrorCode+0x8c>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	f003 0320 	and.w	r3, r3, #32
 8001534:	2b00      	cmp	r3, #0
 8001536:	d005      	beq.n	8001544 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001538:	4b13      	ldr	r3, [pc, #76]	@ (8001588 <FLASH_SetErrorCode+0x90>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	f043 0308 	orr.w	r3, r3, #8
 8001540:	4a11      	ldr	r2, [pc, #68]	@ (8001588 <FLASH_SetErrorCode+0x90>)
 8001542:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001544:	4b0f      	ldr	r3, [pc, #60]	@ (8001584 <FLASH_SetErrorCode+0x8c>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800154c:	2b00      	cmp	r3, #0
 800154e:	d005      	beq.n	800155c <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001550:	4b0d      	ldr	r3, [pc, #52]	@ (8001588 <FLASH_SetErrorCode+0x90>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	f043 0304 	orr.w	r3, r3, #4
 8001558:	4a0b      	ldr	r2, [pc, #44]	@ (8001588 <FLASH_SetErrorCode+0x90>)
 800155a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 800155c:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <FLASH_SetErrorCode+0x8c>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8001568:	4b07      	ldr	r3, [pc, #28]	@ (8001588 <FLASH_SetErrorCode+0x90>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f043 0302 	orr.w	r3, r3, #2
 8001570:	4a05      	ldr	r2, [pc, #20]	@ (8001588 <FLASH_SetErrorCode+0x90>)
 8001572:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001574:	4b03      	ldr	r3, [pc, #12]	@ (8001584 <FLASH_SetErrorCode+0x8c>)
 8001576:	22f2      	movs	r2, #242	@ 0xf2
 8001578:	60da      	str	r2, [r3, #12]
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	40023c00 	.word	0x40023c00
 8001588:	200001cc 	.word	0x200001cc

0800158c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800159a:	4b30      	ldr	r3, [pc, #192]	@ (800165c <HAL_FLASHEx_Erase+0xd0>)
 800159c:	7d1b      	ldrb	r3, [r3, #20]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d101      	bne.n	80015a6 <HAL_FLASHEx_Erase+0x1a>
 80015a2:	2302      	movs	r3, #2
 80015a4:	e056      	b.n	8001654 <HAL_FLASHEx_Erase+0xc8>
 80015a6:	4b2d      	ldr	r3, [pc, #180]	@ (800165c <HAL_FLASHEx_Erase+0xd0>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80015ac:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80015b0:	f7ff febc 	bl	800132c <FLASH_WaitForLastOperation>
 80015b4:	4603      	mov	r3, r0
 80015b6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d146      	bne.n	800164c <HAL_FLASHEx_Erase+0xc0>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	f04f 32ff 	mov.w	r2, #4294967295
 80015c4:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d115      	bne.n	80015fa <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	4619      	mov	r1, r3
 80015da:	4610      	mov	r0, r2
 80015dc:	f000 f844 	bl	8001668 <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80015e0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80015e4:	f7ff fea2 	bl	800132c <FLASH_WaitForLastOperation>
 80015e8:	4603      	mov	r3, r0
 80015ea:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80015ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001660 <HAL_FLASHEx_Erase+0xd4>)
 80015ee:	691a      	ldr	r2, [r3, #16]
 80015f0:	491b      	ldr	r1, [pc, #108]	@ (8001660 <HAL_FLASHEx_Erase+0xd4>)
 80015f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001664 <HAL_FLASHEx_Erase+0xd8>)
 80015f4:	4013      	ands	r3, r2
 80015f6:	610b      	str	r3, [r1, #16]
 80015f8:	e028      	b.n	800164c <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	e01c      	b.n	800163c <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	4619      	mov	r1, r3
 800160a:	68b8      	ldr	r0, [r7, #8]
 800160c:	f000 f868 	bl	80016e0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001610:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001614:	f7ff fe8a 	bl	800132c <FLASH_WaitForLastOperation>
 8001618:	4603      	mov	r3, r0
 800161a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 800161c:	4b10      	ldr	r3, [pc, #64]	@ (8001660 <HAL_FLASHEx_Erase+0xd4>)
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	4a0f      	ldr	r2, [pc, #60]	@ (8001660 <HAL_FLASHEx_Erase+0xd4>)
 8001622:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8001626:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	601a      	str	r2, [r3, #0]
          break;
 8001634:	e00a      	b.n	800164c <HAL_FLASHEx_Erase+0xc0>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	3301      	adds	r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68da      	ldr	r2, [r3, #12]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	4413      	add	r3, r2
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	429a      	cmp	r2, r3
 800164a:	d3da      	bcc.n	8001602 <HAL_FLASHEx_Erase+0x76>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800164c:	4b03      	ldr	r3, [pc, #12]	@ (800165c <HAL_FLASHEx_Erase+0xd0>)
 800164e:	2200      	movs	r2, #0
 8001650:	751a      	strb	r2, [r3, #20]

  return status;
 8001652:	7bfb      	ldrb	r3, [r7, #15]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	200001cc 	.word	0x200001cc
 8001660:	40023c00 	.word	0x40023c00
 8001664:	ffff7ffb 	.word	0xffff7ffb

08001668 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8001674:	4b19      	ldr	r3, [pc, #100]	@ (80016dc <FLASH_MassErase+0x74>)
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	4a18      	ldr	r2, [pc, #96]	@ (80016dc <FLASH_MassErase+0x74>)
 800167a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800167e:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	2b03      	cmp	r3, #3
 8001684:	d107      	bne.n	8001696 <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8001686:	4b15      	ldr	r3, [pc, #84]	@ (80016dc <FLASH_MassErase+0x74>)
 8001688:	691a      	ldr	r2, [r3, #16]
 800168a:	4914      	ldr	r1, [pc, #80]	@ (80016dc <FLASH_MassErase+0x74>)
 800168c:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001690:	4313      	orrs	r3, r2
 8001692:	610b      	str	r3, [r1, #16]
 8001694:	e00f      	b.n	80016b6 <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	2b02      	cmp	r3, #2
 800169a:	d106      	bne.n	80016aa <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 800169c:	4b0f      	ldr	r3, [pc, #60]	@ (80016dc <FLASH_MassErase+0x74>)
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	4a0e      	ldr	r2, [pc, #56]	@ (80016dc <FLASH_MassErase+0x74>)
 80016a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016a6:	6113      	str	r3, [r2, #16]
 80016a8:	e005      	b.n	80016b6 <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 80016aa:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <FLASH_MassErase+0x74>)
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	4a0b      	ldr	r2, [pc, #44]	@ (80016dc <FLASH_MassErase+0x74>)
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 80016b6:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <FLASH_MassErase+0x74>)
 80016b8:	691a      	ldr	r2, [r3, #16]
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	4313      	orrs	r3, r2
 80016c0:	4a06      	ldr	r2, [pc, #24]	@ (80016dc <FLASH_MassErase+0x74>)
 80016c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016c6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80016c8:	f3bf 8f4f 	dsb	sy
}
 80016cc:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40023c00 	.word	0x40023c00

080016e0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d102      	bne.n	80016fc <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	e010      	b.n	800171e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80016fc:	78fb      	ldrb	r3, [r7, #3]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d103      	bne.n	800170a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001702:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	e009      	b.n	800171e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800170a:	78fb      	ldrb	r3, [r7, #3]
 800170c:	2b02      	cmp	r3, #2
 800170e:	d103      	bne.n	8001718 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001710:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	e002      	b.n	800171e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001718:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800171c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b0b      	cmp	r3, #11
 8001722:	d902      	bls.n	800172a <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3304      	adds	r3, #4
 8001728:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 800172a:	4b15      	ldr	r3, [pc, #84]	@ (8001780 <FLASH_Erase_Sector+0xa0>)
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	4a14      	ldr	r2, [pc, #80]	@ (8001780 <FLASH_Erase_Sector+0xa0>)
 8001730:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001734:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001736:	4b12      	ldr	r3, [pc, #72]	@ (8001780 <FLASH_Erase_Sector+0xa0>)
 8001738:	691a      	ldr	r2, [r3, #16]
 800173a:	4911      	ldr	r1, [pc, #68]	@ (8001780 <FLASH_Erase_Sector+0xa0>)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4313      	orrs	r3, r2
 8001740:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001742:	4b0f      	ldr	r3, [pc, #60]	@ (8001780 <FLASH_Erase_Sector+0xa0>)
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	4a0e      	ldr	r2, [pc, #56]	@ (8001780 <FLASH_Erase_Sector+0xa0>)
 8001748:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800174c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800174e:	4b0c      	ldr	r3, [pc, #48]	@ (8001780 <FLASH_Erase_Sector+0xa0>)
 8001750:	691a      	ldr	r2, [r3, #16]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	4313      	orrs	r3, r2
 8001758:	4a09      	ldr	r2, [pc, #36]	@ (8001780 <FLASH_Erase_Sector+0xa0>)
 800175a:	f043 0302 	orr.w	r3, r3, #2
 800175e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001760:	4b07      	ldr	r3, [pc, #28]	@ (8001780 <FLASH_Erase_Sector+0xa0>)
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	4a06      	ldr	r2, [pc, #24]	@ (8001780 <FLASH_Erase_Sector+0xa0>)
 8001766:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800176a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800176c:	f3bf 8f4f 	dsb	sy
}
 8001770:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001772:	bf00      	nop
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40023c00 	.word	0x40023c00

08001784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001784:	b480      	push	{r7}
 8001786:	b089      	sub	sp, #36	@ 0x24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800179a:	2300      	movs	r3, #0
 800179c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
 80017a2:	e175      	b.n	8001a90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80017a4:	2201      	movs	r2, #1
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	429a      	cmp	r2, r3
 80017be:	f040 8164 	bne.w	8001a8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d005      	beq.n	80017da <HAL_GPIO_Init+0x56>
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f003 0303 	and.w	r3, r3, #3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d130      	bne.n	800183c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	2203      	movs	r2, #3
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4013      	ands	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	68da      	ldr	r2, [r3, #12]
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4313      	orrs	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001810:	2201      	movs	r2, #1
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	091b      	lsrs	r3, r3, #4
 8001826:	f003 0201 	and.w	r2, r3, #1
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	2b03      	cmp	r3, #3
 8001846:	d017      	beq.n	8001878 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	2203      	movs	r2, #3
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d123      	bne.n	80018cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	08da      	lsrs	r2, r3, #3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3208      	adds	r2, #8
 800188c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	220f      	movs	r2, #15
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	691a      	ldr	r2, [r3, #16]
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	08da      	lsrs	r2, r3, #3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3208      	adds	r2, #8
 80018c6:	69b9      	ldr	r1, [r7, #24]
 80018c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	2203      	movs	r2, #3
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0203 	and.w	r2, r3, #3
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 80be 	beq.w	8001a8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190e:	4b66      	ldr	r3, [pc, #408]	@ (8001aa8 <HAL_GPIO_Init+0x324>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001912:	4a65      	ldr	r2, [pc, #404]	@ (8001aa8 <HAL_GPIO_Init+0x324>)
 8001914:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001918:	6453      	str	r3, [r2, #68]	@ 0x44
 800191a:	4b63      	ldr	r3, [pc, #396]	@ (8001aa8 <HAL_GPIO_Init+0x324>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001926:	4a61      	ldr	r2, [pc, #388]	@ (8001aac <HAL_GPIO_Init+0x328>)
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	089b      	lsrs	r3, r3, #2
 800192c:	3302      	adds	r3, #2
 800192e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	220f      	movs	r2, #15
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4013      	ands	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a58      	ldr	r2, [pc, #352]	@ (8001ab0 <HAL_GPIO_Init+0x32c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d037      	beq.n	80019c2 <HAL_GPIO_Init+0x23e>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a57      	ldr	r2, [pc, #348]	@ (8001ab4 <HAL_GPIO_Init+0x330>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d031      	beq.n	80019be <HAL_GPIO_Init+0x23a>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a56      	ldr	r2, [pc, #344]	@ (8001ab8 <HAL_GPIO_Init+0x334>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d02b      	beq.n	80019ba <HAL_GPIO_Init+0x236>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a55      	ldr	r2, [pc, #340]	@ (8001abc <HAL_GPIO_Init+0x338>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d025      	beq.n	80019b6 <HAL_GPIO_Init+0x232>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a54      	ldr	r2, [pc, #336]	@ (8001ac0 <HAL_GPIO_Init+0x33c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d01f      	beq.n	80019b2 <HAL_GPIO_Init+0x22e>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a53      	ldr	r2, [pc, #332]	@ (8001ac4 <HAL_GPIO_Init+0x340>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d019      	beq.n	80019ae <HAL_GPIO_Init+0x22a>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a52      	ldr	r2, [pc, #328]	@ (8001ac8 <HAL_GPIO_Init+0x344>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d013      	beq.n	80019aa <HAL_GPIO_Init+0x226>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a51      	ldr	r2, [pc, #324]	@ (8001acc <HAL_GPIO_Init+0x348>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d00d      	beq.n	80019a6 <HAL_GPIO_Init+0x222>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a50      	ldr	r2, [pc, #320]	@ (8001ad0 <HAL_GPIO_Init+0x34c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d007      	beq.n	80019a2 <HAL_GPIO_Init+0x21e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a4f      	ldr	r2, [pc, #316]	@ (8001ad4 <HAL_GPIO_Init+0x350>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d101      	bne.n	800199e <HAL_GPIO_Init+0x21a>
 800199a:	2309      	movs	r3, #9
 800199c:	e012      	b.n	80019c4 <HAL_GPIO_Init+0x240>
 800199e:	230a      	movs	r3, #10
 80019a0:	e010      	b.n	80019c4 <HAL_GPIO_Init+0x240>
 80019a2:	2308      	movs	r3, #8
 80019a4:	e00e      	b.n	80019c4 <HAL_GPIO_Init+0x240>
 80019a6:	2307      	movs	r3, #7
 80019a8:	e00c      	b.n	80019c4 <HAL_GPIO_Init+0x240>
 80019aa:	2306      	movs	r3, #6
 80019ac:	e00a      	b.n	80019c4 <HAL_GPIO_Init+0x240>
 80019ae:	2305      	movs	r3, #5
 80019b0:	e008      	b.n	80019c4 <HAL_GPIO_Init+0x240>
 80019b2:	2304      	movs	r3, #4
 80019b4:	e006      	b.n	80019c4 <HAL_GPIO_Init+0x240>
 80019b6:	2303      	movs	r3, #3
 80019b8:	e004      	b.n	80019c4 <HAL_GPIO_Init+0x240>
 80019ba:	2302      	movs	r3, #2
 80019bc:	e002      	b.n	80019c4 <HAL_GPIO_Init+0x240>
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <HAL_GPIO_Init+0x240>
 80019c2:	2300      	movs	r3, #0
 80019c4:	69fa      	ldr	r2, [r7, #28]
 80019c6:	f002 0203 	and.w	r2, r2, #3
 80019ca:	0092      	lsls	r2, r2, #2
 80019cc:	4093      	lsls	r3, r2
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80019d4:	4935      	ldr	r1, [pc, #212]	@ (8001aac <HAL_GPIO_Init+0x328>)
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	089b      	lsrs	r3, r3, #2
 80019da:	3302      	adds	r3, #2
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019e2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ad8 <HAL_GPIO_Init+0x354>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a06:	4a34      	ldr	r2, [pc, #208]	@ (8001ad8 <HAL_GPIO_Init+0x354>)
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a0c:	4b32      	ldr	r3, [pc, #200]	@ (8001ad8 <HAL_GPIO_Init+0x354>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a30:	4a29      	ldr	r2, [pc, #164]	@ (8001ad8 <HAL_GPIO_Init+0x354>)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a36:	4b28      	ldr	r3, [pc, #160]	@ (8001ad8 <HAL_GPIO_Init+0x354>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a5a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ad8 <HAL_GPIO_Init+0x354>)
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a60:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad8 <HAL_GPIO_Init+0x354>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a84:	4a14      	ldr	r2, [pc, #80]	@ (8001ad8 <HAL_GPIO_Init+0x354>)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	61fb      	str	r3, [r7, #28]
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	2b0f      	cmp	r3, #15
 8001a94:	f67f ae86 	bls.w	80017a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a98:	bf00      	nop
 8001a9a:	bf00      	nop
 8001a9c:	3724      	adds	r7, #36	@ 0x24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40013800 	.word	0x40013800
 8001ab0:	40020000 	.word	0x40020000
 8001ab4:	40020400 	.word	0x40020400
 8001ab8:	40020800 	.word	0x40020800
 8001abc:	40020c00 	.word	0x40020c00
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40021400 	.word	0x40021400
 8001ac8:	40021800 	.word	0x40021800
 8001acc:	40021c00 	.word	0x40021c00
 8001ad0:	40022000 	.word	0x40022000
 8001ad4:	40022400 	.word	0x40022400
 8001ad8:	40013c00 	.word	0x40013c00

08001adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	807b      	strh	r3, [r7, #2]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aec:	787b      	ldrb	r3, [r7, #1]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001af2:	887a      	ldrh	r2, [r7, #2]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001af8:	e003      	b.n	8001b02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001afa:	887b      	ldrh	r3, [r7, #2]
 8001afc:	041a      	lsls	r2, r3, #16
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	619a      	str	r2, [r3, #24]
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1a:	4b23      	ldr	r3, [pc, #140]	@ (8001ba8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1e:	4a22      	ldr	r2, [pc, #136]	@ (8001ba8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b26:	4b20      	ldr	r3, [pc, #128]	@ (8001ba8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b32:	4b1e      	ldr	r3, [pc, #120]	@ (8001bac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a1d      	ldr	r2, [pc, #116]	@ (8001bac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b3c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b3e:	f7ff f995 	bl	8000e6c <HAL_GetTick>
 8001b42:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b44:	e009      	b.n	8001b5a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b46:	f7ff f991 	bl	8000e6c <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b54:	d901      	bls.n	8001b5a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e022      	b.n	8001ba0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b5a:	4b14      	ldr	r3, [pc, #80]	@ (8001bac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b66:	d1ee      	bne.n	8001b46 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b68:	4b10      	ldr	r3, [pc, #64]	@ (8001bac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0f      	ldr	r2, [pc, #60]	@ (8001bac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b72:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b74:	f7ff f97a 	bl	8000e6c <HAL_GetTick>
 8001b78:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b7a:	e009      	b.n	8001b90 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b7c:	f7ff f976 	bl	8000e6c <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b8a:	d901      	bls.n	8001b90 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e007      	b.n	8001ba0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b90:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001b9c:	d1ee      	bne.n	8001b7c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40007000 	.word	0x40007000

08001bb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e29b      	b.n	80020fe <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 8087 	beq.w	8001ce2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bd4:	4b96      	ldr	r3, [pc, #600]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 030c 	and.w	r3, r3, #12
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d00c      	beq.n	8001bfa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001be0:	4b93      	ldr	r3, [pc, #588]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d112      	bne.n	8001c12 <HAL_RCC_OscConfig+0x62>
 8001bec:	4b90      	ldr	r3, [pc, #576]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bf4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001bf8:	d10b      	bne.n	8001c12 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bfa:	4b8d      	ldr	r3, [pc, #564]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d06c      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x130>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d168      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e275      	b.n	80020fe <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c1a:	d106      	bne.n	8001c2a <HAL_RCC_OscConfig+0x7a>
 8001c1c:	4b84      	ldr	r3, [pc, #528]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a83      	ldr	r2, [pc, #524]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001c22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	e02e      	b.n	8001c88 <HAL_RCC_OscConfig+0xd8>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x9c>
 8001c32:	4b7f      	ldr	r3, [pc, #508]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a7e      	ldr	r2, [pc, #504]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001c38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	4b7c      	ldr	r3, [pc, #496]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a7b      	ldr	r2, [pc, #492]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001c44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	e01d      	b.n	8001c88 <HAL_RCC_OscConfig+0xd8>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c54:	d10c      	bne.n	8001c70 <HAL_RCC_OscConfig+0xc0>
 8001c56:	4b76      	ldr	r3, [pc, #472]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a75      	ldr	r2, [pc, #468]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001c5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	4b73      	ldr	r3, [pc, #460]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a72      	ldr	r2, [pc, #456]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001c68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	e00b      	b.n	8001c88 <HAL_RCC_OscConfig+0xd8>
 8001c70:	4b6f      	ldr	r3, [pc, #444]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a6e      	ldr	r2, [pc, #440]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001c76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	4b6c      	ldr	r3, [pc, #432]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a6b      	ldr	r2, [pc, #428]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001c82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d013      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c90:	f7ff f8ec 	bl	8000e6c <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c98:	f7ff f8e8 	bl	8000e6c <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b64      	cmp	r3, #100	@ 0x64
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e229      	b.n	80020fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001caa:	4b61      	ldr	r3, [pc, #388]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0f0      	beq.n	8001c98 <HAL_RCC_OscConfig+0xe8>
 8001cb6:	e014      	b.n	8001ce2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb8:	f7ff f8d8 	bl	8000e6c <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc0:	f7ff f8d4 	bl	8000e6c <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b64      	cmp	r3, #100	@ 0x64
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e215      	b.n	80020fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd2:	4b57      	ldr	r3, [pc, #348]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x110>
 8001cde:	e000      	b.n	8001ce2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d069      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cee:	4b50      	ldr	r3, [pc, #320]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00b      	beq.n	8001d12 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cfa:	4b4d      	ldr	r3, [pc, #308]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d11c      	bne.n	8001d40 <HAL_RCC_OscConfig+0x190>
 8001d06:	4b4a      	ldr	r3, [pc, #296]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d116      	bne.n	8001d40 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d12:	4b47      	ldr	r3, [pc, #284]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d005      	beq.n	8001d2a <HAL_RCC_OscConfig+0x17a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d001      	beq.n	8001d2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e1e9      	b.n	80020fe <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2a:	4b41      	ldr	r3, [pc, #260]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	493d      	ldr	r1, [pc, #244]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3e:	e040      	b.n	8001dc2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d023      	beq.n	8001d90 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d48:	4b39      	ldr	r3, [pc, #228]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a38      	ldr	r2, [pc, #224]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7ff f88a 	bl	8000e6c <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d5c:	f7ff f886 	bl	8000e6c <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e1c7      	b.n	80020fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6e:	4b30      	ldr	r3, [pc, #192]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4929      	ldr	r1, [pc, #164]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]
 8001d8e:	e018      	b.n	8001dc2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d90:	4b27      	ldr	r3, [pc, #156]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a26      	ldr	r2, [pc, #152]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001d96:	f023 0301 	bic.w	r3, r3, #1
 8001d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9c:	f7ff f866 	bl	8000e6c <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da4:	f7ff f862 	bl	8000e6c <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e1a3      	b.n	80020fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d038      	beq.n	8001e40 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d019      	beq.n	8001e0a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dd6:	4b16      	ldr	r3, [pc, #88]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001dd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dda:	4a15      	ldr	r2, [pc, #84]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de2:	f7ff f843 	bl	8000e6c <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dea:	f7ff f83f 	bl	8000e6c <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e180      	b.n	80020fe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001dfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0x23a>
 8001e08:	e01a      	b.n	8001e40 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e0a:	4b09      	ldr	r3, [pc, #36]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001e0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e0e:	4a08      	ldr	r2, [pc, #32]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001e10:	f023 0301 	bic.w	r3, r3, #1
 8001e14:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e16:	f7ff f829 	bl	8000e6c <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e1c:	e00a      	b.n	8001e34 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e1e:	f7ff f825 	bl	8000e6c <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d903      	bls.n	8001e34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e166      	b.n	80020fe <HAL_RCC_OscConfig+0x54e>
 8001e30:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e34:	4b92      	ldr	r3, [pc, #584]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001e36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1ee      	bne.n	8001e1e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 80a4 	beq.w	8001f96 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e4e:	4b8c      	ldr	r3, [pc, #560]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10d      	bne.n	8001e76 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e5a:	4b89      	ldr	r3, [pc, #548]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5e:	4a88      	ldr	r2, [pc, #544]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001e60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e66:	4b86      	ldr	r3, [pc, #536]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e72:	2301      	movs	r3, #1
 8001e74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e76:	4b83      	ldr	r3, [pc, #524]	@ (8002084 <HAL_RCC_OscConfig+0x4d4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d118      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001e82:	4b80      	ldr	r3, [pc, #512]	@ (8002084 <HAL_RCC_OscConfig+0x4d4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a7f      	ldr	r2, [pc, #508]	@ (8002084 <HAL_RCC_OscConfig+0x4d4>)
 8001e88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8e:	f7fe ffed 	bl	8000e6c <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e96:	f7fe ffe9 	bl	8000e6c <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b64      	cmp	r3, #100	@ 0x64
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e12a      	b.n	80020fe <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ea8:	4b76      	ldr	r3, [pc, #472]	@ (8002084 <HAL_RCC_OscConfig+0x4d4>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f0      	beq.n	8001e96 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d106      	bne.n	8001eca <HAL_RCC_OscConfig+0x31a>
 8001ebc:	4b70      	ldr	r3, [pc, #448]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ec0:	4a6f      	ldr	r2, [pc, #444]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ec8:	e02d      	b.n	8001f26 <HAL_RCC_OscConfig+0x376>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10c      	bne.n	8001eec <HAL_RCC_OscConfig+0x33c>
 8001ed2:	4b6b      	ldr	r3, [pc, #428]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed6:	4a6a      	ldr	r2, [pc, #424]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001ed8:	f023 0301 	bic.w	r3, r3, #1
 8001edc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ede:	4b68      	ldr	r3, [pc, #416]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee2:	4a67      	ldr	r2, [pc, #412]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001ee4:	f023 0304 	bic.w	r3, r3, #4
 8001ee8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eea:	e01c      	b.n	8001f26 <HAL_RCC_OscConfig+0x376>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	2b05      	cmp	r3, #5
 8001ef2:	d10c      	bne.n	8001f0e <HAL_RCC_OscConfig+0x35e>
 8001ef4:	4b62      	ldr	r3, [pc, #392]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef8:	4a61      	ldr	r2, [pc, #388]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001efa:	f043 0304 	orr.w	r3, r3, #4
 8001efe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f00:	4b5f      	ldr	r3, [pc, #380]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001f02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f04:	4a5e      	ldr	r2, [pc, #376]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f0c:	e00b      	b.n	8001f26 <HAL_RCC_OscConfig+0x376>
 8001f0e:	4b5c      	ldr	r3, [pc, #368]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f12:	4a5b      	ldr	r2, [pc, #364]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001f14:	f023 0301 	bic.w	r3, r3, #1
 8001f18:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f1a:	4b59      	ldr	r3, [pc, #356]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f1e:	4a58      	ldr	r2, [pc, #352]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001f20:	f023 0304 	bic.w	r3, r3, #4
 8001f24:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d015      	beq.n	8001f5a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2e:	f7fe ff9d 	bl	8000e6c <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f34:	e00a      	b.n	8001f4c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f36:	f7fe ff99 	bl	8000e6c <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e0d8      	b.n	80020fe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f4c:	4b4c      	ldr	r3, [pc, #304]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0ee      	beq.n	8001f36 <HAL_RCC_OscConfig+0x386>
 8001f58:	e014      	b.n	8001f84 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5a:	f7fe ff87 	bl	8000e6c <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f60:	e00a      	b.n	8001f78 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f62:	f7fe ff83 	bl	8000e6c <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e0c2      	b.n	80020fe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f78:	4b41      	ldr	r3, [pc, #260]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1ee      	bne.n	8001f62 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f84:	7dfb      	ldrb	r3, [r7, #23]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d105      	bne.n	8001f96 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f8a:	4b3d      	ldr	r3, [pc, #244]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	4a3c      	ldr	r2, [pc, #240]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001f90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f94:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 80ae 	beq.w	80020fc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fa0:	4b37      	ldr	r3, [pc, #220]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 030c 	and.w	r3, r3, #12
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d06d      	beq.n	8002088 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d14b      	bne.n	800204c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb4:	4b32      	ldr	r3, [pc, #200]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a31      	ldr	r2, [pc, #196]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001fba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc0:	f7fe ff54 	bl	8000e6c <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc8:	f7fe ff50 	bl	8000e6c <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e091      	b.n	80020fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fda:	4b29      	ldr	r3, [pc, #164]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69da      	ldr	r2, [r3, #28]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff4:	019b      	lsls	r3, r3, #6
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ffc:	085b      	lsrs	r3, r3, #1
 8001ffe:	3b01      	subs	r3, #1
 8002000:	041b      	lsls	r3, r3, #16
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002008:	061b      	lsls	r3, r3, #24
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002010:	071b      	lsls	r3, r3, #28
 8002012:	491b      	ldr	r1, [pc, #108]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8002014:	4313      	orrs	r3, r2
 8002016:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002018:	4b19      	ldr	r3, [pc, #100]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a18      	ldr	r2, [pc, #96]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 800201e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002024:	f7fe ff22 	bl	8000e6c <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800202c:	f7fe ff1e 	bl	8000e6c <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e05f      	b.n	80020fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800203e:	4b10      	ldr	r3, [pc, #64]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0x47c>
 800204a:	e057      	b.n	80020fc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800204c:	4b0c      	ldr	r3, [pc, #48]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a0b      	ldr	r2, [pc, #44]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8002052:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002056:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002058:	f7fe ff08 	bl	8000e6c <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002060:	f7fe ff04 	bl	8000e6c <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e045      	b.n	80020fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002072:	4b03      	ldr	r3, [pc, #12]	@ (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0x4b0>
 800207e:	e03d      	b.n	80020fc <HAL_RCC_OscConfig+0x54c>
 8002080:	40023800 	.word	0x40023800
 8002084:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002088:	4b1f      	ldr	r3, [pc, #124]	@ (8002108 <HAL_RCC_OscConfig+0x558>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d030      	beq.n	80020f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d129      	bne.n	80020f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d122      	bne.n	80020f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80020b8:	4013      	ands	r3, r2
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020be:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d119      	bne.n	80020f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ce:	085b      	lsrs	r3, r3, #1
 80020d0:	3b01      	subs	r3, #1
 80020d2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d10f      	bne.n	80020f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d107      	bne.n	80020f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e000      	b.n	80020fe <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800

0800210c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e0d0      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002124:	4b6a      	ldr	r3, [pc, #424]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d910      	bls.n	8002154 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002132:	4b67      	ldr	r3, [pc, #412]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f023 020f 	bic.w	r2, r3, #15
 800213a:	4965      	ldr	r1, [pc, #404]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	4313      	orrs	r3, r2
 8002140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	4b63      	ldr	r3, [pc, #396]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d001      	beq.n	8002154 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e0b8      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d020      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800216c:	4b59      	ldr	r3, [pc, #356]	@ (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	4a58      	ldr	r2, [pc, #352]	@ (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002172:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002176:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0308 	and.w	r3, r3, #8
 8002180:	2b00      	cmp	r3, #0
 8002182:	d005      	beq.n	8002190 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002184:	4b53      	ldr	r3, [pc, #332]	@ (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	4a52      	ldr	r2, [pc, #328]	@ (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 800218a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800218e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002190:	4b50      	ldr	r3, [pc, #320]	@ (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	494d      	ldr	r1, [pc, #308]	@ (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d040      	beq.n	8002230 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d107      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b6:	4b47      	ldr	r3, [pc, #284]	@ (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d115      	bne.n	80021ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e07f      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d107      	bne.n	80021de <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ce:	4b41      	ldr	r3, [pc, #260]	@ (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d109      	bne.n	80021ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e073      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021de:	4b3d      	ldr	r3, [pc, #244]	@ (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e06b      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ee:	4b39      	ldr	r3, [pc, #228]	@ (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f023 0203 	bic.w	r2, r3, #3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	4936      	ldr	r1, [pc, #216]	@ (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002200:	f7fe fe34 	bl	8000e6c <HAL_GetTick>
 8002204:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002206:	e00a      	b.n	800221e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002208:	f7fe fe30 	bl	8000e6c <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e053      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221e:	4b2d      	ldr	r3, [pc, #180]	@ (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 020c 	and.w	r2, r3, #12
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	429a      	cmp	r2, r3
 800222e:	d1eb      	bne.n	8002208 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002230:	4b27      	ldr	r3, [pc, #156]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 030f 	and.w	r3, r3, #15
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d210      	bcs.n	8002260 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223e:	4b24      	ldr	r3, [pc, #144]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 020f 	bic.w	r2, r3, #15
 8002246:	4922      	ldr	r1, [pc, #136]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	4313      	orrs	r3, r2
 800224c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800224e:	4b20      	ldr	r3, [pc, #128]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d001      	beq.n	8002260 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e032      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	d008      	beq.n	800227e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800226c:	4b19      	ldr	r3, [pc, #100]	@ (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4916      	ldr	r1, [pc, #88]	@ (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 800227a:	4313      	orrs	r3, r2
 800227c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d009      	beq.n	800229e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800228a:	4b12      	ldr	r3, [pc, #72]	@ (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	490e      	ldr	r1, [pc, #56]	@ (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 800229a:	4313      	orrs	r3, r2
 800229c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800229e:	f000 f821 	bl	80022e4 <HAL_RCC_GetSysClockFreq>
 80022a2:	4602      	mov	r2, r0
 80022a4:	4b0b      	ldr	r3, [pc, #44]	@ (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	091b      	lsrs	r3, r3, #4
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	490a      	ldr	r1, [pc, #40]	@ (80022d8 <HAL_RCC_ClockConfig+0x1cc>)
 80022b0:	5ccb      	ldrb	r3, [r1, r3]
 80022b2:	fa22 f303 	lsr.w	r3, r2, r3
 80022b6:	4a09      	ldr	r2, [pc, #36]	@ (80022dc <HAL_RCC_ClockConfig+0x1d0>)
 80022b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022ba:	4b09      	ldr	r3, [pc, #36]	@ (80022e0 <HAL_RCC_ClockConfig+0x1d4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fe fd90 	bl	8000de4 <HAL_InitTick>

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40023c00 	.word	0x40023c00
 80022d4:	40023800 	.word	0x40023800
 80022d8:	080045b4 	.word	0x080045b4
 80022dc:	20000008 	.word	0x20000008
 80022e0:	2000000c 	.word	0x2000000c

080022e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022e8:	b094      	sub	sp, #80	@ 0x50
 80022ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80022ec:	2300      	movs	r3, #0
 80022ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80022f0:	2300      	movs	r3, #0
 80022f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022f4:	2300      	movs	r3, #0
 80022f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022fc:	4b79      	ldr	r3, [pc, #484]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 030c 	and.w	r3, r3, #12
 8002304:	2b08      	cmp	r3, #8
 8002306:	d00d      	beq.n	8002324 <HAL_RCC_GetSysClockFreq+0x40>
 8002308:	2b08      	cmp	r3, #8
 800230a:	f200 80e1 	bhi.w	80024d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800230e:	2b00      	cmp	r3, #0
 8002310:	d002      	beq.n	8002318 <HAL_RCC_GetSysClockFreq+0x34>
 8002312:	2b04      	cmp	r3, #4
 8002314:	d003      	beq.n	800231e <HAL_RCC_GetSysClockFreq+0x3a>
 8002316:	e0db      	b.n	80024d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002318:	4b73      	ldr	r3, [pc, #460]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800231a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800231c:	e0db      	b.n	80024d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800231e:	4b73      	ldr	r3, [pc, #460]	@ (80024ec <HAL_RCC_GetSysClockFreq+0x208>)
 8002320:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002322:	e0d8      	b.n	80024d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002324:	4b6f      	ldr	r3, [pc, #444]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800232c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800232e:	4b6d      	ldr	r3, [pc, #436]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d063      	beq.n	8002402 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800233a:	4b6a      	ldr	r3, [pc, #424]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	099b      	lsrs	r3, r3, #6
 8002340:	2200      	movs	r2, #0
 8002342:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002344:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800234c:	633b      	str	r3, [r7, #48]	@ 0x30
 800234e:	2300      	movs	r3, #0
 8002350:	637b      	str	r3, [r7, #52]	@ 0x34
 8002352:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002356:	4622      	mov	r2, r4
 8002358:	462b      	mov	r3, r5
 800235a:	f04f 0000 	mov.w	r0, #0
 800235e:	f04f 0100 	mov.w	r1, #0
 8002362:	0159      	lsls	r1, r3, #5
 8002364:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002368:	0150      	lsls	r0, r2, #5
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	4621      	mov	r1, r4
 8002370:	1a51      	subs	r1, r2, r1
 8002372:	6139      	str	r1, [r7, #16]
 8002374:	4629      	mov	r1, r5
 8002376:	eb63 0301 	sbc.w	r3, r3, r1
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	f04f 0300 	mov.w	r3, #0
 8002384:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002388:	4659      	mov	r1, fp
 800238a:	018b      	lsls	r3, r1, #6
 800238c:	4651      	mov	r1, sl
 800238e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002392:	4651      	mov	r1, sl
 8002394:	018a      	lsls	r2, r1, #6
 8002396:	4651      	mov	r1, sl
 8002398:	ebb2 0801 	subs.w	r8, r2, r1
 800239c:	4659      	mov	r1, fp
 800239e:	eb63 0901 	sbc.w	r9, r3, r1
 80023a2:	f04f 0200 	mov.w	r2, #0
 80023a6:	f04f 0300 	mov.w	r3, #0
 80023aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023b6:	4690      	mov	r8, r2
 80023b8:	4699      	mov	r9, r3
 80023ba:	4623      	mov	r3, r4
 80023bc:	eb18 0303 	adds.w	r3, r8, r3
 80023c0:	60bb      	str	r3, [r7, #8]
 80023c2:	462b      	mov	r3, r5
 80023c4:	eb49 0303 	adc.w	r3, r9, r3
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	f04f 0300 	mov.w	r3, #0
 80023d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023d6:	4629      	mov	r1, r5
 80023d8:	024b      	lsls	r3, r1, #9
 80023da:	4621      	mov	r1, r4
 80023dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023e0:	4621      	mov	r1, r4
 80023e2:	024a      	lsls	r2, r1, #9
 80023e4:	4610      	mov	r0, r2
 80023e6:	4619      	mov	r1, r3
 80023e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023ea:	2200      	movs	r2, #0
 80023ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80023f4:	f7fd ff28 	bl	8000248 <__aeabi_uldivmod>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	4613      	mov	r3, r2
 80023fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002400:	e058      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002402:	4b38      	ldr	r3, [pc, #224]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	099b      	lsrs	r3, r3, #6
 8002408:	2200      	movs	r2, #0
 800240a:	4618      	mov	r0, r3
 800240c:	4611      	mov	r1, r2
 800240e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002412:	623b      	str	r3, [r7, #32]
 8002414:	2300      	movs	r3, #0
 8002416:	627b      	str	r3, [r7, #36]	@ 0x24
 8002418:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800241c:	4642      	mov	r2, r8
 800241e:	464b      	mov	r3, r9
 8002420:	f04f 0000 	mov.w	r0, #0
 8002424:	f04f 0100 	mov.w	r1, #0
 8002428:	0159      	lsls	r1, r3, #5
 800242a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800242e:	0150      	lsls	r0, r2, #5
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4641      	mov	r1, r8
 8002436:	ebb2 0a01 	subs.w	sl, r2, r1
 800243a:	4649      	mov	r1, r9
 800243c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	f04f 0300 	mov.w	r3, #0
 8002448:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800244c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002450:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002454:	ebb2 040a 	subs.w	r4, r2, sl
 8002458:	eb63 050b 	sbc.w	r5, r3, fp
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	00eb      	lsls	r3, r5, #3
 8002466:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800246a:	00e2      	lsls	r2, r4, #3
 800246c:	4614      	mov	r4, r2
 800246e:	461d      	mov	r5, r3
 8002470:	4643      	mov	r3, r8
 8002472:	18e3      	adds	r3, r4, r3
 8002474:	603b      	str	r3, [r7, #0]
 8002476:	464b      	mov	r3, r9
 8002478:	eb45 0303 	adc.w	r3, r5, r3
 800247c:	607b      	str	r3, [r7, #4]
 800247e:	f04f 0200 	mov.w	r2, #0
 8002482:	f04f 0300 	mov.w	r3, #0
 8002486:	e9d7 4500 	ldrd	r4, r5, [r7]
 800248a:	4629      	mov	r1, r5
 800248c:	028b      	lsls	r3, r1, #10
 800248e:	4621      	mov	r1, r4
 8002490:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002494:	4621      	mov	r1, r4
 8002496:	028a      	lsls	r2, r1, #10
 8002498:	4610      	mov	r0, r2
 800249a:	4619      	mov	r1, r3
 800249c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800249e:	2200      	movs	r2, #0
 80024a0:	61bb      	str	r3, [r7, #24]
 80024a2:	61fa      	str	r2, [r7, #28]
 80024a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024a8:	f7fd fece 	bl	8000248 <__aeabi_uldivmod>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4613      	mov	r3, r2
 80024b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80024b4:	4b0b      	ldr	r3, [pc, #44]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	0c1b      	lsrs	r3, r3, #16
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	3301      	adds	r3, #1
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80024c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80024c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024ce:	e002      	b.n	80024d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024d0:	4b05      	ldr	r3, [pc, #20]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80024d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3750      	adds	r7, #80	@ 0x50
 80024dc:	46bd      	mov	sp, r7
 80024de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024e2:	bf00      	nop
 80024e4:	40023800 	.word	0x40023800
 80024e8:	00f42400 	.word	0x00f42400
 80024ec:	007a1200 	.word	0x007a1200

080024f0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024f4:	4b03      	ldr	r3, [pc, #12]	@ (8002504 <HAL_RCC_GetHCLKFreq+0x14>)
 80024f6:	681b      	ldr	r3, [r3, #0]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	20000008 	.word	0x20000008

08002508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800250c:	f7ff fff0 	bl	80024f0 <HAL_RCC_GetHCLKFreq>
 8002510:	4602      	mov	r2, r0
 8002512:	4b05      	ldr	r3, [pc, #20]	@ (8002528 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	0a9b      	lsrs	r3, r3, #10
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	4903      	ldr	r1, [pc, #12]	@ (800252c <HAL_RCC_GetPCLK1Freq+0x24>)
 800251e:	5ccb      	ldrb	r3, [r1, r3]
 8002520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002524:	4618      	mov	r0, r3
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40023800 	.word	0x40023800
 800252c:	080045c4 	.word	0x080045c4

08002530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002534:	f7ff ffdc 	bl	80024f0 <HAL_RCC_GetHCLKFreq>
 8002538:	4602      	mov	r2, r0
 800253a:	4b05      	ldr	r3, [pc, #20]	@ (8002550 <HAL_RCC_GetPCLK2Freq+0x20>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	0b5b      	lsrs	r3, r3, #13
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	4903      	ldr	r1, [pc, #12]	@ (8002554 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002546:	5ccb      	ldrb	r3, [r1, r3]
 8002548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800254c:	4618      	mov	r0, r3
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40023800 	.word	0x40023800
 8002554:	080045c4 	.word	0x080045c4

08002558 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800256c:	2300      	movs	r3, #0
 800256e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b00      	cmp	r3, #0
 800257e:	d012      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002580:	4b69      	ldr	r3, [pc, #420]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	4a68      	ldr	r2, [pc, #416]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002586:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800258a:	6093      	str	r3, [r2, #8]
 800258c:	4b66      	ldr	r3, [pc, #408]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002594:	4964      	ldr	r1, [pc, #400]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002596:	4313      	orrs	r3, r2
 8002598:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80025a2:	2301      	movs	r3, #1
 80025a4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d017      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025b2:	4b5d      	ldr	r3, [pc, #372]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025b8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c0:	4959      	ldr	r1, [pc, #356]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025d0:	d101      	bne.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80025d2:	2301      	movs	r3, #1
 80025d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80025de:	2301      	movs	r3, #1
 80025e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d017      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025ee:	4b4e      	ldr	r3, [pc, #312]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025f4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fc:	494a      	ldr	r1, [pc, #296]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002608:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800260c:	d101      	bne.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800260e:	2301      	movs	r3, #1
 8002610:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800261a:	2301      	movs	r3, #1
 800261c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800262a:	2301      	movs	r3, #1
 800262c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0320 	and.w	r3, r3, #32
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 808b 	beq.w	8002752 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800263c:	4b3a      	ldr	r3, [pc, #232]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800263e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002640:	4a39      	ldr	r2, [pc, #228]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002642:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002646:	6413      	str	r3, [r2, #64]	@ 0x40
 8002648:	4b37      	ldr	r3, [pc, #220]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800264a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002654:	4b35      	ldr	r3, [pc, #212]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a34      	ldr	r2, [pc, #208]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800265a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800265e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002660:	f7fe fc04 	bl	8000e6c <HAL_GetTick>
 8002664:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002666:	e008      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002668:	f7fe fc00 	bl	8000e6c <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b64      	cmp	r3, #100	@ 0x64
 8002674:	d901      	bls.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e38f      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800267a:	4b2c      	ldr	r3, [pc, #176]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f0      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002686:	4b28      	ldr	r3, [pc, #160]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800268a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800268e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d035      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d02e      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026a4:	4b20      	ldr	r3, [pc, #128]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026b8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026be:	4a1a      	ldr	r2, [pc, #104]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026c4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80026c6:	4a18      	ldr	r2, [pc, #96]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80026cc:	4b16      	ldr	r3, [pc, #88]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d114      	bne.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d8:	f7fe fbc8 	bl	8000e6c <HAL_GetTick>
 80026dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026de:	e00a      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026e0:	f7fe fbc4 	bl	8000e6c <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e351      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0ee      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002706:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800270a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800270e:	d111      	bne.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002710:	4b05      	ldr	r3, [pc, #20]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800271c:	4b04      	ldr	r3, [pc, #16]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800271e:	400b      	ands	r3, r1
 8002720:	4901      	ldr	r1, [pc, #4]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002722:	4313      	orrs	r3, r2
 8002724:	608b      	str	r3, [r1, #8]
 8002726:	e00b      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002728:	40023800 	.word	0x40023800
 800272c:	40007000 	.word	0x40007000
 8002730:	0ffffcff 	.word	0x0ffffcff
 8002734:	4bac      	ldr	r3, [pc, #688]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	4aab      	ldr	r2, [pc, #684]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800273a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800273e:	6093      	str	r3, [r2, #8]
 8002740:	4ba9      	ldr	r3, [pc, #676]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002742:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800274c:	49a6      	ldr	r1, [pc, #664]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800274e:	4313      	orrs	r3, r2
 8002750:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0310 	and.w	r3, r3, #16
 800275a:	2b00      	cmp	r3, #0
 800275c:	d010      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800275e:	4ba2      	ldr	r3, [pc, #648]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002760:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002764:	4aa0      	ldr	r2, [pc, #640]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002766:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800276a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800276e:	4b9e      	ldr	r3, [pc, #632]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002770:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002778:	499b      	ldr	r1, [pc, #620]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800277a:	4313      	orrs	r3, r2
 800277c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00a      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800278c:	4b96      	ldr	r3, [pc, #600]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800278e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002792:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800279a:	4993      	ldr	r1, [pc, #588]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00a      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027ae:	4b8e      	ldr	r3, [pc, #568]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027bc:	498a      	ldr	r1, [pc, #552]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00a      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027d0:	4b85      	ldr	r3, [pc, #532]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027de:	4982      	ldr	r1, [pc, #520]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00a      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80027f2:	4b7d      	ldr	r3, [pc, #500]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002800:	4979      	ldr	r1, [pc, #484]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002802:	4313      	orrs	r3, r2
 8002804:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00a      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002814:	4b74      	ldr	r3, [pc, #464]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800281a:	f023 0203 	bic.w	r2, r3, #3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002822:	4971      	ldr	r1, [pc, #452]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002836:	4b6c      	ldr	r3, [pc, #432]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800283c:	f023 020c 	bic.w	r2, r3, #12
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002844:	4968      	ldr	r1, [pc, #416]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00a      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002858:	4b63      	ldr	r3, [pc, #396]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800285a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800285e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002866:	4960      	ldr	r1, [pc, #384]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800287a:	4b5b      	ldr	r3, [pc, #364]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800287c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002880:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002888:	4957      	ldr	r1, [pc, #348]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00a      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800289c:	4b52      	ldr	r3, [pc, #328]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800289e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028aa:	494f      	ldr	r1, [pc, #316]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80028be:	4b4a      	ldr	r3, [pc, #296]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028cc:	4946      	ldr	r1, [pc, #280]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00a      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80028e0:	4b41      	ldr	r3, [pc, #260]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ee:	493e      	ldr	r1, [pc, #248]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002902:	4b39      	ldr	r3, [pc, #228]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002908:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002910:	4935      	ldr	r1, [pc, #212]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002924:	4b30      	ldr	r3, [pc, #192]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800292a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002932:	492d      	ldr	r1, [pc, #180]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d011      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002946:	4b28      	ldr	r3, [pc, #160]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800294c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002954:	4924      	ldr	r1, [pc, #144]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002960:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002964:	d101      	bne.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002966:	2301      	movs	r3, #1
 8002968:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002976:	2301      	movs	r3, #1
 8002978:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00a      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002986:	4b18      	ldr	r3, [pc, #96]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800298c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002994:	4914      	ldr	r1, [pc, #80]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00b      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029a8:	4b0f      	ldr	r3, [pc, #60]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ae:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029b8:	490b      	ldr	r1, [pc, #44]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00f      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80029cc:	4b06      	ldr	r3, [pc, #24]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029dc:	4902      	ldr	r1, [pc, #8]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80029e4:	e002      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x494>
 80029e6:	bf00      	nop
 80029e8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00b      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029f8:	4b8a      	ldr	r3, [pc, #552]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029fe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a08:	4986      	ldr	r1, [pc, #536]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00b      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002a1c:	4b81      	ldr	r3, [pc, #516]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a22:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a2c:	497d      	ldr	r1, [pc, #500]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d006      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 80d6 	beq.w	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a48:	4b76      	ldr	r3, [pc, #472]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a75      	ldr	r2, [pc, #468]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a54:	f7fe fa0a 	bl	8000e6c <HAL_GetTick>
 8002a58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a5c:	f7fe fa06 	bl	8000e6c <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b64      	cmp	r3, #100	@ 0x64
 8002a68:	d901      	bls.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e195      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a6e:	4b6d      	ldr	r3, [pc, #436]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d021      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d11d      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a8e:	4b65      	ldr	r3, [pc, #404]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a94:	0c1b      	lsrs	r3, r3, #16
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a9c:	4b61      	ldr	r3, [pc, #388]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002aa2:	0e1b      	lsrs	r3, r3, #24
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	019a      	lsls	r2, r3, #6
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	041b      	lsls	r3, r3, #16
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	061b      	lsls	r3, r3, #24
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	071b      	lsls	r3, r3, #28
 8002ac2:	4958      	ldr	r1, [pc, #352]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d004      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ada:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ade:	d00a      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d02e      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002af4:	d129      	bne.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002af6:	4b4b      	ldr	r3, [pc, #300]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002afc:	0c1b      	lsrs	r3, r3, #16
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b04:	4b47      	ldr	r3, [pc, #284]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b0a:	0f1b      	lsrs	r3, r3, #28
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	019a      	lsls	r2, r3, #6
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	041b      	lsls	r3, r3, #16
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	061b      	lsls	r3, r3, #24
 8002b24:	431a      	orrs	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	071b      	lsls	r3, r3, #28
 8002b2a:	493e      	ldr	r1, [pc, #248]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b32:	4b3c      	ldr	r3, [pc, #240]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b38:	f023 021f 	bic.w	r2, r3, #31
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b40:	3b01      	subs	r3, #1
 8002b42:	4938      	ldr	r1, [pc, #224]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d01d      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b56:	4b33      	ldr	r3, [pc, #204]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b5c:	0e1b      	lsrs	r3, r3, #24
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b64:	4b2f      	ldr	r3, [pc, #188]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b6a:	0f1b      	lsrs	r3, r3, #28
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	019a      	lsls	r2, r3, #6
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	041b      	lsls	r3, r3, #16
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	061b      	lsls	r3, r3, #24
 8002b84:	431a      	orrs	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	071b      	lsls	r3, r3, #28
 8002b8a:	4926      	ldr	r1, [pc, #152]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d011      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	019a      	lsls	r2, r3, #6
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	041b      	lsls	r3, r3, #16
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	061b      	lsls	r3, r3, #24
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	071b      	lsls	r3, r3, #28
 8002bba:	491a      	ldr	r1, [pc, #104]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002bc2:	4b18      	ldr	r3, [pc, #96]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a17      	ldr	r2, [pc, #92]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bc8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002bcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bce:	f7fe f94d 	bl	8000e6c <HAL_GetTick>
 8002bd2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bd4:	e008      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002bd6:	f7fe f949 	bl	8000e6c <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b64      	cmp	r3, #100	@ 0x64
 8002be2:	d901      	bls.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e0d8      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002be8:	4b0e      	ldr	r3, [pc, #56]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0f0      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	f040 80ce 	bne.w	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002bfc:	4b09      	ldr	r3, [pc, #36]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a08      	ldr	r2, [pc, #32]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c08:	f7fe f930 	bl	8000e6c <HAL_GetTick>
 8002c0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c0e:	e00b      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c10:	f7fe f92c 	bl	8000e6c <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b64      	cmp	r3, #100	@ 0x64
 8002c1c:	d904      	bls.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e0bb      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002c22:	bf00      	nop
 8002c24:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c28:	4b5e      	ldr	r3, [pc, #376]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c34:	d0ec      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d009      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d02e      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d12a      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c5e:	4b51      	ldr	r3, [pc, #324]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c64:	0c1b      	lsrs	r3, r3, #16
 8002c66:	f003 0303 	and.w	r3, r3, #3
 8002c6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c6c:	4b4d      	ldr	r3, [pc, #308]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c72:	0f1b      	lsrs	r3, r3, #28
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	019a      	lsls	r2, r3, #6
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	041b      	lsls	r3, r3, #16
 8002c84:	431a      	orrs	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	061b      	lsls	r3, r3, #24
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	071b      	lsls	r3, r3, #28
 8002c92:	4944      	ldr	r1, [pc, #272]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c9a:	4b42      	ldr	r3, [pc, #264]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ca0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	021b      	lsls	r3, r3, #8
 8002cac:	493d      	ldr	r1, [pc, #244]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d022      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002cc8:	d11d      	bne.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002cca:	4b36      	ldr	r3, [pc, #216]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd0:	0e1b      	lsrs	r3, r3, #24
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002cd8:	4b32      	ldr	r3, [pc, #200]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cde:	0f1b      	lsrs	r3, r3, #28
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	019a      	lsls	r2, r3, #6
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	041b      	lsls	r3, r3, #16
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	061b      	lsls	r3, r3, #24
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	071b      	lsls	r3, r3, #28
 8002cfe:	4929      	ldr	r1, [pc, #164]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d028      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d12:	4b24      	ldr	r3, [pc, #144]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d18:	0e1b      	lsrs	r3, r3, #24
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d20:	4b20      	ldr	r3, [pc, #128]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d26:	0c1b      	lsrs	r3, r3, #16
 8002d28:	f003 0303 	and.w	r3, r3, #3
 8002d2c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	019a      	lsls	r2, r3, #6
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	041b      	lsls	r3, r3, #16
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	061b      	lsls	r3, r3, #24
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	071b      	lsls	r3, r3, #28
 8002d46:	4917      	ldr	r1, [pc, #92]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002d4e:	4b15      	ldr	r3, [pc, #84]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d54:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5c:	4911      	ldr	r1, [pc, #68]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002d64:	4b0f      	ldr	r3, [pc, #60]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a0e      	ldr	r2, [pc, #56]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d70:	f7fe f87c 	bl	8000e6c <HAL_GetTick>
 8002d74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d78:	f7fe f878 	bl	8000e6c <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b64      	cmp	r3, #100	@ 0x64
 8002d84:	d901      	bls.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e007      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d8a:	4b06      	ldr	r3, [pc, #24]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d96:	d1ef      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3720      	adds	r7, #32
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40023800 	.word	0x40023800

08002da8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e040      	b.n	8002e3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d106      	bne.n	8002dd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7fd feca 	bl	8000b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2224      	movs	r2, #36	@ 0x24
 8002dd4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0201 	bic.w	r2, r2, #1
 8002de4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d002      	beq.n	8002df4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 fe86 	bl	8003b00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 fc1f 	bl	8003638 <UART_SetConfig>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e01b      	b.n	8002e3c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0201 	orr.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 ff05 	bl	8003c44 <UART_CheckIdleState>
 8002e3a:	4603      	mov	r3, r0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08a      	sub	sp, #40	@ 0x28
 8002e48:	af02      	add	r7, sp, #8
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	4613      	mov	r3, r2
 8002e52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e58:	2b20      	cmp	r3, #32
 8002e5a:	d177      	bne.n	8002f4c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <HAL_UART_Transmit+0x24>
 8002e62:	88fb      	ldrh	r3, [r7, #6]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e070      	b.n	8002f4e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2221      	movs	r2, #33	@ 0x21
 8002e78:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e7a:	f7fd fff7 	bl	8000e6c <HAL_GetTick>
 8002e7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	88fa      	ldrh	r2, [r7, #6]
 8002e84:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	88fa      	ldrh	r2, [r7, #6]
 8002e8c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e98:	d108      	bne.n	8002eac <HAL_UART_Transmit+0x68>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d104      	bne.n	8002eac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	61bb      	str	r3, [r7, #24]
 8002eaa:	e003      	b.n	8002eb4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002eb4:	e02f      	b.n	8002f16 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	2180      	movs	r1, #128	@ 0x80
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 ff67 	bl	8003d94 <UART_WaitOnFlagUntilTimeout>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d004      	beq.n	8002ed6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e03b      	b.n	8002f4e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10b      	bne.n	8002ef4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	3302      	adds	r3, #2
 8002ef0:	61bb      	str	r3, [r7, #24]
 8002ef2:	e007      	b.n	8002f04 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	781a      	ldrb	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	3301      	adds	r3, #1
 8002f02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1c9      	bne.n	8002eb6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2140      	movs	r1, #64	@ 0x40
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 ff31 	bl	8003d94 <UART_WaitOnFlagUntilTimeout>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d004      	beq.n	8002f42 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e005      	b.n	8002f4e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2220      	movs	r2, #32
 8002f46:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	e000      	b.n	8002f4e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002f4c:	2302      	movs	r3, #2
  }
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3720      	adds	r7, #32
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b08a      	sub	sp, #40	@ 0x28
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	4613      	mov	r3, r2
 8002f62:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f6a:	2b20      	cmp	r3, #32
 8002f6c:	d132      	bne.n	8002fd4 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d002      	beq.n	8002f7a <HAL_UART_Receive_IT+0x24>
 8002f74:	88fb      	ldrh	r3, [r7, #6]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e02b      	b.n	8002fd6 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d018      	beq.n	8002fc4 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	e853 3f00 	ldrex	r3, [r3]
 8002f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002fa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb0:	623b      	str	r3, [r7, #32]
 8002fb2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb4:	69f9      	ldr	r1, [r7, #28]
 8002fb6:	6a3a      	ldr	r2, [r7, #32]
 8002fb8:	e841 2300 	strex	r3, r2, [r1]
 8002fbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1e6      	bne.n	8002f92 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002fc4:	88fb      	ldrh	r3, [r7, #6]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	68b9      	ldr	r1, [r7, #8]
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 ff50 	bl	8003e70 <UART_Start_Receive_IT>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	e000      	b.n	8002fd6 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002fd4:	2302      	movs	r3, #2
  }
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3728      	adds	r7, #40	@ 0x28
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
	...

08002fe0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b0ba      	sub	sp, #232	@ 0xe8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003006:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800300a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800300e:	4013      	ands	r3, r2
 8003010:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003014:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003018:	2b00      	cmp	r3, #0
 800301a:	d115      	bne.n	8003048 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800301c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003020:	f003 0320 	and.w	r3, r3, #32
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00f      	beq.n	8003048 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800302c:	f003 0320 	and.w	r3, r3, #32
 8003030:	2b00      	cmp	r3, #0
 8003032:	d009      	beq.n	8003048 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 82c6 	beq.w	80035ca <HAL_UART_IRQHandler+0x5ea>
      {
        huart->RxISR(huart);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	4798      	blx	r3
      }
      return;
 8003046:	e2c0      	b.n	80035ca <HAL_UART_IRQHandler+0x5ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003048:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 8117 	beq.w	8003280 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d106      	bne.n	800306c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800305e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003062:	4b85      	ldr	r3, [pc, #532]	@ (8003278 <HAL_UART_IRQHandler+0x298>)
 8003064:	4013      	ands	r3, r2
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 810a 	beq.w	8003280 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800306c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d011      	beq.n	800309c <HAL_UART_IRQHandler+0xbc>
 8003078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800307c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00b      	beq.n	800309c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2201      	movs	r2, #1
 800308a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003092:	f043 0201 	orr.w	r2, r3, #1
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800309c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d011      	beq.n	80030cc <HAL_UART_IRQHandler+0xec>
 80030a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00b      	beq.n	80030cc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2202      	movs	r2, #2
 80030ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030c2:	f043 0204 	orr.w	r2, r3, #4
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d011      	beq.n	80030fc <HAL_UART_IRQHandler+0x11c>
 80030d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00b      	beq.n	80030fc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2204      	movs	r2, #4
 80030ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030f2:	f043 0202 	orr.w	r2, r3, #2
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80030fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003100:	f003 0308 	and.w	r3, r3, #8
 8003104:	2b00      	cmp	r3, #0
 8003106:	d017      	beq.n	8003138 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800310c:	f003 0320 	and.w	r3, r3, #32
 8003110:	2b00      	cmp	r3, #0
 8003112:	d105      	bne.n	8003120 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003118:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00b      	beq.n	8003138 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2208      	movs	r2, #8
 8003126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800312e:	f043 0208 	orr.w	r2, r3, #8
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800313c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003140:	2b00      	cmp	r3, #0
 8003142:	d012      	beq.n	800316a <HAL_UART_IRQHandler+0x18a>
 8003144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003148:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00c      	beq.n	800316a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003158:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003160:	f043 0220 	orr.w	r2, r3, #32
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 822c 	beq.w	80035ce <HAL_UART_IRQHandler+0x5ee>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800317a:	f003 0320 	and.w	r3, r3, #32
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00d      	beq.n	800319e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003186:	f003 0320 	and.w	r3, r3, #32
 800318a:	2b00      	cmp	r3, #0
 800318c:	d007      	beq.n	800319e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b2:	2b40      	cmp	r3, #64	@ 0x40
 80031b4:	d005      	beq.n	80031c2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d04f      	beq.n	8003262 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 ff1a 	bl	8003ffc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d2:	2b40      	cmp	r3, #64	@ 0x40
 80031d4:	d141      	bne.n	800325a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	3308      	adds	r3, #8
 80031dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031e4:	e853 3f00 	ldrex	r3, [r3]
 80031e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80031ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3308      	adds	r3, #8
 80031fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003202:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003206:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800320e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003212:	e841 2300 	strex	r3, r2, [r1]
 8003216:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800321a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1d9      	bne.n	80031d6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003226:	2b00      	cmp	r3, #0
 8003228:	d013      	beq.n	8003252 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800322e:	4a13      	ldr	r2, [pc, #76]	@ (800327c <HAL_UART_IRQHandler+0x29c>)
 8003230:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003236:	4618      	mov	r0, r3
 8003238:	f7fd ffc9 	bl	80011ce <HAL_DMA_Abort_IT>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d017      	beq.n	8003272 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003246:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800324c:	4610      	mov	r0, r2
 800324e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003250:	e00f      	b.n	8003272 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f9d0 	bl	80035f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003258:	e00b      	b.n	8003272 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f9cc 	bl	80035f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003260:	e007      	b.n	8003272 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f9c8 	bl	80035f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003270:	e1ad      	b.n	80035ce <HAL_UART_IRQHandler+0x5ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003272:	bf00      	nop
    return;
 8003274:	e1ab      	b.n	80035ce <HAL_UART_IRQHandler+0x5ee>
 8003276:	bf00      	nop
 8003278:	04000120 	.word	0x04000120
 800327c:	080040c5 	.word	0x080040c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003284:	2b01      	cmp	r3, #1
 8003286:	f040 8166 	bne.w	8003556 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800328a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800328e:	f003 0310 	and.w	r3, r3, #16
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 815f 	beq.w	8003556 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800329c:	f003 0310 	and.w	r3, r3, #16
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 8158 	beq.w	8003556 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2210      	movs	r2, #16
 80032ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b8:	2b40      	cmp	r3, #64	@ 0x40
 80032ba:	f040 80d0 	bne.w	800345e <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032ca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 80ab 	beq.w	800342a <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80032da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032de:	429a      	cmp	r2, r3
 80032e0:	f080 80a3 	bcs.w	800342a <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032f8:	f000 8086 	beq.w	8003408 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003304:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003308:	e853 3f00 	ldrex	r3, [r3]
 800330c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003310:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003318:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	461a      	mov	r2, r3
 8003322:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003326:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800332a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003332:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003336:	e841 2300 	strex	r3, r2, [r1]
 800333a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800333e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1da      	bne.n	80032fc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	3308      	adds	r3, #8
 800334c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003350:	e853 3f00 	ldrex	r3, [r3]
 8003354:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003356:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003358:	f023 0301 	bic.w	r3, r3, #1
 800335c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	3308      	adds	r3, #8
 8003366:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800336a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800336e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003370:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003372:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003376:	e841 2300 	strex	r3, r2, [r1]
 800337a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800337c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1e1      	bne.n	8003346 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	3308      	adds	r3, #8
 8003388:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800338c:	e853 3f00 	ldrex	r3, [r3]
 8003390:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003392:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003394:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003398:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	3308      	adds	r3, #8
 80033a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80033a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80033a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80033ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80033ae:	e841 2300 	strex	r3, r2, [r1]
 80033b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80033b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1e3      	bne.n	8003382 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2220      	movs	r2, #32
 80033be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033d0:	e853 3f00 	ldrex	r3, [r3]
 80033d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80033d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033d8:	f023 0310 	bic.w	r3, r3, #16
 80033dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	461a      	mov	r2, r3
 80033e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80033ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80033f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033f2:	e841 2300 	strex	r3, r2, [r1]
 80033f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80033f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1e4      	bne.n	80033c8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003402:	4618      	mov	r0, r3
 8003404:	f7fd fe73 	bl	80010ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800341a:	b29b      	uxth	r3, r3
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	b29b      	uxth	r3, r3
 8003420:	4619      	mov	r1, r3
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f8f2 	bl	800360c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003428:	e0d3      	b.n	80035d2 <HAL_UART_IRQHandler+0x5f2>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003430:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003434:	429a      	cmp	r2, r3
 8003436:	f040 80cc 	bne.w	80035d2 <HAL_UART_IRQHandler+0x5f2>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003444:	f040 80c5 	bne.w	80035d2 <HAL_UART_IRQHandler+0x5f2>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003454:	4619      	mov	r1, r3
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f8d8 	bl	800360c <HAL_UARTEx_RxEventCallback>
      return;
 800345c:	e0b9      	b.n	80035d2 <HAL_UART_IRQHandler+0x5f2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800346a:	b29b      	uxth	r3, r3
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003478:	b29b      	uxth	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 80ab 	beq.w	80035d6 <HAL_UART_IRQHandler+0x5f6>
          && (nb_rx_data > 0U))
 8003480:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 80a6 	beq.w	80035d6 <HAL_UART_IRQHandler+0x5f6>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003492:	e853 3f00 	ldrex	r3, [r3]
 8003496:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800349a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800349e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	461a      	mov	r2, r3
 80034a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80034ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80034ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034b4:	e841 2300 	strex	r3, r2, [r1]
 80034b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1e4      	bne.n	800348a <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	3308      	adds	r3, #8
 80034c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ca:	e853 3f00 	ldrex	r3, [r3]
 80034ce:	623b      	str	r3, [r7, #32]
   return(result);
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	f023 0301 	bic.w	r3, r3, #1
 80034d6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	3308      	adds	r3, #8
 80034e0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80034e4:	633a      	str	r2, [r7, #48]	@ 0x30
 80034e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034ec:	e841 2300 	strex	r3, r2, [r1]
 80034f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1e3      	bne.n	80034c0 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	e853 3f00 	ldrex	r3, [r3]
 8003518:	60fb      	str	r3, [r7, #12]
   return(result);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f023 0310 	bic.w	r3, r3, #16
 8003520:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	461a      	mov	r2, r3
 800352a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800352e:	61fb      	str	r3, [r7, #28]
 8003530:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003532:	69b9      	ldr	r1, [r7, #24]
 8003534:	69fa      	ldr	r2, [r7, #28]
 8003536:	e841 2300 	strex	r3, r2, [r1]
 800353a:	617b      	str	r3, [r7, #20]
   return(result);
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1e4      	bne.n	800350c <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2202      	movs	r2, #2
 8003546:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003548:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800354c:	4619      	mov	r1, r3
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f85c 	bl	800360c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003554:	e03f      	b.n	80035d6 <HAL_UART_IRQHandler+0x5f6>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800355a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00e      	beq.n	8003580 <HAL_UART_IRQHandler+0x5a0>
 8003562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003566:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d008      	beq.n	8003580 <HAL_UART_IRQHandler+0x5a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003576:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f853 	bl	8003624 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800357e:	e02d      	b.n	80035dc <HAL_UART_IRQHandler+0x5fc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003584:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00e      	beq.n	80035aa <HAL_UART_IRQHandler+0x5ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800358c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003590:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003594:	2b00      	cmp	r3, #0
 8003596:	d008      	beq.n	80035aa <HAL_UART_IRQHandler+0x5ca>
  {
    if (huart->TxISR != NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800359c:	2b00      	cmp	r3, #0
 800359e:	d01c      	beq.n	80035da <HAL_UART_IRQHandler+0x5fa>
    {
      huart->TxISR(huart);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	4798      	blx	r3
    }
    return;
 80035a8:	e017      	b.n	80035da <HAL_UART_IRQHandler+0x5fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80035aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d012      	beq.n	80035dc <HAL_UART_IRQHandler+0x5fc>
 80035b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00c      	beq.n	80035dc <HAL_UART_IRQHandler+0x5fc>
  {
    UART_EndTransmit_IT(huart);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 fd90 	bl	80040e8 <UART_EndTransmit_IT>
    return;
 80035c8:	e008      	b.n	80035dc <HAL_UART_IRQHandler+0x5fc>
      return;
 80035ca:	bf00      	nop
 80035cc:	e006      	b.n	80035dc <HAL_UART_IRQHandler+0x5fc>
    return;
 80035ce:	bf00      	nop
 80035d0:	e004      	b.n	80035dc <HAL_UART_IRQHandler+0x5fc>
      return;
 80035d2:	bf00      	nop
 80035d4:	e002      	b.n	80035dc <HAL_UART_IRQHandler+0x5fc>
      return;
 80035d6:	bf00      	nop
 80035d8:	e000      	b.n	80035dc <HAL_UART_IRQHandler+0x5fc>
    return;
 80035da:	bf00      	nop
  }

}
 80035dc:	37e8      	adds	r7, #232	@ 0xe8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop

080035e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b088      	sub	sp, #32
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003640:	2300      	movs	r3, #0
 8003642:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	431a      	orrs	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	4313      	orrs	r3, r2
 800365a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	4ba6      	ldr	r3, [pc, #664]	@ (80038fc <UART_SetConfig+0x2c4>)
 8003664:	4013      	ands	r3, r2
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6812      	ldr	r2, [r2, #0]
 800366a:	6979      	ldr	r1, [r7, #20]
 800366c:	430b      	orrs	r3, r1
 800366e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	4313      	orrs	r3, r2
 8003694:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a94      	ldr	r2, [pc, #592]	@ (8003900 <UART_SetConfig+0x2c8>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d120      	bne.n	80036f6 <UART_SetConfig+0xbe>
 80036b4:	4b93      	ldr	r3, [pc, #588]	@ (8003904 <UART_SetConfig+0x2cc>)
 80036b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	2b03      	cmp	r3, #3
 80036c0:	d816      	bhi.n	80036f0 <UART_SetConfig+0xb8>
 80036c2:	a201      	add	r2, pc, #4	@ (adr r2, 80036c8 <UART_SetConfig+0x90>)
 80036c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c8:	080036d9 	.word	0x080036d9
 80036cc:	080036e5 	.word	0x080036e5
 80036d0:	080036df 	.word	0x080036df
 80036d4:	080036eb 	.word	0x080036eb
 80036d8:	2301      	movs	r3, #1
 80036da:	77fb      	strb	r3, [r7, #31]
 80036dc:	e150      	b.n	8003980 <UART_SetConfig+0x348>
 80036de:	2302      	movs	r3, #2
 80036e0:	77fb      	strb	r3, [r7, #31]
 80036e2:	e14d      	b.n	8003980 <UART_SetConfig+0x348>
 80036e4:	2304      	movs	r3, #4
 80036e6:	77fb      	strb	r3, [r7, #31]
 80036e8:	e14a      	b.n	8003980 <UART_SetConfig+0x348>
 80036ea:	2308      	movs	r3, #8
 80036ec:	77fb      	strb	r3, [r7, #31]
 80036ee:	e147      	b.n	8003980 <UART_SetConfig+0x348>
 80036f0:	2310      	movs	r3, #16
 80036f2:	77fb      	strb	r3, [r7, #31]
 80036f4:	e144      	b.n	8003980 <UART_SetConfig+0x348>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a83      	ldr	r2, [pc, #524]	@ (8003908 <UART_SetConfig+0x2d0>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d132      	bne.n	8003766 <UART_SetConfig+0x12e>
 8003700:	4b80      	ldr	r3, [pc, #512]	@ (8003904 <UART_SetConfig+0x2cc>)
 8003702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	2b0c      	cmp	r3, #12
 800370c:	d828      	bhi.n	8003760 <UART_SetConfig+0x128>
 800370e:	a201      	add	r2, pc, #4	@ (adr r2, 8003714 <UART_SetConfig+0xdc>)
 8003710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003714:	08003749 	.word	0x08003749
 8003718:	08003761 	.word	0x08003761
 800371c:	08003761 	.word	0x08003761
 8003720:	08003761 	.word	0x08003761
 8003724:	08003755 	.word	0x08003755
 8003728:	08003761 	.word	0x08003761
 800372c:	08003761 	.word	0x08003761
 8003730:	08003761 	.word	0x08003761
 8003734:	0800374f 	.word	0x0800374f
 8003738:	08003761 	.word	0x08003761
 800373c:	08003761 	.word	0x08003761
 8003740:	08003761 	.word	0x08003761
 8003744:	0800375b 	.word	0x0800375b
 8003748:	2300      	movs	r3, #0
 800374a:	77fb      	strb	r3, [r7, #31]
 800374c:	e118      	b.n	8003980 <UART_SetConfig+0x348>
 800374e:	2302      	movs	r3, #2
 8003750:	77fb      	strb	r3, [r7, #31]
 8003752:	e115      	b.n	8003980 <UART_SetConfig+0x348>
 8003754:	2304      	movs	r3, #4
 8003756:	77fb      	strb	r3, [r7, #31]
 8003758:	e112      	b.n	8003980 <UART_SetConfig+0x348>
 800375a:	2308      	movs	r3, #8
 800375c:	77fb      	strb	r3, [r7, #31]
 800375e:	e10f      	b.n	8003980 <UART_SetConfig+0x348>
 8003760:	2310      	movs	r3, #16
 8003762:	77fb      	strb	r3, [r7, #31]
 8003764:	e10c      	b.n	8003980 <UART_SetConfig+0x348>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a68      	ldr	r2, [pc, #416]	@ (800390c <UART_SetConfig+0x2d4>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d120      	bne.n	80037b2 <UART_SetConfig+0x17a>
 8003770:	4b64      	ldr	r3, [pc, #400]	@ (8003904 <UART_SetConfig+0x2cc>)
 8003772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003776:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800377a:	2b30      	cmp	r3, #48	@ 0x30
 800377c:	d013      	beq.n	80037a6 <UART_SetConfig+0x16e>
 800377e:	2b30      	cmp	r3, #48	@ 0x30
 8003780:	d814      	bhi.n	80037ac <UART_SetConfig+0x174>
 8003782:	2b20      	cmp	r3, #32
 8003784:	d009      	beq.n	800379a <UART_SetConfig+0x162>
 8003786:	2b20      	cmp	r3, #32
 8003788:	d810      	bhi.n	80037ac <UART_SetConfig+0x174>
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <UART_SetConfig+0x15c>
 800378e:	2b10      	cmp	r3, #16
 8003790:	d006      	beq.n	80037a0 <UART_SetConfig+0x168>
 8003792:	e00b      	b.n	80037ac <UART_SetConfig+0x174>
 8003794:	2300      	movs	r3, #0
 8003796:	77fb      	strb	r3, [r7, #31]
 8003798:	e0f2      	b.n	8003980 <UART_SetConfig+0x348>
 800379a:	2302      	movs	r3, #2
 800379c:	77fb      	strb	r3, [r7, #31]
 800379e:	e0ef      	b.n	8003980 <UART_SetConfig+0x348>
 80037a0:	2304      	movs	r3, #4
 80037a2:	77fb      	strb	r3, [r7, #31]
 80037a4:	e0ec      	b.n	8003980 <UART_SetConfig+0x348>
 80037a6:	2308      	movs	r3, #8
 80037a8:	77fb      	strb	r3, [r7, #31]
 80037aa:	e0e9      	b.n	8003980 <UART_SetConfig+0x348>
 80037ac:	2310      	movs	r3, #16
 80037ae:	77fb      	strb	r3, [r7, #31]
 80037b0:	e0e6      	b.n	8003980 <UART_SetConfig+0x348>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a56      	ldr	r2, [pc, #344]	@ (8003910 <UART_SetConfig+0x2d8>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d120      	bne.n	80037fe <UART_SetConfig+0x1c6>
 80037bc:	4b51      	ldr	r3, [pc, #324]	@ (8003904 <UART_SetConfig+0x2cc>)
 80037be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80037c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80037c8:	d013      	beq.n	80037f2 <UART_SetConfig+0x1ba>
 80037ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80037cc:	d814      	bhi.n	80037f8 <UART_SetConfig+0x1c0>
 80037ce:	2b80      	cmp	r3, #128	@ 0x80
 80037d0:	d009      	beq.n	80037e6 <UART_SetConfig+0x1ae>
 80037d2:	2b80      	cmp	r3, #128	@ 0x80
 80037d4:	d810      	bhi.n	80037f8 <UART_SetConfig+0x1c0>
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <UART_SetConfig+0x1a8>
 80037da:	2b40      	cmp	r3, #64	@ 0x40
 80037dc:	d006      	beq.n	80037ec <UART_SetConfig+0x1b4>
 80037de:	e00b      	b.n	80037f8 <UART_SetConfig+0x1c0>
 80037e0:	2300      	movs	r3, #0
 80037e2:	77fb      	strb	r3, [r7, #31]
 80037e4:	e0cc      	b.n	8003980 <UART_SetConfig+0x348>
 80037e6:	2302      	movs	r3, #2
 80037e8:	77fb      	strb	r3, [r7, #31]
 80037ea:	e0c9      	b.n	8003980 <UART_SetConfig+0x348>
 80037ec:	2304      	movs	r3, #4
 80037ee:	77fb      	strb	r3, [r7, #31]
 80037f0:	e0c6      	b.n	8003980 <UART_SetConfig+0x348>
 80037f2:	2308      	movs	r3, #8
 80037f4:	77fb      	strb	r3, [r7, #31]
 80037f6:	e0c3      	b.n	8003980 <UART_SetConfig+0x348>
 80037f8:	2310      	movs	r3, #16
 80037fa:	77fb      	strb	r3, [r7, #31]
 80037fc:	e0c0      	b.n	8003980 <UART_SetConfig+0x348>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a44      	ldr	r2, [pc, #272]	@ (8003914 <UART_SetConfig+0x2dc>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d125      	bne.n	8003854 <UART_SetConfig+0x21c>
 8003808:	4b3e      	ldr	r3, [pc, #248]	@ (8003904 <UART_SetConfig+0x2cc>)
 800380a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800380e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003812:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003816:	d017      	beq.n	8003848 <UART_SetConfig+0x210>
 8003818:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800381c:	d817      	bhi.n	800384e <UART_SetConfig+0x216>
 800381e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003822:	d00b      	beq.n	800383c <UART_SetConfig+0x204>
 8003824:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003828:	d811      	bhi.n	800384e <UART_SetConfig+0x216>
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <UART_SetConfig+0x1fe>
 800382e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003832:	d006      	beq.n	8003842 <UART_SetConfig+0x20a>
 8003834:	e00b      	b.n	800384e <UART_SetConfig+0x216>
 8003836:	2300      	movs	r3, #0
 8003838:	77fb      	strb	r3, [r7, #31]
 800383a:	e0a1      	b.n	8003980 <UART_SetConfig+0x348>
 800383c:	2302      	movs	r3, #2
 800383e:	77fb      	strb	r3, [r7, #31]
 8003840:	e09e      	b.n	8003980 <UART_SetConfig+0x348>
 8003842:	2304      	movs	r3, #4
 8003844:	77fb      	strb	r3, [r7, #31]
 8003846:	e09b      	b.n	8003980 <UART_SetConfig+0x348>
 8003848:	2308      	movs	r3, #8
 800384a:	77fb      	strb	r3, [r7, #31]
 800384c:	e098      	b.n	8003980 <UART_SetConfig+0x348>
 800384e:	2310      	movs	r3, #16
 8003850:	77fb      	strb	r3, [r7, #31]
 8003852:	e095      	b.n	8003980 <UART_SetConfig+0x348>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a2f      	ldr	r2, [pc, #188]	@ (8003918 <UART_SetConfig+0x2e0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d125      	bne.n	80038aa <UART_SetConfig+0x272>
 800385e:	4b29      	ldr	r3, [pc, #164]	@ (8003904 <UART_SetConfig+0x2cc>)
 8003860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003864:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003868:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800386c:	d017      	beq.n	800389e <UART_SetConfig+0x266>
 800386e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003872:	d817      	bhi.n	80038a4 <UART_SetConfig+0x26c>
 8003874:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003878:	d00b      	beq.n	8003892 <UART_SetConfig+0x25a>
 800387a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800387e:	d811      	bhi.n	80038a4 <UART_SetConfig+0x26c>
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <UART_SetConfig+0x254>
 8003884:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003888:	d006      	beq.n	8003898 <UART_SetConfig+0x260>
 800388a:	e00b      	b.n	80038a4 <UART_SetConfig+0x26c>
 800388c:	2301      	movs	r3, #1
 800388e:	77fb      	strb	r3, [r7, #31]
 8003890:	e076      	b.n	8003980 <UART_SetConfig+0x348>
 8003892:	2302      	movs	r3, #2
 8003894:	77fb      	strb	r3, [r7, #31]
 8003896:	e073      	b.n	8003980 <UART_SetConfig+0x348>
 8003898:	2304      	movs	r3, #4
 800389a:	77fb      	strb	r3, [r7, #31]
 800389c:	e070      	b.n	8003980 <UART_SetConfig+0x348>
 800389e:	2308      	movs	r3, #8
 80038a0:	77fb      	strb	r3, [r7, #31]
 80038a2:	e06d      	b.n	8003980 <UART_SetConfig+0x348>
 80038a4:	2310      	movs	r3, #16
 80038a6:	77fb      	strb	r3, [r7, #31]
 80038a8:	e06a      	b.n	8003980 <UART_SetConfig+0x348>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a1b      	ldr	r2, [pc, #108]	@ (800391c <UART_SetConfig+0x2e4>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d138      	bne.n	8003926 <UART_SetConfig+0x2ee>
 80038b4:	4b13      	ldr	r3, [pc, #76]	@ (8003904 <UART_SetConfig+0x2cc>)
 80038b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ba:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80038be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80038c2:	d017      	beq.n	80038f4 <UART_SetConfig+0x2bc>
 80038c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80038c8:	d82a      	bhi.n	8003920 <UART_SetConfig+0x2e8>
 80038ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038ce:	d00b      	beq.n	80038e8 <UART_SetConfig+0x2b0>
 80038d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038d4:	d824      	bhi.n	8003920 <UART_SetConfig+0x2e8>
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <UART_SetConfig+0x2aa>
 80038da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038de:	d006      	beq.n	80038ee <UART_SetConfig+0x2b6>
 80038e0:	e01e      	b.n	8003920 <UART_SetConfig+0x2e8>
 80038e2:	2300      	movs	r3, #0
 80038e4:	77fb      	strb	r3, [r7, #31]
 80038e6:	e04b      	b.n	8003980 <UART_SetConfig+0x348>
 80038e8:	2302      	movs	r3, #2
 80038ea:	77fb      	strb	r3, [r7, #31]
 80038ec:	e048      	b.n	8003980 <UART_SetConfig+0x348>
 80038ee:	2304      	movs	r3, #4
 80038f0:	77fb      	strb	r3, [r7, #31]
 80038f2:	e045      	b.n	8003980 <UART_SetConfig+0x348>
 80038f4:	2308      	movs	r3, #8
 80038f6:	77fb      	strb	r3, [r7, #31]
 80038f8:	e042      	b.n	8003980 <UART_SetConfig+0x348>
 80038fa:	bf00      	nop
 80038fc:	efff69f3 	.word	0xefff69f3
 8003900:	40011000 	.word	0x40011000
 8003904:	40023800 	.word	0x40023800
 8003908:	40004400 	.word	0x40004400
 800390c:	40004800 	.word	0x40004800
 8003910:	40004c00 	.word	0x40004c00
 8003914:	40005000 	.word	0x40005000
 8003918:	40011400 	.word	0x40011400
 800391c:	40007800 	.word	0x40007800
 8003920:	2310      	movs	r3, #16
 8003922:	77fb      	strb	r3, [r7, #31]
 8003924:	e02c      	b.n	8003980 <UART_SetConfig+0x348>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a72      	ldr	r2, [pc, #456]	@ (8003af4 <UART_SetConfig+0x4bc>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d125      	bne.n	800397c <UART_SetConfig+0x344>
 8003930:	4b71      	ldr	r3, [pc, #452]	@ (8003af8 <UART_SetConfig+0x4c0>)
 8003932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003936:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800393a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800393e:	d017      	beq.n	8003970 <UART_SetConfig+0x338>
 8003940:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003944:	d817      	bhi.n	8003976 <UART_SetConfig+0x33e>
 8003946:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800394a:	d00b      	beq.n	8003964 <UART_SetConfig+0x32c>
 800394c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003950:	d811      	bhi.n	8003976 <UART_SetConfig+0x33e>
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <UART_SetConfig+0x326>
 8003956:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800395a:	d006      	beq.n	800396a <UART_SetConfig+0x332>
 800395c:	e00b      	b.n	8003976 <UART_SetConfig+0x33e>
 800395e:	2300      	movs	r3, #0
 8003960:	77fb      	strb	r3, [r7, #31]
 8003962:	e00d      	b.n	8003980 <UART_SetConfig+0x348>
 8003964:	2302      	movs	r3, #2
 8003966:	77fb      	strb	r3, [r7, #31]
 8003968:	e00a      	b.n	8003980 <UART_SetConfig+0x348>
 800396a:	2304      	movs	r3, #4
 800396c:	77fb      	strb	r3, [r7, #31]
 800396e:	e007      	b.n	8003980 <UART_SetConfig+0x348>
 8003970:	2308      	movs	r3, #8
 8003972:	77fb      	strb	r3, [r7, #31]
 8003974:	e004      	b.n	8003980 <UART_SetConfig+0x348>
 8003976:	2310      	movs	r3, #16
 8003978:	77fb      	strb	r3, [r7, #31]
 800397a:	e001      	b.n	8003980 <UART_SetConfig+0x348>
 800397c:	2310      	movs	r3, #16
 800397e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003988:	d15b      	bne.n	8003a42 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800398a:	7ffb      	ldrb	r3, [r7, #31]
 800398c:	2b08      	cmp	r3, #8
 800398e:	d828      	bhi.n	80039e2 <UART_SetConfig+0x3aa>
 8003990:	a201      	add	r2, pc, #4	@ (adr r2, 8003998 <UART_SetConfig+0x360>)
 8003992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003996:	bf00      	nop
 8003998:	080039bd 	.word	0x080039bd
 800399c:	080039c5 	.word	0x080039c5
 80039a0:	080039cd 	.word	0x080039cd
 80039a4:	080039e3 	.word	0x080039e3
 80039a8:	080039d3 	.word	0x080039d3
 80039ac:	080039e3 	.word	0x080039e3
 80039b0:	080039e3 	.word	0x080039e3
 80039b4:	080039e3 	.word	0x080039e3
 80039b8:	080039db 	.word	0x080039db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039bc:	f7fe fda4 	bl	8002508 <HAL_RCC_GetPCLK1Freq>
 80039c0:	61b8      	str	r0, [r7, #24]
        break;
 80039c2:	e013      	b.n	80039ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039c4:	f7fe fdb4 	bl	8002530 <HAL_RCC_GetPCLK2Freq>
 80039c8:	61b8      	str	r0, [r7, #24]
        break;
 80039ca:	e00f      	b.n	80039ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039cc:	4b4b      	ldr	r3, [pc, #300]	@ (8003afc <UART_SetConfig+0x4c4>)
 80039ce:	61bb      	str	r3, [r7, #24]
        break;
 80039d0:	e00c      	b.n	80039ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039d2:	f7fe fc87 	bl	80022e4 <HAL_RCC_GetSysClockFreq>
 80039d6:	61b8      	str	r0, [r7, #24]
        break;
 80039d8:	e008      	b.n	80039ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039de:	61bb      	str	r3, [r7, #24]
        break;
 80039e0:	e004      	b.n	80039ec <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	77bb      	strb	r3, [r7, #30]
        break;
 80039ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d074      	beq.n	8003adc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	005a      	lsls	r2, r3, #1
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	085b      	lsrs	r3, r3, #1
 80039fc:	441a      	add	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a06:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	2b0f      	cmp	r3, #15
 8003a0c:	d916      	bls.n	8003a3c <UART_SetConfig+0x404>
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a14:	d212      	bcs.n	8003a3c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	f023 030f 	bic.w	r3, r3, #15
 8003a1e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	085b      	lsrs	r3, r3, #1
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	89fb      	ldrh	r3, [r7, #14]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	89fa      	ldrh	r2, [r7, #14]
 8003a38:	60da      	str	r2, [r3, #12]
 8003a3a:	e04f      	b.n	8003adc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	77bb      	strb	r3, [r7, #30]
 8003a40:	e04c      	b.n	8003adc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a42:	7ffb      	ldrb	r3, [r7, #31]
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	d828      	bhi.n	8003a9a <UART_SetConfig+0x462>
 8003a48:	a201      	add	r2, pc, #4	@ (adr r2, 8003a50 <UART_SetConfig+0x418>)
 8003a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4e:	bf00      	nop
 8003a50:	08003a75 	.word	0x08003a75
 8003a54:	08003a7d 	.word	0x08003a7d
 8003a58:	08003a85 	.word	0x08003a85
 8003a5c:	08003a9b 	.word	0x08003a9b
 8003a60:	08003a8b 	.word	0x08003a8b
 8003a64:	08003a9b 	.word	0x08003a9b
 8003a68:	08003a9b 	.word	0x08003a9b
 8003a6c:	08003a9b 	.word	0x08003a9b
 8003a70:	08003a93 	.word	0x08003a93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a74:	f7fe fd48 	bl	8002508 <HAL_RCC_GetPCLK1Freq>
 8003a78:	61b8      	str	r0, [r7, #24]
        break;
 8003a7a:	e013      	b.n	8003aa4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a7c:	f7fe fd58 	bl	8002530 <HAL_RCC_GetPCLK2Freq>
 8003a80:	61b8      	str	r0, [r7, #24]
        break;
 8003a82:	e00f      	b.n	8003aa4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a84:	4b1d      	ldr	r3, [pc, #116]	@ (8003afc <UART_SetConfig+0x4c4>)
 8003a86:	61bb      	str	r3, [r7, #24]
        break;
 8003a88:	e00c      	b.n	8003aa4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a8a:	f7fe fc2b 	bl	80022e4 <HAL_RCC_GetSysClockFreq>
 8003a8e:	61b8      	str	r0, [r7, #24]
        break;
 8003a90:	e008      	b.n	8003aa4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a96:	61bb      	str	r3, [r7, #24]
        break;
 8003a98:	e004      	b.n	8003aa4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	77bb      	strb	r3, [r7, #30]
        break;
 8003aa2:	bf00      	nop
    }

    if (pclk != 0U)
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d018      	beq.n	8003adc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	085a      	lsrs	r2, r3, #1
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	441a      	add	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003abc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	2b0f      	cmp	r3, #15
 8003ac2:	d909      	bls.n	8003ad8 <UART_SetConfig+0x4a0>
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aca:	d205      	bcs.n	8003ad8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	60da      	str	r2, [r3, #12]
 8003ad6:	e001      	b.n	8003adc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003ae8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3720      	adds	r7, #32
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40007c00 	.word	0x40007c00
 8003af8:	40023800 	.word	0x40023800
 8003afc:	00f42400 	.word	0x00f42400

08003b00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0c:	f003 0308 	and.w	r3, r3, #8
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00a      	beq.n	8003b2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00a      	beq.n	8003b6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b72:	f003 0304 	and.w	r3, r3, #4
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00a      	beq.n	8003b90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b94:	f003 0310 	and.w	r3, r3, #16
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00a      	beq.n	8003bb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb6:	f003 0320 	and.w	r3, r3, #32
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00a      	beq.n	8003bd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d01a      	beq.n	8003c16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bfe:	d10a      	bne.n	8003c16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	605a      	str	r2, [r3, #4]
  }
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b098      	sub	sp, #96	@ 0x60
 8003c48:	af02      	add	r7, sp, #8
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c54:	f7fd f90a 	bl	8000e6c <HAL_GetTick>
 8003c58:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d12e      	bne.n	8003cc6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c70:	2200      	movs	r2, #0
 8003c72:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f88c 	bl	8003d94 <UART_WaitOnFlagUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d021      	beq.n	8003cc6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c8a:	e853 3f00 	ldrex	r3, [r3]
 8003c8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c96:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ca0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ca2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ca6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ca8:	e841 2300 	strex	r3, r2, [r1]
 8003cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003cae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1e6      	bne.n	8003c82 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e062      	b.n	8003d8c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d149      	bne.n	8003d68 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cd4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f856 	bl	8003d94 <UART_WaitOnFlagUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d03c      	beq.n	8003d68 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf6:	e853 3f00 	ldrex	r3, [r3]
 8003cfa:	623b      	str	r3, [r7, #32]
   return(result);
 8003cfc:	6a3b      	ldr	r3, [r7, #32]
 8003cfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d10:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d14:	e841 2300 	strex	r3, r2, [r1]
 8003d18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1e6      	bne.n	8003cee <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	3308      	adds	r3, #8
 8003d26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	e853 3f00 	ldrex	r3, [r3]
 8003d2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f023 0301 	bic.w	r3, r3, #1
 8003d36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3308      	adds	r3, #8
 8003d3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d40:	61fa      	str	r2, [r7, #28]
 8003d42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d44:	69b9      	ldr	r1, [r7, #24]
 8003d46:	69fa      	ldr	r2, [r7, #28]
 8003d48:	e841 2300 	strex	r3, r2, [r1]
 8003d4c:	617b      	str	r3, [r7, #20]
   return(result);
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1e5      	bne.n	8003d20 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e011      	b.n	8003d8c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3758      	adds	r7, #88	@ 0x58
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	603b      	str	r3, [r7, #0]
 8003da0:	4613      	mov	r3, r2
 8003da2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003da4:	e04f      	b.n	8003e46 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dac:	d04b      	beq.n	8003e46 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dae:	f7fd f85d 	bl	8000e6c <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d302      	bcc.n	8003dc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e04e      	b.n	8003e66 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d037      	beq.n	8003e46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b80      	cmp	r3, #128	@ 0x80
 8003dda:	d034      	beq.n	8003e46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b40      	cmp	r3, #64	@ 0x40
 8003de0:	d031      	beq.n	8003e46 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d110      	bne.n	8003e12 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2208      	movs	r2, #8
 8003df6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 f8ff 	bl	8003ffc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2208      	movs	r2, #8
 8003e02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e029      	b.n	8003e66 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e20:	d111      	bne.n	8003e46 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 f8e5 	bl	8003ffc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e00f      	b.n	8003e66 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	69da      	ldr	r2, [r3, #28]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	bf0c      	ite	eq
 8003e56:	2301      	moveq	r3, #1
 8003e58:	2300      	movne	r3, #0
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	79fb      	ldrb	r3, [r7, #7]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d0a0      	beq.n	8003da6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
	...

08003e70 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b097      	sub	sp, #92	@ 0x5c
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	88fa      	ldrh	r2, [r7, #6]
 8003e88:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	88fa      	ldrh	r2, [r7, #6]
 8003e90:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ea2:	d10e      	bne.n	8003ec2 <UART_Start_Receive_IT+0x52>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d105      	bne.n	8003eb8 <UART_Start_Receive_IT+0x48>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003eb2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003eb6:	e02d      	b.n	8003f14 <UART_Start_Receive_IT+0xa4>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	22ff      	movs	r2, #255	@ 0xff
 8003ebc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003ec0:	e028      	b.n	8003f14 <UART_Start_Receive_IT+0xa4>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10d      	bne.n	8003ee6 <UART_Start_Receive_IT+0x76>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d104      	bne.n	8003edc <UART_Start_Receive_IT+0x6c>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	22ff      	movs	r2, #255	@ 0xff
 8003ed6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003eda:	e01b      	b.n	8003f14 <UART_Start_Receive_IT+0xa4>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	227f      	movs	r2, #127	@ 0x7f
 8003ee0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003ee4:	e016      	b.n	8003f14 <UART_Start_Receive_IT+0xa4>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003eee:	d10d      	bne.n	8003f0c <UART_Start_Receive_IT+0x9c>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d104      	bne.n	8003f02 <UART_Start_Receive_IT+0x92>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	227f      	movs	r2, #127	@ 0x7f
 8003efc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f00:	e008      	b.n	8003f14 <UART_Start_Receive_IT+0xa4>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	223f      	movs	r2, #63	@ 0x3f
 8003f06:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f0a:	e003      	b.n	8003f14 <UART_Start_Receive_IT+0xa4>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2222      	movs	r2, #34	@ 0x22
 8003f20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3308      	adds	r3, #8
 8003f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f2e:	e853 3f00 	ldrex	r3, [r3]
 8003f32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f36:	f043 0301 	orr.w	r3, r3, #1
 8003f3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3308      	adds	r3, #8
 8003f42:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003f44:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003f46:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f48:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003f4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f4c:	e841 2300 	strex	r3, r2, [r1]
 8003f50:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003f52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e5      	bne.n	8003f24 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f60:	d107      	bne.n	8003f72 <UART_Start_Receive_IT+0x102>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d103      	bne.n	8003f72 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	4a21      	ldr	r2, [pc, #132]	@ (8003ff4 <UART_Start_Receive_IT+0x184>)
 8003f6e:	669a      	str	r2, [r3, #104]	@ 0x68
 8003f70:	e002      	b.n	8003f78 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4a20      	ldr	r2, [pc, #128]	@ (8003ff8 <UART_Start_Receive_IT+0x188>)
 8003f76:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d019      	beq.n	8003fb4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f88:	e853 3f00 	ldrex	r3, [r3]
 8003f8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f90:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003f94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fa0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003fa4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003fa6:	e841 2300 	strex	r3, r2, [r1]
 8003faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1e6      	bne.n	8003f80 <UART_Start_Receive_IT+0x110>
 8003fb2:	e018      	b.n	8003fe6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	e853 3f00 	ldrex	r3, [r3]
 8003fc0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f043 0320 	orr.w	r3, r3, #32
 8003fc8:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fd2:	623b      	str	r3, [r7, #32]
 8003fd4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd6:	69f9      	ldr	r1, [r7, #28]
 8003fd8:	6a3a      	ldr	r2, [r7, #32]
 8003fda:	e841 2300 	strex	r3, r2, [r1]
 8003fde:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1e6      	bne.n	8003fb4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	375c      	adds	r7, #92	@ 0x5c
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	080042e5 	.word	0x080042e5
 8003ff8:	0800413d 	.word	0x0800413d

08003ffc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b095      	sub	sp, #84	@ 0x54
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800400c:	e853 3f00 	ldrex	r3, [r3]
 8004010:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004014:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004018:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	461a      	mov	r2, r3
 8004020:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004022:	643b      	str	r3, [r7, #64]	@ 0x40
 8004024:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004026:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004028:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800402a:	e841 2300 	strex	r3, r2, [r1]
 800402e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1e6      	bne.n	8004004 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	3308      	adds	r3, #8
 800403c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	e853 3f00 	ldrex	r3, [r3]
 8004044:	61fb      	str	r3, [r7, #28]
   return(result);
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	f023 0301 	bic.w	r3, r3, #1
 800404c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	3308      	adds	r3, #8
 8004054:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004056:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004058:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800405c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800405e:	e841 2300 	strex	r3, r2, [r1]
 8004062:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1e5      	bne.n	8004036 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800406e:	2b01      	cmp	r3, #1
 8004070:	d118      	bne.n	80040a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	e853 3f00 	ldrex	r3, [r3]
 800407e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f023 0310 	bic.w	r3, r3, #16
 8004086:	647b      	str	r3, [r7, #68]	@ 0x44
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	461a      	mov	r2, r3
 800408e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004090:	61bb      	str	r3, [r7, #24]
 8004092:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004094:	6979      	ldr	r1, [r7, #20]
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	e841 2300 	strex	r3, r2, [r1]
 800409c:	613b      	str	r3, [r7, #16]
   return(result);
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1e6      	bne.n	8004072 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80040b8:	bf00      	nop
 80040ba:	3754      	adds	r7, #84	@ 0x54
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f7ff fa8c 	bl	80035f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040e0:	bf00      	nop
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b088      	sub	sp, #32
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	e853 3f00 	ldrex	r3, [r3]
 80040fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004104:	61fb      	str	r3, [r7, #28]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	461a      	mov	r2, r3
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	61bb      	str	r3, [r7, #24]
 8004110:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004112:	6979      	ldr	r1, [r7, #20]
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	e841 2300 	strex	r3, r2, [r1]
 800411a:	613b      	str	r3, [r7, #16]
   return(result);
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1e6      	bne.n	80040f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2220      	movs	r2, #32
 8004126:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7ff fa58 	bl	80035e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004134:	bf00      	nop
 8004136:	3720      	adds	r7, #32
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b09c      	sub	sp, #112	@ 0x70
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800414a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004154:	2b22      	cmp	r3, #34	@ 0x22
 8004156:	f040 80b9 	bne.w	80042cc <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004160:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004164:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004168:	b2d9      	uxtb	r1, r3
 800416a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800416e:	b2da      	uxtb	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004174:	400a      	ands	r2, r1
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800417e:	1c5a      	adds	r2, r3, #1
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800418a:	b29b      	uxth	r3, r3
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800419c:	b29b      	uxth	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f040 809c 	bne.w	80042dc <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041ac:	e853 3f00 	ldrex	r3, [r3]
 80041b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80041b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	461a      	mov	r2, r3
 80041c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80041c4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80041ca:	e841 2300 	strex	r3, r2, [r1]
 80041ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80041d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1e6      	bne.n	80041a4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3308      	adds	r3, #8
 80041dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e0:	e853 3f00 	ldrex	r3, [r3]
 80041e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041e8:	f023 0301 	bic.w	r3, r3, #1
 80041ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	3308      	adds	r3, #8
 80041f4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80041f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80041f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041fe:	e841 2300 	strex	r3, r2, [r1]
 8004202:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1e5      	bne.n	80041d6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2220      	movs	r2, #32
 800420e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d018      	beq.n	800425e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004234:	e853 3f00 	ldrex	r3, [r3]
 8004238:	623b      	str	r3, [r7, #32]
   return(result);
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004240:	663b      	str	r3, [r7, #96]	@ 0x60
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	461a      	mov	r2, r3
 8004248:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800424a:	633b      	str	r3, [r7, #48]	@ 0x30
 800424c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004250:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004252:	e841 2300 	strex	r3, r2, [r1]
 8004256:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1e6      	bne.n	800422c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004262:	2b01      	cmp	r3, #1
 8004264:	d12e      	bne.n	80042c4 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	e853 3f00 	ldrex	r3, [r3]
 8004278:	60fb      	str	r3, [r7, #12]
   return(result);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f023 0310 	bic.w	r3, r3, #16
 8004280:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	461a      	mov	r2, r3
 8004288:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800428a:	61fb      	str	r3, [r7, #28]
 800428c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428e:	69b9      	ldr	r1, [r7, #24]
 8004290:	69fa      	ldr	r2, [r7, #28]
 8004292:	e841 2300 	strex	r3, r2, [r1]
 8004296:	617b      	str	r3, [r7, #20]
   return(result);
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1e6      	bne.n	800426c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	69db      	ldr	r3, [r3, #28]
 80042a4:	f003 0310 	and.w	r3, r3, #16
 80042a8:	2b10      	cmp	r3, #16
 80042aa:	d103      	bne.n	80042b4 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2210      	movs	r2, #16
 80042b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80042ba:	4619      	mov	r1, r3
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f7ff f9a5 	bl	800360c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80042c2:	e00b      	b.n	80042dc <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f7fc fbe5 	bl	8000a94 <HAL_UART_RxCpltCallback>
}
 80042ca:	e007      	b.n	80042dc <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	699a      	ldr	r2, [r3, #24]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0208 	orr.w	r2, r2, #8
 80042da:	619a      	str	r2, [r3, #24]
}
 80042dc:	bf00      	nop
 80042de:	3770      	adds	r7, #112	@ 0x70
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b09c      	sub	sp, #112	@ 0x70
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80042f2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042fc:	2b22      	cmp	r3, #34	@ 0x22
 80042fe:	f040 80b9 	bne.w	8004474 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004308:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004310:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004312:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004316:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800431a:	4013      	ands	r3, r2
 800431c:	b29a      	uxth	r2, r3
 800431e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004320:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004326:	1c9a      	adds	r2, r3, #2
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004332:	b29b      	uxth	r3, r3
 8004334:	3b01      	subs	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004344:	b29b      	uxth	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	f040 809c 	bne.w	8004484 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004352:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004354:	e853 3f00 	ldrex	r3, [r3]
 8004358:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800435a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800435c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004360:	667b      	str	r3, [r7, #100]	@ 0x64
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800436a:	657b      	str	r3, [r7, #84]	@ 0x54
 800436c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004370:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004372:	e841 2300 	strex	r3, r2, [r1]
 8004376:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004378:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1e6      	bne.n	800434c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3308      	adds	r3, #8
 8004384:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004388:	e853 3f00 	ldrex	r3, [r3]
 800438c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800438e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004390:	f023 0301 	bic.w	r3, r3, #1
 8004394:	663b      	str	r3, [r7, #96]	@ 0x60
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	3308      	adds	r3, #8
 800439c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800439e:	643a      	str	r2, [r7, #64]	@ 0x40
 80043a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043a6:	e841 2300 	strex	r3, r2, [r1]
 80043aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1e5      	bne.n	800437e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2220      	movs	r2, #32
 80043b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d018      	beq.n	8004406 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	e853 3f00 	ldrex	r3, [r3]
 80043e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80043e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043f4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043fa:	e841 2300 	strex	r3, r2, [r1]
 80043fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1e6      	bne.n	80043d4 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800440a:	2b01      	cmp	r3, #1
 800440c:	d12e      	bne.n	800446c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	e853 3f00 	ldrex	r3, [r3]
 8004420:	60bb      	str	r3, [r7, #8]
   return(result);
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f023 0310 	bic.w	r3, r3, #16
 8004428:	65bb      	str	r3, [r7, #88]	@ 0x58
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	461a      	mov	r2, r3
 8004430:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004432:	61bb      	str	r3, [r7, #24]
 8004434:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004436:	6979      	ldr	r1, [r7, #20]
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	e841 2300 	strex	r3, r2, [r1]
 800443e:	613b      	str	r3, [r7, #16]
   return(result);
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1e6      	bne.n	8004414 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	f003 0310 	and.w	r3, r3, #16
 8004450:	2b10      	cmp	r3, #16
 8004452:	d103      	bne.n	800445c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2210      	movs	r2, #16
 800445a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004462:	4619      	mov	r1, r3
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7ff f8d1 	bl	800360c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800446a:	e00b      	b.n	8004484 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f7fc fb11 	bl	8000a94 <HAL_UART_RxCpltCallback>
}
 8004472:	e007      	b.n	8004484 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699a      	ldr	r2, [r3, #24]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0208 	orr.w	r2, r2, #8
 8004482:	619a      	str	r2, [r3, #24]
}
 8004484:	bf00      	nop
 8004486:	3770      	adds	r7, #112	@ 0x70
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <memset>:
 800448c:	4402      	add	r2, r0
 800448e:	4603      	mov	r3, r0
 8004490:	4293      	cmp	r3, r2
 8004492:	d100      	bne.n	8004496 <memset+0xa>
 8004494:	4770      	bx	lr
 8004496:	f803 1b01 	strb.w	r1, [r3], #1
 800449a:	e7f9      	b.n	8004490 <memset+0x4>

0800449c <__libc_init_array>:
 800449c:	b570      	push	{r4, r5, r6, lr}
 800449e:	4d0d      	ldr	r5, [pc, #52]	@ (80044d4 <__libc_init_array+0x38>)
 80044a0:	4c0d      	ldr	r4, [pc, #52]	@ (80044d8 <__libc_init_array+0x3c>)
 80044a2:	1b64      	subs	r4, r4, r5
 80044a4:	10a4      	asrs	r4, r4, #2
 80044a6:	2600      	movs	r6, #0
 80044a8:	42a6      	cmp	r6, r4
 80044aa:	d109      	bne.n	80044c0 <__libc_init_array+0x24>
 80044ac:	4d0b      	ldr	r5, [pc, #44]	@ (80044dc <__libc_init_array+0x40>)
 80044ae:	4c0c      	ldr	r4, [pc, #48]	@ (80044e0 <__libc_init_array+0x44>)
 80044b0:	f000 f818 	bl	80044e4 <_init>
 80044b4:	1b64      	subs	r4, r4, r5
 80044b6:	10a4      	asrs	r4, r4, #2
 80044b8:	2600      	movs	r6, #0
 80044ba:	42a6      	cmp	r6, r4
 80044bc:	d105      	bne.n	80044ca <__libc_init_array+0x2e>
 80044be:	bd70      	pop	{r4, r5, r6, pc}
 80044c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80044c4:	4798      	blx	r3
 80044c6:	3601      	adds	r6, #1
 80044c8:	e7ee      	b.n	80044a8 <__libc_init_array+0xc>
 80044ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ce:	4798      	blx	r3
 80044d0:	3601      	adds	r6, #1
 80044d2:	e7f2      	b.n	80044ba <__libc_init_array+0x1e>
 80044d4:	080045d4 	.word	0x080045d4
 80044d8:	080045d4 	.word	0x080045d4
 80044dc:	080045d4 	.word	0x080045d4
 80044e0:	080045d8 	.word	0x080045d8

080044e4 <_init>:
 80044e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e6:	bf00      	nop
 80044e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ea:	bc08      	pop	{r3}
 80044ec:	469e      	mov	lr, r3
 80044ee:	4770      	bx	lr

080044f0 <_fini>:
 80044f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f2:	bf00      	nop
 80044f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044f6:	bc08      	pop	{r3}
 80044f8:	469e      	mov	lr, r3
 80044fa:	4770      	bx	lr
